<HTML>
<HEAD><TITLE>Introduction to Operating Systems - Assignment #1</TITLE>
<script language="JavaScript">
<!--
function MM_preloadImages() { //v3.0
  var d=document; if(d.images){ if(!d.MM_p) d.MM_p=new Array();
    var i,j=d.MM_p.length,a=MM_preloadImages.arguments; for(i=0; i<a.length; i++)
    if (a[i].indexOf("#")!=0){ d.MM_p[j]=new Image; d.MM_p[j++].src=a[i];}}
}

function MM_findObj(n, d) { //v4.0
  var p,i,x;  if(!d) d=document; if((p=n.indexOf("?"))>0&&parent.frames.length) {
    d=parent.frames[n.substring(p+1)].document; n=n.substring(0,p);}
  if(!(x=d[n])&&d.all) x=d.all[n]; for (i=0;!x&&i<d.forms.length;i++) x=d.forms[i][n];
  for(i=0;!x&&d.layers&&i<d.layers.length;i++) x=MM_findObj(n,d.layers[i].document);
  if(!x && document.getElementById) x=document.getElementById(n); return x;
}

function MM_nbGroup(event, grpName) { //v3.0
  var i,img,nbArr,args=MM_nbGroup.arguments;
  if (event == "init" && args.length > 2) {
    if ((img = MM_findObj(args[2])) != null && !img.MM_init) {
      img.MM_init = true; img.MM_up = args[3]; img.MM_dn = img.src;
      if ((nbArr = document[grpName]) == null) nbArr = document[grpName] = new Array();
      nbArr[nbArr.length] = img;
      for (i=4; i < args.length-1; i+=2) if ((img = MM_findObj(args[i])) != null) {
        if (!img.MM_up) img.MM_up = img.src;
        img.src = img.MM_dn = args[i+1];
        nbArr[nbArr.length] = img;
    } }
  } else if (event == "over") {
    document.MM_nbOver = nbArr = new Array();
    for (i=1; i < args.length-1; i+=3) if ((img = MM_findObj(args[i])) != null) {
      if (!img.MM_up) img.MM_up = img.src;
      img.src = (img.MM_dn && args[i+2]) ? args[i+2] : args[i+1];
      nbArr[nbArr.length] = img;
    }
  } else if (event == "out" ) {
    for (i=0; i < document.MM_nbOver.length; i++) {
      img = document.MM_nbOver[i]; img.src = (img.MM_dn) ? img.MM_dn : img.MM_up; }
  } else if (event == "down") {
    if ((nbArr = document[grpName]) != null)
      for (i=0; i < nbArr.length; i++) { img=nbArr[i]; img.src = img.MM_up; img.MM_dn = 0; }
    document[grpName] = nbArr = new Array();
    for (i=2; i < args.length-1; i+=2) if ((img = MM_findObj(args[i])) != null) {
      if (!img.MM_up) img.MM_up = img.src;
      img.src = img.MM_dn = args[i+1];
      nbArr[nbArr.length] = img;
  } }
}

function MM_displayStatusMsg(msgStr) { //v1.0
  status=msgStr;
  document.MM_returnValue = true;
}
//-->
</script>
</HEAD>

<BODY bgcolor=WHITE onLoad="MM_preloadImages('images/CMPS111NavBar_r1_c1_f3.gif','images/CMPS111NavBar_r1_c1_f2.gif','images/CMPS111NavBar_r1_c2_f3.gif','images/CMPS111NavBar_r1_c2_f2.gif','images/CMPS111NavBar_r1_c3_f3.gif','images/CMPS111NavBar_r1_c3_f2.gif','images/CMPS111NavBar_r1_c4_f3.gif','images/CMPS111NavBar_r1_c4_f2.gif','images/CMPS111NavBar_r1_c5_f3.gif','images/CMPS111NavBar_r1_c5_f2.gif')">
<hr>
<center>
  <table border="0" cellpadding="0" cellspacing="0" width="749">
    <!-- fwtable fwsrc="CMPS111NavBar.png" fwbase="CMPS111NavBar.gif" fwstyle="Dreamweaver" fwdocid = "742308039" fwnested="0" -->
    <tr> 
      <td><img src="images/spacer.gif" width="150" height="1" border="0" name="undefined_3"></td>
      <td><img src="images/spacer.gif" width="150" height="1" border="0" name="undefined_3"></td>
      <td><img src="images/spacer.gif" width="149" height="1" border="0" name="undefined_3"></td>
      <td><img src="images/spacer.gif" width="150" height="1" border="0" name="undefined_3"></td>
      <td><img src="images/spacer.gif" width="150" height="1" border="0" name="undefined_3"></td>
      <td><img src="images/spacer.gif" width="1" height="1" border="0" name="undefined_3"></td>
    </tr>
    <tr> 
      <td><a href="index.html" onMouseOut="MM_nbGroup('out');"  onMouseOver="MM_displayStatusMsg('Home Page');MM_nbGroup('over','CMPS111NavBar_r1_c1_2','images/CMPS111NavBar_r1_c1_f2.gif','images/CMPS111NavBar_r1_c1_f3.gif',1);return document.MM_returnValue"  onClick="MM_nbGroup('down','navbar1','CMPS111NavBar_r1_c1_2','images/CMPS111NavBar_r1_c1_f3.gif',1);" ><img name="CMPS111NavBar_r1_c1_2" src="images/CMPS111NavBar_r1_c1.gif" width="150" height="37" border="0"></a></td>
      <td><a href="homework.html" onMouseOut="MM_nbGroup('out');"  onMouseOver="MM_displayStatusMsg('Homework');MM_nbGroup('over','CMPS111NavBar_r1_c2_2','images/CMPS111NavBar_r1_c2_f2.gif','images/CMPS111NavBar_r1_c2_f3.gif',1);return document.MM_returnValue"  onClick="MM_nbGroup('down','navbar1','CMPS111NavBar_r1_c2_2','images/CMPS111NavBar_r1_c2_f3.gif',1);" ><img name="CMPS111NavBar_r1_c2_2" src="images/CMPS111NavBar_r1_c2.gif" width="150" height="37" border="0"></a></td>
      <td><a href="assignments.html" onMouseOut="MM_nbGroup('out');"  onMouseOver="MM_displayStatusMsg('Assignments');MM_nbGroup('over','CMPS111NavBar_r1_c3_2','images/CMPS111NavBar_r1_c3_f2.gif','images/CMPS111NavBar_r1_c3_f3.gif',1);return document.MM_returnValue"  onClick="MM_nbGroup('down','navbar1','CMPS111NavBar_r1_c3_2','images/CMPS111NavBar_r1_c3_f3.gif',1);" ><img name="CMPS111NavBar_r1_c3_2" src="images/CMPS111NavBar_r1_c3.gif" width="149" height="37" border="0"></a></td>
      <td><a href="exams.html" onMouseOut="MM_nbGroup('out');"  onMouseOver="MM_displayStatusMsg('Exams');MM_nbGroup('over','CMPS111NavBar_r1_c4_2','images/CMPS111NavBar_r1_c4_f2.gif','images/CMPS111NavBar_r1_c4_f3.gif',1);return document.MM_returnValue"  onClick="MM_nbGroup('down','navbar1','CMPS111NavBar_r1_c4_2','images/CMPS111NavBar_r1_c4_f3.gif',1);" ><img name="CMPS111NavBar_r1_c4_2" src="images/CMPS111NavBar_r1_c4.gif" width="150" height="37" border="0"></a></td>
      <td><a href="slides.html" onMouseOut="MM_nbGroup('out');"  onMouseOver="MM_displayStatusMsg('Slides');MM_nbGroup('over','CMPS111NavBar_r1_c5','images/CMPS111NavBar_r1_c5_f2.gif','images/CMPS111NavBar_r1_c5_f3.gif',1);return document.MM_returnValue"  onClick="MM_nbGroup('down','navbar1','CMPS111NavBar_r1_c5','images/CMPS111NavBar_r1_c5_f3.gif',1);" ><img name="CMPS111NavBar_r1_c5" src="images/CMPS111NavBar_r1_c5.gif" width="150" height="37" border="0"></a></td>
      <td><img src="images/spacer.gif" width="1" height="37" border="0" name="undefined_3"></td>
    </tr>
  </table>
</center>
<hr>
<p>

<center>
  <H1>CS 1550: Introduction to Operating Systems</H1>

  <h2>Programming Assignment #1: Writing a Shell</h2>

Due Date: Friday, January 13th 2006
</center>

<hr>
<center>
<em>This assignment is for self-testing. It is highly recommended that
you complete it before the drop/add deadline.
</center>
<hr>		
<h3> The Basics </h3>
The goal of this assignment is to get everyone up to speed on system
programming and to gain some familiarity with the system call
interface.  A secondary goal is to use some of the programming tools
provided in the Unix environment.  In this assignment you are to
implement a Unix shell program.  A shell is simply a program that
conveniently allows you to run other programs.  Read up on your
favorite shell to see what it does.

<p>
The requirements for completing this assignment successfully are
simply the first two points in described under <b>Details</b>.
If you want to experiment further, try implementing all functions,
using the skeleton code provided. For completing the basics it is 
sufficient to read input lines from a loop and to take the first
word written.

<p>

<h3> The Rest </h3>
You are provided with files called <a href="code/lex.c">lex.c</a> and
<a href="code/myshell.c">myshell.c</a> which contains some code that
uses getline(), a function provided by lex.c to get and parse a line
of input.  getline() returns an array of pointers to character
strings.  Each string is either a word containing the letters,
numbers, ., and /, or a single character string containing one of the
special characters: ( ) < > | & ;.<p>

<p> To compile lex.c, you have to use flex: "flex lex.c". This will produce a 
  file called lex.yy.c. lex.yy.c and myshell.c must then be compiled and linked 
  in order to get a running program. In the link step you also have to use "-lfl" 
  to get everything to work properly. Use gcc for the compilation and linking. 
  Try it now with my versions of the files. 
<p>

<p>A <a href = "./Makefile">Makefile</a> for this assignment is provided.
(Download this file and try not to cut and paste as this could have an adverse 
effect on the formatting of the file).

<hr><p>

<h3>The Details</h3>

<b>Your shell must support the following:</b>
<ol>
  <li> <strong>The internal shell command "exit" which terminates the shell</strong>.<br>
    Concepts: shell commands, exiting the shell<br>
    <u>System calls</u>: exit() 
    <p> 
  <li> <strong>A command with no arguments</strong><br>
    Example: ls<br>
    Details: Your shell must block until the command completes and, if the return 
    code is abnormal, print out a message to that effect.<br>
    Concepts: Forking a child process, waiting for it to complete, synchronous 
    execution<br>
    <u>System calls</u>: fork(), execvp(), exit(), wait() 
</ol>
    <p> 
<b>Your shell can also support the following:</b>
<ol>
  <li> <strong>A command with arguments</strong><br>
    Example: ls -l<br>
    Details: Argument 0 is the name of the command<br>
    Concepts: Command-line parameters <br>
    <p> 
  <li> <strong>A command, with or without arguments, executed in the background 
    using &.</strong><br>
    <i>For simplicity, assume that if present the & is always the last thing on 
    the line.</i><br>
    Example: xemacs &<br>
    Details: In this case, your shell must execute the command and return immediately, 
    not blocking until the command finishes.<br>
    Concepts: Background execution, signals, signal handlers, processes, asynchronous 
    execution<br>
    <u>System calls</u>: sigset() 
    <p> 
  <li> <strong>A command, with or without arguments, whose output is redirected 
    to a file</strong><br>
    Example: ls -l > foo<br>
    Details: This takes the output of the command and put it in the named file<br>
    Concepts: File operations, output redirection<br>
    <u>System calls</u>: freopen() 
    <p> 
  <li> <strong>A command, with or without arguments, whose input is redirected 
    from a file</strong><BR>
    Example: sort < testfile<br>
    Details: This takes the named file as input to the command<br>
    Concepts: Input redirection, more file operations<br>
    <u>System calls:</u> freopen() 
    <p> 
  <li> <strong>A command, with or without arguments, whose output 
    is piped to the input of another command.</strong><br>
    Example: ls -l | more<br>
	Details: This takes the output of the first command and makes it the input
	to the second command<br>
    Concepts: Pipes, synchronous operation<br>
    <u>System calls</u>: pipe()<br>
</ol>

<i>Note: You must check and correctly handle all return values. This means that 
you need to read the man pages for each function to figure out what the possible 
return values are, what errors they indicate, and what you must do when you get 
that error. </i>
<P>

<hr size=4>

<p>
<h3>A Sample Solution</h3>

After you have attempted to write your own shell, or if you want a
sample to help understand a problem you ran into, then you may
download this version of the 
<a href="solutions/myshell.c">myshell.c</a> 
source file.

<hr size=4>

<p>

  <table width=100%>
    <tr>
      <td>
      <td>
        <center>
          <EM> This assignment and solution was provided by 
          Prof. Scott A. Brandt
          </EM>
        </center>
      <td>
    </tr>
  </table>


</BODY>
</HTML>

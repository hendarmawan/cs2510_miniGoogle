<title>MICE Developer's Guide</title>
<h1>MICE Developer's Guide</h1>

<center><b>
MULTIMEDIA IC DEVELOPMENT ENVIRONMENT (MICE)
</b></center>

<pre>
Directories:
IC_Builder/         the files you need to run the IC_Builder on PC
IC_Compiler/        the files to run the IC_Compiler
IC_Manager/         source files needed to compile the IC_Manager
IC_Taoml/           the interpretor to translate .taoml to .html for testing
IC_Work/            workarea for the developers to do software development
AMIS/               application example: disaster multimedia information system
AMIS2/              application example: medical multimedia information system
WAG/                application example: web-at-a-glance system

</pre>

<h2>Seven steps to build a MICE application in the IC_Work/ directory:</h2>

(1) Download the IC_Builder to your PC, unzip and install it under Windows.
    Use IC_Builder to draw each index cell and create the .in file for each
    ic.  Use capital letters for the *.in files such as XIC.in, DIC.in, etc.
    The <a href="IC_Builder/README.ICB.html">IC_Builder</a> will also create the ic.dat file.
    (You can also create *.in and ic.dat manually without using IC_Builder)

<p>
(2) Provide one action file for each action defined in the ic's.  An action file
    contains the corresponding C function for each action and should be copied
    to the IC_Work/source/ directory.

<p>
(3) Copy *.in files to IC_Work/ directory and ic.dat file to IC_Work/source/ directory.
    Copy all files from IC_Compiler, IC_Manager and IC_Taoml to IC_Work/source/ directory.
    If necessary, modify the ic.dat file. Use IC_Compiler icc to generate the
    source files. See the <a href="IC_Compiler/README.ICC.html">README.ICC.html</a> file in IC_Compiler directory for details.
    There are six files generated by IC_Compiler icc:
        actions.c   ic_func2.c  ic_func3.c   app.h   fuzzy.h   db_def.h

<p>
(4) Use command "make -f makefile.maincgi" to make main.cgi which is the cgi program
    that your application will need.  Therefore, you may call it main.cgi.
    The IC_Manager becomes part of main.cgi so any message to an ic will be sent to
    this main.cgi.  See <a href="IC_Manager/README.ICM.html">README.ICM.html</a> file in IC_Manager directory for details.

<p>
(5) Use command "make -f makefile.intercgi" to make inter.cgi which is the
    cgi program to access a taoml page.  main.cgi and inter.cgi should be copied
    to application directory IC_Work/ so that the home page can use inter.cgi to
    access a taoml page such as tao_1.taoml.  The link has the following
    form: <br> &lt;a href="inter.cgi?tao_name=tao_1.taoml" &gt.

<p>
(6) Design the home page index.html for the application and put it in directory
    IC_Work/.  This home page should have a cgi link to a taoml page such as
    tao_1.taoml.  tao_1.taoml and its associated template page tao_1.tpl should be
    in the sub-directory IC_Work/TAOML/.  Indeed, all taoml pages and tpl pages
    should be in the sub-directory IC_Work/TAOML/.  To create the <a href="http://www.cs.pitt.edu/~chang/365/w5.txt">taoml</a> pages,
    you will use an extended html syntax to specify the TAOs and how they
    are structured and activate ic using the cgi program which is main.cgi.
    If you want to refer to your own cgi programs, they can be mentioned in
    the tpl pages.  To sum up, there are three type of pages:<br>
      <li> html page index.html uses cgi program inter.cgi to link to tao_1.taoml
      <li> taoml page tao_1.taoml uses cgi program main.cgi to activate an ic tao_1
      <li> tpl page tao_1.tpl uses customized cgi program to do special tasks

<p>
(7) Now you are ready to run your application.  Use a browser to enter
    application's home page IC_Work/index.html.

<p><b>Notes:</b>
1. For detailed step-by-step instructions, see <a href="IC_Work/README.ICW.html">MICE Application Development Steps</a>.<br>
2. Program compilation must be done on the <b>same</b> type of
computer system as the server.  For example at Pitt's CS
Department you should choose "ernie" or "bert".<br>
3. In IC_Compiler directory, the action template is action.tpl
and the customized action functions are a1.c through a5.c,
which corresponds to the actions a1 through a5.

<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html xmlns:o="urn:schemas-microsoft-com:office:office"
xmlns:w="urn:schemas-microsoft-com:office:word"
xmlns="http://www.w3.org/TR/REC-html40">

<head>
<meta http-equiv=Content-Type content="text/html; charset=iso-8859-1">
<meta name=ProgId content=Word.Document>
<meta name=Generator content="Microsoft Word 9">
<meta name=Originator content="Microsoft Word 9">
<link rel=File-List href="./unit6-cache_files/filelist.xml">
<title>Implementing the Cache Memory</title>
<!--[if gte mso 9]><xml>
 <o:DocumentProperties>
  <o:Author>Optical Computing Labratory</o:Author>
  <o:LastAuthor>Optical Computing Labratory</o:LastAuthor>
  <o:Revision>2</o:Revision>
  <o:TotalTime>1</o:TotalTime>
  <o:Created>2005-11-28T18:31:00Z</o:Created>
  <o:LastSaved>2005-11-28T18:32:00Z</o:LastSaved>
  <o:Pages>1</o:Pages>
  <o:Words>455</o:Words>
  <o:Characters>2595</o:Characters>
  <o:Company>University of Pittsburgh</o:Company>
  <o:Lines>21</o:Lines>
  <o:Paragraphs>5</o:Paragraphs>
  <o:CharactersWithSpaces>3186</o:CharactersWithSpaces>
  <o:Version>9.2720</o:Version>
 </o:DocumentProperties>
</xml><![endif]-->
<style>
<!--
 /* Font Definitions */
@font-face
	{font-family:Wingdings;
	panose-1:5 0 0 0 0 0 0 0 0 0;
	mso-font-charset:2;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:0 268435456 0 0 -2147483648 0;}
 /* Style Definitions */
p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-parent:"";
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p
	{font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
@page Section1
	{size:8.5in 11.0in;
	margin:1.0in 1.25in 1.0in 1.25in;
	mso-header-margin:.5in;
	mso-footer-margin:.5in;
	mso-paper-source:0;}
div.Section1
	{page:Section1;}
 /* List Definitions */
@list l0
	{mso-list-id:1686397203;
	mso-list-type:hybrid;
	mso-list-template-ids:-977756460 -1543191554 -1716485700 -1622369074 169231082 1800727988 -861881560 1864560306 -1542569128 45656312;}
@list l0:level1
	{mso-level-number-format:bullet;
	mso-level-text:\F0B7;
	mso-level-tab-stop:.5in;
	mso-level-number-position:left;
	text-indent:-.25in;
	mso-ansi-font-size:10.0pt;
	font-family:Symbol;}
@list l1
	{mso-list-id:2063139722;
	mso-list-type:hybrid;
	mso-list-template-ids:-411148282 880840720 1262808036 872827614 -1908902086 2044647688 -909607662 -1886621914 -1685578496 -893332612;}
@list l1:level1
	{mso-level-number-format:bullet;
	mso-level-text:\F0B7;
	mso-level-tab-stop:.5in;
	mso-level-number-position:left;
	text-indent:-.25in;
	mso-ansi-font-size:10.0pt;
	font-family:Symbol;}
ol
	{margin-bottom:0in;}
ul
	{margin-bottom:0in;}
-->
</style>
<meta name=Author content="Donald M. Chiarulli">
</head>

<body lang=EN-US style='tab-interval:.5in'>

<div class=Section1>

<h3>Cache Memory</h3>

<p class=MsoNormal>The idea of the cache memory is to minimize the time for the
memory accesses. When accessing memory one may have long delays of 5 or even
more cycles. However if we keep some data in local &quot;cache&quot; memory,
then we should be able to access it much faster, usually in one clock cycle. </p>

<p>We can rely on data and instruction locality, which means that the next data
or instruction accessed is likely to be close to the previous one accessed.
Thus we can load a block of memory into a &quot;cache line&quot; so that the
CPU would have a fast access to it later. </p>

<p>Note that pipelined CPU has two ports for memory access: one for
instructions and the other for data. Therefore you need two caches: <b>Instruction
cache</b> and <b>Data cache</b>. The major difference between to is that the
data cache must be capable of performing both read and write operations, while
instruction cache needs to provide only read operation. </p>

<p>Memory cache controller has a memory for data storage and a control unit. The
memory holds data fetched from the main memory or updated by the CPU. The
control unit decides whether a memory access by the CPU is <i>HIT</i> or <i>MISS</i>,
serves the requested data, loads and stores the data to the main memory and
decides where to store data in the cache memory. Another common part of the
cache memory is a tag table. It keeps the information on what data is stored in
which cache line. Usually cache controller stores part of the address in the
tag table. You will use the following COELib component for the cache
memory:&nbsp; RAM32x1. You are encouraged to use your own modules for larger
memory built from the RAM module. </p>

<p>There are many cache designs possible. Your cache memory: </p>

<ul type=disc>
 <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l1 level1 lfo1;tab-stops:list .5in'>should be <i><u>direct mapped</u></i></li>
 <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l1 level1 lfo1;tab-stops:list .5in'>should implement <i><u>write
     through</u> </i>policy (for data cache only)</li>
 <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l1 level1 lfo1;tab-stops:list .5in'>should have size of at least <u>4
     words, where each word is 64 bits, (256 bits) by 16 lines</u> (each data
     and instruction cache). You may have larger size space permitting on the
     FPGA.</li>
 <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l1 level1 lfo1;tab-stops:list .5in'>should use <u>32x1 bit RAM
     cells</u> available from the COElib library.</li>
</ul>

<p class=MsoNormal>More information on cache memories and controllers is
available in the text book. </p>

<p>Suggestions on the design: </p>

<ul type=disc>
 <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l0 level1 lfo2;tab-stops:list .5in'>Before you actually do any
     coding with the tools, make sure you understand how your cache will work.</li>
 <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l0 level1 lfo2;tab-stops:list .5in'>Make a draft on a sheet of
     paper with all the modules involved: (CPU, Memory, Cache tag table and
     memory, cache controller). Then connect the modules with lines (busses)
     that represent data and control signal flow. You may need a mux or counter
     here or there.</li>
 <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l0 level1 lfo2;tab-stops:list .5in'>Start with one operation, for
     instance read from CPU. Consider the HIT case, make sure you have the path
     for data, address and control signals. Then consider the MISS case.
     Remember that you will have to fill the whole line of the cache, not just
     the requested word. Then do the write requests from CPU.</li>
 <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l0 level1 lfo2;tab-stops:list .5in'>You have to do instruction
     and data cache. Both are very similar, instruction cache has no writes. I
     suggest you implement and test the data cache first, then create the
     instruction cache from the data cache example.</li>
 <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l0 level1 lfo2;tab-stops:list .5in'>Once your caches are working
     and successfully synthesized (fits the FPGA), you may consider having
     larger cache size for better performance.</li>
</ul>

<p class=MsoNormal>Good luck! </p>

</div>

</body>

</html>

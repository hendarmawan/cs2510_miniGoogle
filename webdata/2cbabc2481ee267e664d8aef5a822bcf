<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html xmlns:o="urn:schemas-microsoft-com:office:office"
 xmlns:w="urn:schemas-microsoft-com:office:word"
 xmlns:st1="urn:schemas-microsoft-com:office:smarttags"
 xmlns="http://www.w3.org/TR/REC-html40">
<head>
 
  <meta http-equiv="Content-Type"
 content="text/html; charset=windows-1252">
 
  <meta name="ProgId" content="Word.Document">
 
  <meta name="Generator" content="Microsoft Word 10">
 
  <meta name="Originator" content="Microsoft Word 10">
 
  <link rel="File-List" href="Practice%20Midterm_files/filelist.xml">
  <title>CS 1550 Practice Mid-Term Exam Questions</title>
  
  <style>
<!--
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-parent:"";
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
h1
	{mso-style-next:Normal;
	margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:1;
	font-size:16.0pt;
	font-family:Arial;
	mso-font-kerning:16.0pt;}
h2
	{mso-style-next:Normal;
	margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:2;
	font-size:14.0pt;
	font-family:Arial;
	font-style:italic;}
h3
	{mso-style-next:Normal;
	margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:3;
	font-size:13.0pt;
	font-family:Arial;}
h4
	{mso-style-next:Normal;
	margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:4;
	font-size:14.0pt;
	font-family:"Times New Roman";}
span.SpellE
	{mso-style-name:"";
	mso-spl-e:yes;}
span.GramE
	{mso-style-name:"";
	mso-gram-e:yes;}
@page Section1
	{size:8.5in 11.0in;
	margin:1.0in 1.25in 1.0in 1.25in;
	mso-header-margin:.5in;
	mso-footer-margin:.5in;
	mso-paper-source:0;}
div.Section1
	{page:Section1;}
 /* List Definitions */
 @list l0
	{mso-list-id:1472477021;
	mso-list-type:hybrid;
	mso-list-template-ids:-852321880 67698711 67698713 67698715 67698703 67698713 67698715 67698703 67698713 67698715;}
@list l0:level1
	{mso-level-number-format:alpha-lower;
	mso-level-text:"%1\)";
	mso-level-tab-stop:.5in;
	mso-level-number-position:left;
	text-indent:-.25in;}
ol
	{margin-bottom:0in;}
ul
	{margin-bottom:0in;}
-->
  </style>
</head>
  <body lang="EN-US" style="">
<o:smarttagtype
 namespaceuri="urn:schemas-microsoft-com:office:smarttags" name="City"> <o:smarttagtype
 namespaceuri="urn:schemas-microsoft-com:office:smarttags" name="place"> <!--[if gte mso 9]><xml>
 <o:DocumentProperties>
  <o:Author> </o:Author>
  <o:Template>Normal</o:Template>
  <o:LastAuthor> </o:LastAuthor>
  <o:Revision>2</o:Revision>
  <o:TotalTime>3</o:TotalTime>
  <o:LastPrinted>2002-10-11T20:42:00Z</o:LastPrinted>
  <o:Created>2002-10-11T20:50:00Z</o:Created>
  <o:LastSaved>2002-10-11T20:50:00Z</o:LastSaved>
  <o:Pages>1</o:Pages>
  <o:Words>677</o:Words>
  <o:Characters>3860</o:Characters>
  <o:Company> </o:Company>
  <o:Lines>32</o:Lines>
  <o:Paragraphs>9</o:Paragraphs>
  <o:CharactersWithSpaces>4528</o:CharactersWithSpaces>
  <o:Version>10.2625</o:Version>
 </o:DocumentProperties>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:SpellingState>Clean</w:SpellingState>
  <w:GrammarState>Clean</w:GrammarState>
  <w:Compatibility>
   <w:BreakWrappedTables/>
   <w:SnapToGridInCell/>
   <w:WrapTextWithPunct/>
   <w:UseAsianBreakRules/>
  </w:Compatibility>
  <w:BrowserLevel>MicrosoftInternetExplorer4</w:BrowserLevel>
 </w:WordDocument>
</xml><![endif]--><!--[if !mso]><object
 classid="clsid:38481807-CA0E-42D2-BF39-B33AF135CC4D" id=ieooui></object>
<style>
st1\:*{behavior:url(#ieooui) }
</style>
<![endif]--> 
 <!--[if gte mso 10]>
<style>
 /* Style Definitions */
 table.MsoNormalTable
	{mso-style-name:"Table Normal";
	mso-tstyle-rowband-size:0;
	mso-tstyle-colband-size:0;
	mso-style-noshow:yes;
	mso-style-parent:"";
	mso-padding-alt:0in 5.4pt 0in 5.4pt;
	mso-para-margin:0in;
	mso-para-margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Times New Roman";}
</style>
<![endif]--> 
  </o:smarttagtype></o:smarttagtype>
<div class="Section1">  
<p class="MsoNormal"><o:p> </o:p></p>
  
<p class="MsoNormal"><o:p> </o:p></p>
  
<p class="MsoNormal" align="center" style="text-align: center;"><span
 style="font-size: 18pt;">CS 1550 Practice Mid-Term Exam Questions<o:p></o:p></span></p>
  
<p class="MsoNormal"><o:p> </o:p></p>
  
<p class="MsoNormal">These are practice questions similar in form to those
that may appear on the mid-term. They are intended to help you prepare to
answer questions of varying formats, not as a comprehensive review of the
material. Keeping up with the readings has been strongly emphasized in class,
and you should have read through the discussion of working sets.</p>
  
<p class="MsoNormal"><o:p> </o:p></p>
  
<p class="MsoNormal">If you are unsure of the meaning of a question, feel
free to ask the instructor for clarification (this is acceptable during the
exam too). On a similar note, it is often useful to explicitly state any
assumptions you make.</p>
  
<p class="MsoNormal"><o:p> </o:p></p>
  
<h1><u>OS History and Introduction<o:p></o:p></u></h1>
  
<p class="MsoNormal"><o:p> </o:p></p>
  
<h3>Q: Name the OS architecture that most closely matches the following statements.</h3>
  
<p class="MsoNormal"><o:p> </o:p></p>
  
<p class="MsoNormal">The most common OS architecture (e.g. <span
 class="SpellE">Linux<span class="GramE">,and</span></span> Windows).</p>
  
<p class="MsoNormal"><i style="">Answer: </i>Monolithic<o:p></o:p></p>
  
<p class="MsoNormal"><o:p> </o:p></p>
  
<p class="MsoNormal">This architecture is what you get if you focus only
on resource</p>
  
<p class="MsoNormal"><span class="GramE">management</span>, leaving abstraction
as a later step.</p>
  
<p class="MsoNormal"><i style="">Answer:</i> VM</p>
  
<p class="MsoNormal"><o:p> </o:p></p>
  
<p class="MsoNormal">QNX, <span class="SpellE">VxWorks</span>, and Mach are
all ______ architecture <st1:city><st1:place><span class="SpellE">OSs</span></st1:place></st1:city>.</p>
  
<p class="MsoNormal"><i style="">Answer: </i>Microkerne<i style="">l<o:p></o:p></i></p>
  
<p class="MsoNormal"><o:p> </o:p></p>
  
<h3>Q: What <span class="GramE">is</span> the single most important criteria
an interactive system's scheduler tries to minimize?</h3>
  
<p class="MsoNormal"><i style="">Answer:</i> Average response time.</p>
  
<p class="MsoNormal"><o:p> </o:p></p>
  <b><u><span style="font-size: 16pt; font-family: Arial;"><br
 clear="all" style="page-break-before: always;">
 </span></u></b>  
<h1><u>Scheduling<o:p></o:p></u></h1>
  
<p class="MsoNormal"><o:p> </o:p></p>
  
<h3>Q: “Shortest Job <span class="GramE">First</span> is optimal.” Explain
this statement, and explain why SJF is therefore not used instead of “sub-optimal” 
scheduling policies.</h3>
  
<p class="MsoNormal"><i style="">Answer:</i> The trick here is to consider
“optimal at doing what?” It is optimal at increasing completion rate, but
what about average turnaround time if starvation occurs? fairness? response
time?</p>
  
<p class="MsoNormal"><o:p> </o:p></p>
  
<h3>Q: For the following list of jobs, <span
 style="font-family: &quot;Courier New&quot;;">(</span><span
 style="font-size: 11pt; font-family: &quot;Courier New&quot;;">job id, admission time, 
required CPU time</span><span style="font-family: &quot;Courier New&quot;;">)</span><span
 class="GramE">,assume</span> round-robin scheduling with a quantum of 4
time units. Assume an overhead of 1 time unit per context switch – between
different processes. Assume new jobs are admitted at the tail of the queue,
and jobs admitted at the same time are queued in the order listed below.</h3>
  
<h4 style="margin-left: 0.5in; text-indent: -0.25in;"><!--[if !supportLists]--><span
 style="">a)<span
 style="font-family: &quot;Times New Roman&quot;; font-style: normal; font-variant: normal; font-weight: normal; font-size: 7pt; line-height: normal; font-stretch: normal; font-size-adjust: none;">   
</span></span><!--[endif]--><span class="GramE">Order of execution.</span></h4>
  
<h4 style="margin-left: 0.5in; text-indent: -0.25in;"><!--[if !supportLists]--><span
 style="">b)<span
 style="font-family: &quot;Times New Roman&quot;; font-style: normal; font-variant: normal; font-weight: normal; font-size: 7pt; line-height: normal; font-stretch: normal; font-size-adjust: none;">   
</span></span><!--[endif]--><span class="GramE">The average and individual
turnaround times.</span></h4>
  
<h4 style="margin-left: 0.5in; text-indent: -0.25in;"><!--[if !supportLists]--><span
 style="">c)<span
 style="font-family: &quot;Times New Roman&quot;; font-style: normal; font-variant: normal; font-weight: normal; font-size: 7pt; line-height: normal; font-stretch: normal; font-size-adjust: none;">    
</span></span><!--[endif]-->Average time spent waiting for the CPU.</h4>
  
<h4 style="margin-left: 0.5in; text-indent: -0.25in;"><!--[if !supportLists]--><span
 style="">d)<span
 style="font-family: &quot;Times New Roman&quot;; font-style: normal; font-variant: normal; font-weight: normal; font-size: 7pt; line-height: normal; font-stretch: normal; font-size-adjust: none;">   
</span></span><!--[endif]-->Recalculate a) through c) for a quantum of 8
time units.</h4>
  
<p class="MsoNormal"><o:p> </o:p></p>
  
<h3>Jobs: </h3>
  
<h3><span style="font-size: 10pt; font-family: &quot;Courier New&quot;;">(A, 0, 16),
(B, 0, 12), (C, 2, 24), (D, 3, 8), (E, 4, 4), (F, 6, 12)<o:p></o:p></span></h3>
  
<p class="MsoNormal"><o:p> </o:p></p>
  
<p class="MsoNormal"><o:p> </o:p></p>
  <b><u><span style="font-size: 16pt; font-family: Arial;"><br
 clear="all" style="page-break-before: always;">
 </span></u></b>  
<h1><u>IPC and Deadlocks<o:p></o:p></u></h1>
  
<p class="MsoNormal"><o:p> </o:p></p>
  
<h3>Q: Name the four conditions for deadlock. Are these conditions necessary
and/or sufficient?</h3>
  
<p class="MsoNormal"><o:p> </o:p></p>
  
<h3>Q: Implement a binary semaphore using an atomic exchange instruction (XCHG).<span
 style="">  </span>Give the code for both P(s) and V(s).</h3>
  
<p class="MsoNormal" style=""><span
 style="font-size: 10pt; font-family: &quot;Courier New&quot;;"><o:p> </o:p></span></p>
  
<h3>Q: Fix the following code sample</h3>
  
<p class="MsoNormal"><o:p> </o:p></p>
  
<p class="MsoNormal"><span
 style="font-size: 10pt; font-family: &quot;Courier New&quot;;">/** Producer Consumer
Using Semaphores **/<o:p></o:p></span></p>
  
<p class="MsoNormal"><span
 style="font-size: 10pt; font-family: &quot;Courier New&quot;;"><o:p> </o:p></span></p>
  
<p class="MsoNormal"><span class="GramE"><span
 style="font-size: 10pt; font-family: &quot;Courier New&quot;;">semaphore</span></span><span
 style="font-size: 10pt; font-family: &quot;Courier New&quot;;"> <span
 class="SpellE">mutex</span> = 1;<o:p></o:p></span></p>
  
<p class="MsoNormal"><span class="GramE"><span
 style="font-size: 10pt; font-family: &quot;Courier New&quot;;">semaphore</span></span><span
 style="font-size: 10pt; font-family: &quot;Courier New&quot;;"> empty = N;<o:p></o:p></span></p>
  
<p class="MsoNormal"><span class="GramE"><span
 style="font-size: 10pt; font-family: &quot;Courier New&quot;;">semaphore</span></span><span
 style="font-size: 10pt; font-family: &quot;Courier New&quot;;"> full = 0;<o:p></o:p></span></p>
  
<p class="MsoNormal"><span class="SpellE"><span class="GramE"><span
 style="font-size: 10pt; font-family: &quot;Courier New&quot;;">int</span></span></span><span
 style="font-size: 10pt; font-family: &quot;Courier New&quot;;"> buffer[N];<o:p></o:p></span></p>
  
<p class="MsoNormal"><span
 style="font-size: 10pt; font-family: &quot;Courier New&quot;;"><o:p> </o:p></span></p>
  
<p class="MsoNormal"><span class="GramE"><span
 style="font-size: 10pt; font-family: &quot;Courier New&quot;;">void</span></span><span
 style="font-size: 10pt; font-family: &quot;Courier New&quot;;"> producer() {<o:p></o:p></span></p>
  
<p class="MsoNormal" style="text-indent: 0.5in;"><span class="SpellE"><span
 class="GramE"><span
 style="font-size: 10pt; font-family: &quot;Courier New&quot;;">int</span></span></span><span
 style="font-size: 10pt; font-family: &quot;Courier New&quot;;"> item;<o:p></o:p></span></p>
  
<p class="MsoNormal" style="text-indent: 0.5in;"><span class="GramE"><span
 style="font-size: 10pt; font-family: &quot;Courier New&quot;;">while(</span></span><span
 style="font-size: 10pt; font-family: &quot;Courier New&quot;;">TRUE) {<o:p></o:p></span></p>
  
<p class="MsoNormal" style="margin-left: 0.5in; text-indent: 0.5in;"><span
 class="GramE"><span
 style="font-size: 10pt; font-family: &quot;Courier New&quot;;">item</span></span><span
 style="font-size: 10pt; font-family: &quot;Courier New&quot;;"> = <span
 class="SpellE">produce_item</span>();<o:p></o:p></span></p>
  
<p class="MsoNormal" style="margin-left: 0.5in; text-indent: 0.5in;"><span
 class="GramE"><span
 style="font-size: 10pt; font-family: &quot;Courier New&quot;;">down(</span></span><span
 class="SpellE"><span
 style="font-size: 10pt; font-family: &quot;Courier New&quot;;">mutex</span></span><span
 style="font-size: 10pt; font-family: &quot;Courier New&quot;;">);<o:p></o:p></span></p>
  
<p class="MsoNormal" style="margin-left: 0.5in; text-indent: 0.5in;"><span
 class="GramE"><span
 style="font-size: 10pt; font-family: &quot;Courier New&quot;;">down(</span></span><span
 style="font-size: 10pt; font-family: &quot;Courier New&quot;;">empty);<o:p></o:p></span></p>
  
<p class="MsoNormal" style="margin-left: 0.5in; text-indent: 0.5in;"><span
 class="SpellE"><span
 style="font-size: 10pt; font-family: &quot;Courier New&quot;;">insert_<span
 class="GramE">item</span></span></span><span class="GramE"><span
 style="font-size: 10pt; font-family: &quot;Courier New&quot;;">(</span></span><span
 class="SpellE"><span
 style="font-size: 10pt; font-family: &quot;Courier New&quot;;">item,buffer</span></span><span
 style="font-size: 10pt; font-family: &quot;Courier New&quot;;">);<o:p></o:p></span></p>
  
<p class="MsoNormal" style="margin-left: 0.5in; text-indent: 0.5in;"><span
 class="GramE"><span
 style="font-size: 10pt; font-family: &quot;Courier New&quot;;">up(</span></span><span
 style="font-size: 10pt; font-family: &quot;Courier New&quot;;">full);<o:p></o:p></span></p>
  
<p class="MsoNormal" style="margin-left: 0.5in; text-indent: 0.5in;"><span
 class="GramE"><span
 style="font-size: 10pt; font-family: &quot;Courier New&quot;;">up(</span></span><span
 class="SpellE"><span
 style="font-size: 10pt; font-family: &quot;Courier New&quot;;">mutex</span></span><span
 style="font-size: 10pt; font-family: &quot;Courier New&quot;;">);<o:p></o:p></span></p>
  
<p class="MsoNormal" style="text-indent: 0.5in;"><span
 style="font-size: 10pt; font-family: &quot;Courier New&quot;;">}<o:p></o:p></span></p>
  
<p class="MsoNormal"><span
 style="font-size: 10pt; font-family: &quot;Courier New&quot;;">}<o:p></o:p></span></p>
  
<p class="MsoNormal"><span
 style="font-size: 10pt; font-family: &quot;Courier New&quot;;"><o:p> </o:p></span></p>
  
<p class="MsoNormal"><span class="GramE"><span
 style="font-size: 10pt; font-family: &quot;Courier New&quot;;">void</span></span><span
 style="font-size: 10pt; font-family: &quot;Courier New&quot;;"> consumer() {<o:p></o:p></span></p>
  
<p class="MsoNormal" style="text-indent: 0.5in;"><span class="SpellE"><span
 class="GramE"><span
 style="font-size: 10pt; font-family: &quot;Courier New&quot;;">int</span></span></span><span
 style="font-size: 10pt; font-family: &quot;Courier New&quot;;"> item;<o:p></o:p></span></p>
  
<p class="MsoNormal"><span
 style="font-size: 10pt; font-family: &quot;Courier New&quot;;"><o:p> </o:p></span></p>
  
<p class="MsoNormal" style="text-indent: 0.5in;"><span class="GramE"><span
 style="font-size: 10pt; font-family: &quot;Courier New&quot;;">while(</span></span><span
 style="font-size: 10pt; font-family: &quot;Courier New&quot;;">TRUE) {<o:p></o:p></span></p>
  
<p class="MsoNormal" style="margin-left: 0.5in; text-indent: 0.5in;"><span
 class="GramE"><span
 style="font-size: 10pt; font-family: &quot;Courier New&quot;;">down(</span></span><span
 class="SpellE"><span
 style="font-size: 10pt; font-family: &quot;Courier New&quot;;">mutex</span></span><span
 style="font-size: 10pt; font-family: &quot;Courier New&quot;;">);<o:p></o:p></span></p>
  
<p class="MsoNormal" style="margin-left: 0.5in; text-indent: 0.5in;"><span
 class="GramE"><span
 style="font-size: 10pt; font-family: &quot;Courier New&quot;;">down(</span></span><span
 style="font-size: 10pt; font-family: &quot;Courier New&quot;;">full);<o:p></o:p></span></p>
  
<p class="MsoNormal" style="margin-left: 0.5in; text-indent: 0.5in;"><span
 class="GramE"><span
 style="font-size: 10pt; font-family: &quot;Courier New&quot;;">item</span></span><span
 style="font-size: 10pt; font-family: &quot;Courier New&quot;;"> = <span
 class="SpellE">remove_item</span>(buffer);<o:p></o:p></span></p>
  
<p class="MsoNormal" style="margin-left: 0.5in; text-indent: 0.5in;"><span
 class="GramE"><span
 style="font-size: 10pt; font-family: &quot;Courier New&quot;;">up(</span></span><span
 style="font-size: 10pt; font-family: &quot;Courier New&quot;;">empty);<o:p></o:p></span></p>
  
<p class="MsoNormal" style="margin-left: 0.5in; text-indent: 0.5in;"><span
 class="GramE"><span
 style="font-size: 10pt; font-family: &quot;Courier New&quot;;">up(</span></span><span
 class="SpellE"><span
 style="font-size: 10pt; font-family: &quot;Courier New&quot;;">mutex</span></span><span
 style="font-size: 10pt; font-family: &quot;Courier New&quot;;">);<o:p></o:p></span></p>
  
<p class="MsoNormal" style="text-indent: 0.5in;"><span
 style="font-size: 10pt; font-family: &quot;Courier New&quot;;">}<o:p></o:p></span></p>
  
<p class="MsoNormal"><span
 style="font-size: 10pt; font-family: &quot;Courier New&quot;;">}<o:p></o:p></span></p>
  
<p class="MsoNormal"><span
 style="font-size: 10pt; font-family: &quot;Courier New&quot;;"><o:p> </o:p></span></p>
  
<p class="MsoNormal"><span
 style="font-size: 10pt; font-family: &quot;Courier New&quot;;">/** Producer Consumer
Using Semaphores **/<o:p></o:p></span></p>
  
<p class="MsoNormal"><span
 style="font-size: 10pt; font-family: &quot;Courier New&quot;;"><o:p> </o:p></span></p>
  
<p class="MsoNormal"><i style="">Answer: </i>Hint – consider the order of
<span class="SpellE">mutex</span> and counting semaphores. A deadlock can
easily happen here. Limit the <span class="SpellE">mutex</span>-protected 
region to the bare minimum that needs to be protected (around <span
 class="SpellE"><i style="">insert_<span class="GramE">item</span></i></span><span
 class="GramE"><i style="">(</i></span><i style="">)</i> and <span
 class="SpellE"><i style="">remove_item</i></span><i style="">()</i> to be
precise).<o:p></o:p></p>
  
<p class="MsoNormal"><o:p> </o:p></p>
  
<p class="MsoNormal"><o:p> </o:p></p>
  
<h3>Q: <span class="GramE">In</span> a physical computer system, what can
you do in terms of hardware settings to prevent code from being interrupted?</h3>
  
<p class="MsoNormal"><i style="">Answer:</i> Disabling interrupts.</p>
  
<p class="MsoNormal"><o:p> </o:p></p>
  
<h3>Q: What is a race condition? Explain by providing a scenario where one
can occur (e.g. when updating shared variables).</h3>
  
<p class="MsoNormal"><o:p> </o:p></p>
  
<h3>Q: A system provides a “<span class="GramE">print(</span><span
 class="SpellE">file,printer</span>)” command to send a file to one of two
possible printers. Attempting to use this function from two processes at
once causes garbled output, and users don’t care which printer the output
is sent to. Using any clear <span class="SpellE">pseudocode</span>, show
how you would write a “<span class="SpellE">safe_<span class="GramE">print</span></span><span
 class="GramE">(</span>file)” function using semaphores to print safely to
any available printer.</h3>
  
<p class="MsoNormal"><o:p> </o:p></p>
  
<p class="MsoNormal"><o:p> </o:p></p>
  
<p class="MsoNormal"><o:p> </o:p></p>
  
<h1><u>Memory Management &amp; Page Replacement<o:p></o:p></u></h1>
  
<p class="MsoNormal"><o:p> </o:p></p>
  
<p class="MsoNormal"><o:p> </o:p></p>
  
<p class="MsoNormal"><o:p> </o:p></p>
  
<h3>Q: A system has 45MB of RAM. If we have twenty active processes, and
64-bit page table entries, how much space is used by page tables in this
<span class="GramE">system.</span></h3>
  
<h4>a) <span class="GramE">using</span> 4KB pages</h4>
  
<h4><span style=""> </span>b) <span class="GramE">using</span> 8KB pages</h4>
  
<h4><span style=""> </span>c) <span class="GramE">using</span> 1KB pages</h4>
  
<h4><span style=""> </span>d) <span class="GramE">using</span> a two-level
page table with 4-bit first-level index. [<span class="GramE"><i
 style="">this</i></span><i style=""> requires an assumption about memory
usage per process, assume a fixed no. of pages per process</i>].</h4>
  
<h4><span style=""> </span>e) <span class="GramE">an</span> inverted page
table (again, simply assume 64-bit <span class="SpellE">PTEs</span>)</h4>
  
<p class="MsoNormal"><o:p> </o:p></p>
  <b><span style="font-size: 13pt; font-family: Arial;"><br clear="all"
 style="page-break-before: always;">
 </span></b>  
<h3>Q: Given the following page access string, count the page faults for
a memory capacity of 4, 8, and 10 pages.</h3>
 
<h3>Access sequence: 0, 1, 2, 3, 0, 1, 4, 0, 1, 2, 3, 4, 5, 6, 3, 2, 1, 0</h3>
 <br>
   
<h4>a) <span class="GramE">using</span> LRU: </h4>
A: <i>page faults for memory of 4 frames are in boldface:</i> <b>0, 1, 2,
3,</b> 0, 1, <b>4</b>, 0, 1, <b>2, 3, 4, 5, 6,</b> 3, <b>2, 1, 0</b><i> <br>
 <br>
 </i>A: <i>pages in memory: -,-,-,-   0,-,-,-   0,1,-,-   </i><i>0,1,2,-
  <i>0,1,2,3   </i></i><i>0,1,2,3   </i><i>0,1,2,3   </i><i>0,1,4,3  <i> </i><i>0,1,4,2
  </i></i><i> </i><i>0,1,3,2   </i><i>4,1,3,2   <br>
 </i><i> </i><i>4,5,3,2   </i><i> </i><i>4,5,3,6   </i><i> </i><i>2,5,3,6
   </i><i>2,1,3,6    </i><i>2,1,3,0</i><br>
 
<h4><span style=""> </span>b) <span class="GramE">using</span> Clock</h4>
  
<h4>c) <span class="GramE">using</span> FIFO</h4>
  
<p class="MsoNormal"><o:p> </o:p></p>
    
<p class="MsoNormal"><o:p> </o:p></p>
  
<h3>Q: <span class="GramE">For</span> the sequence from the last question,
what is the maximum working set size for that particular sequence? </h3>
  
<p class="MsoNormal"><i style="">Answer:</i> It’s simply the total access
set size, seven pages in this case.<br>
 </p>
 
<p class="MsoNormal"><br>
 <b><br>
 Q: Define and give an example of Belady's anomaly.</b><br>
 </p>
 
<p class="MsoNormal">A: from the book.<br>
 </p>
 
<p class="MsoNormal"><br>
 </p>
 
<p class="MsoNormal"><br>
 <br>
 </p>
   
<p class="MsoNormal"><o:p></o:p>  </p>
 
<h1><u>Disks and I/O</u></h1>
 <br>
 <b>Q: list the three main delays in getting data from  disk, in increasing 
average delays (or increasing importance, since the more delay, the more important
it is)<br>
 <br>
 </b>A: transfer delay, rotational delay, seek delay.<br>
 <br>
 <b>Q: What does the acronym DMA stand for?  Describe what is the advantage
of a system that has a DMA over a system that has no DMA<br>
 </b> 
<p class="MsoNormal"><br>
 A: Direct Memory Access:  in a system with DMA, the CPU can run applications 
without being involved in the transfer of data from a device to main memory.<br>
 </p>
 
<p class="MsoNormal"><b><br>
 Q: if all subcomponents of  system use the bus to get data from memory and 
the CPU needs data from memory to run the application, why does using a DMA 
allow for higher performance?<br>
 </b></p>
 
<p class="MsoNormal"><br>
 A: after a chunk of memory was read (say 4KB) into cache, the CPU will not 
read anything from memory until a cache miss was detected.<br>
 </p>
 
<p class="MsoNormal"><br>
 <b>Q: Describe the organ-pipe distribution and mention why it is a good
tool increase the performance of disks.<br>
 </b></p>
 
<p class="MsoNormal"><br>
 A: placing the most used blocks of data close together in order to reduce 
the seek time, which is the most important delay in disk performance.  the 
organ-pipe distribution places data this way, using a histogram and allowing 
the most used blocks of data to be in the same track, the next most used blocks
in the next tracks, etc.<br>
 </p>
 
<p class="MsoNormal"><br>
 <b>Q: what is the sequence of software layers that are traversed from the 
time a user needs to read a disk block until the time the data is available 
to the user (from library call to the return from the library call).  among 
the layers are:<br>
 a) libraries,   b) page replacement algorithms.  c) ISRs, d) Device-independent 
OS software, e) data placement algorithms, f) de-framentation software, g) 
device drivers, h) controllers, i) device itself</b><br>
 </p>
 
<p class="MsoNormal"><br>
 </p>
 
<p class="MsoNormal">A: libraries  --&gt; Device-independent OS software
--&gt; device drivers --&gt; controller --&gt; device --&gt;  ISR --&gt;
device drivers --&gt; Device-independent OS software --&gt; libraries.<br>
  </p>
  
<p class="MsoNormal"><br>
 <br>
   </p>
    
<p class="MsoNormal"><b>Q: Let there be the following requests for data blocks 
in tracks number 100, 175, 51, 133, 8, 140, 73, and 77 and let the head position 
be in track number 63.  What is the number of tracks that will be traversed
with the following disk scheduling algorithms (answer only those that make
sense):<br>
 </b> </p>
    
<p class="MsoNormal"><b><br>
 a) FIFO </b></p>
 A: 646 tracks<br>
 
<p class="MsoNormal"><b>b) LIFO</b> <br>
 A: 623 tracks<br>
 <b>c) LRU</b></p>
 
<p class="MsoNormal"><b>d) second chance<br>
 </b>A: c) and d) are page replacement algorithms<br>
 <b>e) SCAN<br>
 </b>A:  238 tracks<b><br>
 f) C-Look<br>
 </b></p>
    
<p class="MsoNormal">A: 322 tracks<br>
 </p>
 
<p class="MsoNormal"><br>
 <b>Q: what is and what is the main shortcomings of the SSTF disk scheduling
algorithm?<br>
 </b></p>
 
<p class="MsoNormal"><br>
 A: shortest seek time first algorithm looks at the queue of requests and 
givest highest priority to the request with the shortest seek time (that is,
closest track to the current position of the read-write head)<br>
 it may starve some requests when requests are arriving dynamically<br>
 </p>
   </div>
</body>
</html>

<html>

<head>
<meta name="GENERATOR" content="Microsoft FrontPage 5.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
<title>Development and Run</title>
<style>
<!--
 p.MsoNormal
	{mso-style-parent:"";
	margin-bottom:.0001pt;
	font-size:12.0pt;
	font-family:"Times New Roman";
	margin-left:0in; margin-right:0in; margin-top:0in}
-->
</style>
</head>

<body>

<p class="MsoNormal" align="center"><a href="page3.htm">
<img border="0" src="previous.gif" align="left" width="26" height="26"></a><a href="page5.htm"><img border="0" src="next.gif" align="right" width="26" height="26"></a></p>

<p class="MsoNormal" align="center"><h1><font color=red>Development and Run-Time 
Support Mechanisms for CCM</font></h1></p>
<p class="MsoNormal" align="left">&nbsp;</p>
<p align="left"><font face="Times New Roman" color="#000000" size="5">In a 
typical development and deployment scenario, there will be an Application server 
provider who creates and sells an Application server along with CCM containers 
that will run on these servers. Then there will be the CCM providers-people 
responsible for developing CORBA components and the Application 
assemblers-people that use pre-built CORBA components to build their 
applications.</font></p>
<p align="left"><font face="Times New Roman" size="5">Application Servers :<br>
These provide the system services like a raw execution environment, 
multiprocessing, load-balancing, device access,</font><font face="Times New Roman" color="#000000" size="5"> 
provide naming and transaction services and make containers visible.</font></p>
<p align="left"><font face="Times New Roman" size="5"><font color=red>CCM Containers</font> :<br>
These act as the interface between a CORBA component and the outside world. A 
CCM client never accesses a CORBA component directly. Any component access is 
done through container-generated methods which in turn invoke the component's 
methods</font></p>
<p align="center"><img border="0" src="compmodel.gif" width="881" height="539"></p>
<font FACE="Times New Roman" SIZE="5">
<ul>
  <li>
  <p ALIGN="LEFT">Component implementations can be packaged in the following 
  manner: First they are placed inside of a assembly file, such as a shared 
  library, a JAR file, or a DLL, and linked dynamically. Second, a deployment 
  mechanism supplied by a CCM provider is used to deploy the component in a <i>
  component (application) server </i>that hosts component implementations by 
  loading their assembly files. Thus, components execute in component servers 
  and are available to process client requests.</li>
</ul>
</font>
<p align="center">&nbsp;</p>
<ul>
  <li>
<p align="left"><font size="5">The CCM behaves from a <i>component developer’s
</i>perspective, allowing the developer to generate many types of server 
applications automatically.</font></p>
  </li>
</ul>
<p align="left">&nbsp;</p>
<ul>
  <li>
<p align="left"><font size="5">Components can now be deployed in component 
servers that have no advanced knowledge of how to configure and instantiate 
these deployed components. This is accomplished by the component implementing a 
<font color=red>generic interface</font> that all servers can recognize. </font></p>
  </li>
</ul>
<p align="left">&nbsp;</p>
<ul>
  <li>
<p align="left"><font size="5">&nbsp;CCM components can also be configured 
dynamically through the use of ports. Ports enable standard configuration 
mechanisms to modify component configurations/state remotely. They are similar 
to a GET method call in OOD. </font></p>
  </li>
</ul>
<p align="left">&nbsp;</p>
<ul>
  <font FACE="Times New Roman" SIZE="5">
  <li>
  <p ALIGN="LEFT">The CCM port mechanisms provide interfaces to configure a 
  component, enabling developers to set up object connections, subscribe or 
  publish events, and establish component attributes. For a developer to 
  assemble components into a software component infrastructure or integrate a 
  component into an application, however, there must be a mechanism to express a 
  concrete configuration for a component; in particular they need to designate 
  what component(s) must be connected and how the events published and received 
  by a component relate to each other. Therefore, CCM defines a <font color=red>standard 
  component configuration interface</font>, called </font>
  <font FACE="Courier" SIZE="5">Components::StandardConfigurator</font><font FACE="Times New Roman" size="5">, 
  to help component servers configure components. Component developers can 
  extend this configuration interface to specify how to improve the flexibility 
  of their component implementations.</font></li>
</ul>
<p ALIGN="LEFT">&nbsp;</p>
<ul>
  <font FACE="Times New Roman" SIZE="5">
  <li>
  <p ALIGN="LEFT">CCM also defines several other interfaces to support the 
  structure and functionality of components. Many of these interfaces can be 
  generated automatically via tools supplied by CCM Providers. Moreover, life 
  cycle management and the state management implementations can be factored out 
  and reused. The CORBA <i>Component Implementation Framework </i>(CIF) is 
  designed to shield component developers from these tedious tasks by automating 
  common component implementation activities. </li>
</ul>
<p ALIGN="LEFT">&nbsp;</p>
</font>
<ul>
  <font FACE="Times New Roman" SIZE="5">
  <li>
  <p ALIGN="LEFT">Many business applications use components to model “real 
  world” entities, such as employees, bank accounts, and stockbrokers. These 
  entities may persist over time and are often represented as database entries. 
  Components with persistent state are mapped to a persistent data store that 
  can be used to reconstitute component state whenever the component instance is 
  activated. For example, when a bank account component is instantiated, the CCM 
  component model implementation is able to reconstitute the previous status of 
  the account from a database. The CIF defines a set of APIs that manage the 
  persistent state of components and construct the implementation of a software 
  component .</li>
</ul>
</font>
<p ALIGN="LEFT">&nbsp;</p>
<p align="left">&nbsp;</p>
<p class="MsoNormal" align="left">&nbsp;</p>

</body>

</html>

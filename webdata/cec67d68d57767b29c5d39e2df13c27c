<html>

<head>
<meta http-equiv="Content-Language" content="zh-cn">
<meta http-equiv="Content-Type" content="text/html; charset=gb2312">
<meta name="GENERATOR" content="Microsoft FrontPage 4.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<title>COM Fundamentals&nbsp; 1</title>
</head>

<body>

<p><a href="pre6.htm"><img border="0" src="previous.gif" width="26" height="26"></a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
<a href="pre8.htm"><img border="0" src="next.gif" width="26" height="26"></a><br>
</p>
<p><font color="#000080"><font size="6" face="Arial">COM Fundamentals<br>
</font><br>
<font size="5" face="Arial">1. Binary Standard</font></font></p>
<p><font size="4" face="Arial" color="#000080">For any given platform (hardware 
and operating system combination), COM defines a standard way to lay out virtual 
function tables (vtables) in memory, and a standard way to call functions 
through the vtables. Thus, any language that can call functions via pointers (C, 
C++, Small Talk&reg;, Ada, and even Basic) all can be used to write components 
that can interoperate with other components written to the same binary standard. 
The double indirection (the client holds a pointer to a pointer to a vtable) 
allows for vtable sharing among multiple instances of the same object class. On 
a system with hundreds of object instances, vtable sharing can reduce memory 
requirements considerably.</font></p>
<p><img border="0" src="vtable.gif" width="556" height="166"></p>
<p class="label"><b><font color="#000080">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
Diagram of a vtable</font></b></p>
<h4><font face="Arial" size="4" color="#000080"><i>Objects and components</i></font></h4>
<p><font face="Arial" size="4" color="#000080"><i>The word object tends to mean 
something different to everyone. To clarify, in COM, an object is some piece of 
compiled code that provides some service to the rest of the system. To avoid 
confusion, it is probably best to refer to a COM object as a &quot;component 
object&quot; or simply a &quot;component.&quot; This avoids confusing COM 
objects with source-code object-oriented programming (OOP) objects such as those 
defined in C++. component objects support a base interface called IUnknown 
(described below), along with any combination of other interfaces, depending on 
what functionality the component object chooses to expose.</i></font></p>
<p><font face="Arial" size="4" color="#000080"><i>Component objects usually have 
some associated data, but unlike C++ objects, a given component object will 
never have direct access to another component object in its entirety. Instead, 
component objects always access other component objects through interface 
pointers. This is a primary architectural feature of the Component Object Model, 
because it allows COM to completely preserve encapsulation of data and 
processing, a fundamental requirement of a true component software standard. It 
also allows for transparent remoting (cross-process or cross-network calling) 
since all data access is through methods that can exist in a proxy object that 
forwards the request and vectors back the response.</i></font></p>

</body>

</html>

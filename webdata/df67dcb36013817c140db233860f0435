<h2>A Developer's Environment for Component-based Software Engineering</h2>


<p>
A developer's environment is provided
so that developers can build their components, test the interaction
of their components with a message server using a home-made testing tool
called "remote control", and integrate their components into the
next generation of VC for further experiments.

<p>
First, the developers put the source codes into a CVS repository and then use a tool called Maven to
do the builds.  Maven can automatically organize many things and
autogenerate supporting documentation that is made available through a
website (also automatic). Maven also provides:
change logs, JavaDocs, cross-referenced source code, unit test reports, etc.
<!--
The following link is for a sample website generated by Maven off the
virtualclassroom source code.

<p>
<a href="http://eagleinfosystems.com.www2.kc.aoindustries.com/docs/index.html">
http://eagleinfosystems.com.www2.kc.aoindustries.com/docs/index.html</a>.
-->

<p>
Next, a project called Cruise Control is configured to automate the
build process.  What Cruise Control does is to monitor the CVS repository and when a file
is changed it runs all the test and the build.  If something breaks it sends an
email to the developers that have changed code since the last working build.

<p>
Lastly, every project needs a bug tracking solution.  There is an open
source project called Atlassian JIRA that provides a web based product that
has many nice features.

<p>
In sum the following tools are provided:

<ul>
<p>
CVS - source code control - https://www.cvshome.org/docs/manual/

<p>
MAVEN - it is a build framework that automates many things - one thing
is the automatic creation of a project website where javadocs
are automatically web enabled
http://maven.apache.org/

<p>
BUGZILLA - project tracking tool:  http://www.bugzilla.org/
or
http://130.49.222.93/bugzilla/

<p>
CRUISE-CONTROL - http://cruisecontrol.sourceforge.net/
</ul>



<p>
An example of messaging has been prepared and available under CVS.
For details please consult <a href="server/doc/"> http://www.cs.pitt.edu/~chang/231/server/doc/</a>.
The messaging example has client and server components.
Both the client and the server parts of the example are under the CVS.
Also in the CVS is the eclipse project.
To run the example first you need to download the CVS and set up
your local environment.
To run the client and the server you need to set up Axis on your local
machine and follows the <a href="server/VCSetup.doc">steps described in VCSetup.doc</a>.
Then you can run Eclipse and Bugzilla to test the example.
If you succeed in running the example, you will see the following <a href="server/sampleoutput.html">output</a>.

<p>
Each user will have a separate "branch" in the CVS, so that
all users can share the common root and cooperate in
software development.  Therefore you need to request a
user id and password from the instructor.  The id runs from s1 to s9,
and the password will be assigned by the instructor.

<p>Please check <a href="server/tips">tips</a> for
additional info on setup.
If you run into problems, please send e-mail to
john.menke@eagleinfosystems.com

<!--
The passwords are:
s1:s1vc12345
s2:s2vc12345
s3:s3vc12345
s4:s4vc12345
-->

<p>

<!--
<p>
For the message server to handle point to point and broadcast, there is a
product called ActiveMQ that  will
work with Axis and is a JMS implementation.  This will do point to point and
publish subscribe messaging.    -->

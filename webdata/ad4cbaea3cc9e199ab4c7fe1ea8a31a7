<h1>A Testbed for Intelligent Interface Design</h1>

In what follows we describe
a testbed for component-based software development.
The specific application example is a personal healthcare system.
In general, the testbed can be used for Intelligent Interface Design.

<font color=blue><h2>Application Example</h2></font>
The personal healthcare system
consists of the following:
<p>
<b>(1) Universal Interface:</b> The Universial Interface is for testing the system.
The user can enter a message on the left panel, and
observe an output message on the right panel.
In fact, any message sent from one component to
another component will be displyed on the right panel.
<font color="black">The actual message sent has the following
format:  Name$$$Value$$$... Name$$$Value$$$,
i.e., name and value pairs with three dollar signs serving
as delimiters.</font>
<p>
<b>(2) SIS server:</b> The SIS server processes <a href="MessageSIS.htm">messages</a>.
The special messages Create, Kill and Activate will
enalbe the SIS server to create, kill and activate
a component.  Other messages will be routed to
the receipient components by the SIS server.
<p>
<b>(3) Input Processor:</b> The Input Processor is a predesigned
componet which inputs data stream generated by the
Health Sensors and outputs data streams specific
for the various vital signals such as blood pressure,
blood sugar, Pulse Oximeter Oxygen Saturation (SPO2), EKG and so on.
<p>
<b>(4) Uploader:</b> The Uploader is a predesigned component
which inputs data streams and uploads them via the
Internet to a shared database so that 
patients, physicians and other authorized personnel
can access patient information.
<p>
<b>(5) Other Components:</b> These components include
the GUI and various monitors including:
BloodPressure Monitor, BloodSugar Monitor,
EKG Monitor, SPO2 Monitor, GeneralHealth Monitor, and so on.
(If class projects are for personal healthcare, these are the components to be developed by class projects.)
<br>
<img src="images/SISfig15.jpg" align=center>
<br>

<font color="black">The Universal Interface, the SIS server, the InputProcessor
and the Uploader constitute the <b>Component Infrastructure</b>
</font>.  The other components are built around
this Component Infrastructure.

<font color=blue><h2>Test Bed Installation</h2></font>

The complete SIS test bed can be downloaded from
<a href="SISv3.zip">the SISv3.zip file</a>.
Once downloaded, just follow the 
the <a href="Testbed/System/SISServer/SISsetup">General Setup Procedure</a> to install the test bed.
(If you are working on Kinect-related projects, follow the
<a href="Testbed/System/SISServer/SISKinectSetup">SISKinect Setup Procedure</a>
to install the test bed.)
You are now ready to develop and test
your plug-in components.

<font color=blue><h2>Preliminary Condition</h2></font>
UniversalInterface, SISserver and HealthSensors either pre-exist or have already been instantiated/activated.
<br>
GUI, InputProcessor, BloodPressure Monitor and Uploader will be instantiated/activated.
(In case some of these components are not available, it
is still OK.  You can use the UniversalInterface to
simulate messages from these components.  Messages
to these components will be ignored by the SIS Server,
but still displayed on the right panel of the
UniversalInterface.  For the class projects,
for example, you can simulate messages from InputProcessor.
Therefore, you don't need to have access to the HealthSensors
to develop and test your plug-in components.)

<font color=blue><h2><a href="Msg20.htm">Initialization</a></h2></font>

<p>
UniversalInterface sends <a h ref="Testbed/PersonalHealthCare/xml/InitXML/CreateGUI.XML">Msg 20 (BBB create)</a> to SISserver to instantiate/activate GUI
<p>
UniversalInterface sends <a href="Testbed/PersonalHealthCare/xml/InitXML/CreateInputProcessor.XML">Msg 20 (BBB create)</a> to SISserver to instantiate/activate InputProcessor
<p>
UniversalInterface sends <a h ref="Testbed/PersonalHealthCare/xml/InitXML/CreateBPM.XML">Msg 21 (ABB create)</a> to SISserver to instantiate/activate BloodPressure Monitor
<p>
UniversalInterface sends <a h ref="Testbed/PersonalHealthCare/xml/InitXML/CreateSPO2M.XML">Msg 21 (ABB create)</a> to SISserver to instantiate/activate SPO2 Monitor
<p>
UniversalInterface sends <a h ref="Testbed/PersonalHealthCare/xml/InitXML/CreateEKGM.XML">Msg 21 (ABB create)</a> to SISserver to instantiate/activate EKG Monitor
<p>
UniversalInterface sends <a href="Testbed/PersonalHealthCare/xml/InitXML/CreateUploader.XML">Msg 20 (BBB create)</a> to SISserver to instantiate/activate Uploader

<font color=blue><h2>A Scenario</h2></font>

<p>
<font color="orange">GUI interacts with the user and sends Msg 45 (user profile)
containing UserName, Age, Sex, Weight, Height and medical conditions,
to Uploader and all Monitors.</font>

<p>
HealthSensors sends Msg 30 (sensor data input) to InputProcessor, which parses the data and extracts vital signals. <font color="black">(InputProcessor accepts Msg 30 sensor data input and produces Msg 31, 33 or 35. However Msg 30 may not be a formatted message)</font>
<p>
InputProcessor sends Msg 31 (blood pressure reading) to BloodPressure Monitor, which checks for abnormality. There could be a knowledge base, but initially we just check if high blood pressure reading is over 130 to generate an alert. <font color="black"><font color="orange">(BloodPressure Monitor accepts Msg 45 and Msg 31 and produces Msg 32)</font></font>
<p>
BloodPressure Monitor sends Msg 32 (blood pressure alert) to GUI, which displays the vital signals. <font color="black">(GUI accepts Msg 32, 34, 36, 38 and produces Msg 20, 21)</font>
<p>
<font color="orange">BloodPressure Monitor sends Msg 32 (blood pressure alert) to Uploader,
which uploads patient's UserName and medical conditions to remote database.</font> <font color="black">(Uploader accepts Msg 32 and uploads it.  The uploading may not be a formatted message)</font>
<p>
(There are other messages and other components for heart
rate, SPO2 level, EKG signals for irregular heart beats, etc.
But it is the same scenario, only more complicated.
The GUI may also need to display the combined vitals.)

<p>

<!--
<font color=blue>
<h2>What should be checked</h2>
</font>
We need to verify that UniversalInterface can talk to
SISserver, which then talks to the instantiated components.
<p>
However, we should also verify that UniversalInterface can talk to the components directly.
I think if developer runs UniversalInterface and specify
the IP address, and runs components with same
IP address, they can talk directly.  This may not be
needed in the development process.  But it is a nice
option so that the developer can test the components
directly with the UniversalInterface.
-->

<!--
<font color=blue><h2>1631 Group Projects to Develop Additional Components</h2></font>


<font color="black">
CS1631 students will specify and develop
other additional components. 
In general each group is responsible for two components:
one component for the monitor and the other
for the knowledge base.
The group working on the GUI is responsible for
the GUI component and a simple SPO2 monitor.
Two groups will work on same components.
<p>
GUI and SPO2 Monitor <b>(G1 and G2):</b>
<p>
Blood Pressure Monitor with Knowledge Base <b>(G3 and G4):</b>
<p>
Blood Sugar Monitor with Knowledge Base <b>(G5 and G6):</b>
<p>
EKG Monitor with Knowledge Base <b>(G7 and G8):</b>
<p>
General Health Monitor with Knowledge Base <b>(G9 and G10):</b>
<p>
</font>
System Integration (TA and Instructor)
-->

<font color=blue><h2>Design Considerations</h2></font>
<p>

A monitor component and the associated knowledge
base component can be considered as one
<b>coarse grained business component</b>.
The refined monitor component and the associated knowledge
base component are the <b>fine grained components</b>.

<p>
A component is brought to life by the "Create
Component" message (Msg ID 20, or 21 if there is a
knowledge base).
<font color="black">
When a component first comes to life, it should send
a "Connect to Server" message (Msg ID 23) to the SISserver.
</font>
SISserver will return an Ack message (Msg ID 26) to
the said component.  The "Activate Component"
message (Msg ID 24) and "Deactivate Component" message
(Msg ID 25) will activate/deactivate the said
component.  Finally, the "Kill Component" message
(Msg ID 22) will destroy it.
<p>
<!--
The following message space is assigned to the
individual project groups:
<pre>
G1   110-119
G2   120-129
G3   130-139
G4   140-149
G5   150-159
G6   160-169
G7   170-179
G8   180-189
G9   190-199
</pre>
-->

<font color=blue><h2>Component Specification</h2></font>
We need to specify at least the input messages,
output messages, the variables (attributes)
and the methods for the components.
Therefore the class diagrams should be prepared.
<p>
For a complete specification we can use the following UML diagrams:
The use-case diagram specifies the major
use-cases (or components).
The sequence diagram describes the interactions
among the classes and actors based upon messages.
The state diagram describes the state transitions
for the major component(s).
<p>
Special attention should be paid to the interface.

<!--
<font color=blue><h2>A Tool for Component Specification for Slow Intelligence Systems</h2></font>

There is a tool for messages and component specification for Slow Intelligence Systems,
<a href="http://www.cs.pitt.edu/~ezegarra/sismc/">
Slow Intelligence System Management Console</a>,
implemented by Emilio Zegarra.  Since this is a single-user
tool, all the components specified by a user should be
distinctly named to avoid collision with other user's
components.  It is suggested that the user's last name
be prefixed to the component name.  For example, if the
user's name is "Doe", a component for blood pressure
monitoring can be named "DoeBPmonitor".
-->

<font color=blue><h2>Kinect-related Projects</h2></font>

For Kinect-related projects, there is a Kinect Server
that provides that URL of pre-stored Kinect test sequences
upon request.
This Kinect Server is just another component.  Therefore,
before testing the KinectServer, a CreateKinectServer
message (message type 20) should be sent to the
SISserver. See
<a href="Testbed/Kinect/xml/InitXML/CreateKinectServer.XML">
Testbed/Kinect/xml/InitXML/CreateKinectServer.XML</a>.

<p>
To test the Kinect server, we can implement a component to send a request message 406 to the
Kinect Server to request a stored Kinect action
sequence.  This component should receive a response message 408
containing the URL of the stored file.  This
component can then directly access and download
the stored file.
<p>
The request/response messages can be found at:
<a href="Testbed/Kinect/xml/DataXML/406(KinectServerRequest).XML">
Testbed/Kinect/xml/DataXML/406(KinectServerRequest).XML</a>, and
<a href="Testbed/Kinect/xml/DataXML/408(KinectServerResponse).XML">
Testbed/Kinect/xml/DataXML/408(KinectServerResponse).XML</a>, respectively.


PROFESSOR:  WHAT I'LL DO IS THE FOLLOWING.
I WILL FIRST TALK ABOUT UML.
THEN I WILL GIVE A FEW EXAMPLES OF COMPLEX SQL QUERIES.

     OKAY.  OKAY.  FIRST OF ALL, THERE IS
ALREADY ON THE WEB, I MODIFIED THE SECTION
ON ER DIAGRAM AND ADDED MORE NOTE OF UML
AND YOU CAN PRINT THEM OUT.  I ALREADY
WENT THROUGH THE BASIC CONCEPT.  UNIFIED
MODELING LANGUAGE A LOT OF PEOPLE ARE
USING IT FOR PROJECT, DEFINE NEEDS FOR
INFORMATION SYSTEM.  SO IT'S VERY USEFUL.
AND I WILL NOT COVER EVERYTHING ABOUT UML
BECAUSE IT'S AS THE NAME IMPLIES, IT
INCLUDES A LOT OF STUFF.  WHAT I WILL DO
RATHER IS JUST TO USE THE CLASS AND OBJECT
DIAGRAM WHICH IS THE MOST IMPORTANT PART
OF IT AND THEN WE USE OUR FIRST QUIZ.
REMEMBER IN YOUR FIRST QUIZ IT ASKED YOU
TO COME UP WITH THE ER DIAGRAM OF A VERY
SIMPLE LIBRARY INFORMATION SYSTEM.  NOW WE
ARE GOING TO USE THAT AND ILLUSTRATE HOW
WE CAN USE THE CLASS DIAGRAM AND OBJECT
DIAGRAM TO DO THE DESIGN.  AND THEN YOU
GET SOME IDEA.
     NOW, I SHOULD MENTION THAT THIS COULD
BE IN THE MIDTERM.  NOT THE WHOLE THING
ABOUT UML JUST THE CLASS AND OBJECT
DIAGRAM.  AS YOU CAN SEE, THERE ARE MANY
OTHER COME OPPONENTS OF UML.  INCLUDES,
USE CASE DIAGRAM, STATE AND ACTIVITY
DIAGRAM, SEQUENCE AND COLLABORATION
DIAGRAM, COME OPPONENT AND DEPLOYMENT
DIAGRAM.  IS THAT ELABORATE.  WE WILL NOT
GO THROUGH THAT.  THAT WILL NOT BE YOUR
RESPONSIBILITY IN THE MIDTERM.  YOU WILL
ONLY BE RESPONSIBLE FOR WHAT I TALK ABOUT
TODAY.
     NOW THE IDEA FOR THE CLASS AND OBJECT
DIAGRAM IS RATHER SIMPLE.  SO AS YOU
RECALL, IN THE ER DIAGRAM, WE HAVE WHAT?
ENTITIES AND RELATIONS, RIGHT?  AND THEN
YOU CONSTRUCT A DIAGRAM BASED UPON THAT.
NOW, IN THE -- IN UML MODEL, INSTEAD OF
ENTITY RELATIONSHIPS, WE HAVE CLASS AND
OBJECTS BECAUSE IN OBJECT ORIENTED DESIGN
IS WHAT YOU HAVE.  SO IT'S MORE NATURAL TO
START JUST WITH THESE CONCEPTS.  OKAY.
SO, EXAMPLE REALLY DISCUSS WITH YOU A FEW
WEEKS AGO.  BASICALLY FOR EACH CLASS WHAT
YOU DO IS YOU USE RECTANGLE.  YOU GIVE THE
NAME OF THE CLASS AND IT'S ATTRIBUTES.
NOW THAT MUCH WITH WE ALSO DO IN THE
ENTITY RELATIONSHIP DIAGRAM, RIGHT?  WE
HAVE ENTITY NAME AND ATTRIBUTES USING
RECTANGLES AND ELLIPSES.  AS WE ALL KNOW,
CLASSES YOU CAN DEFINE METHOD OF
OPERATION.  THAT'S WHAT IS LISTED HERE
UNDERNEATH A SEPARATE BAR.  SO MUCH FOR
CLASSES.  NOW, WHEN WE MAKE CLASS INTO
OBJECT THEN WE GIVE THE CLASS NAME AND THE
OBJECT NAME.  OKAY.  IF YOU READ IT FROM
THE LEFT, IT'S OBJECT NAME, COLUMN, CLASS
NAME.  TO REPRESENT INSTANTIATED.  YOU
ONLY HAVE THE BOX NOW.  OKAY.  BUT THOSE
BOXES ARE CONNECTED BY VARIOUS KINDS OF
LINES.  THESE LINES, THESE REPRESENT
ASSOCIATIONS.  JUST AS THE LINES IN THE ER
DIAGRAM, SAME THING.  BUT NOW THEY ARE
CLASSIFIED INTO MORE AND MORE DIFFERENT
CATEGORIES.  FOR OUR SAKE, FOR YOUR SAKE,
THE ONLY ONE THAT YOU NEED TO UNDERSTAND
IS THE ONE WITHOUT ANY ICONS.  IN OTHER
WORDS, IF I WANT TO REPRESENT A PURE
ASSOCIATION, I WILL JUST USE A LINE.  BUT
NOTICE THAT THIS CAN BE REFINED INTO
COMPOSITION, NAVIGABILITY AND ET CETERA.
SO IT'S VERY RICH DIAGRAM.  BUT WHAT WE'LL
TALK ABOUT IS JUST THE SIMPLEST CASE
BECAUSE ONCE YOU UNDERSTAND SIMPLE CASE,
THEN WE CAN FOLLOW AND GO TO THE OTHER
EXAMPLES.
     CAN YOU SEE?
     STUDENT:   FINE.
     PROFESSOR:   OKAY.  SO, LET'S START
FROM THE QUIZ PROBLEM.  NOW AS YOU
REMEMBER FOR THE FIRST QUIZ, BASICALLY I
WANT TO ASK YOU IS THAT I HAVE A LIBRARY
WITH BOOKS AND THEN WE HAVE STUDENTS, A
STUDENT CAN BORROW BOOKS.  SO IF WE WORK
OUT AN ER DIAGRAM, SO WE HAVE ENTITY
CALLED STUDENT AND STUDENT HAS ASSOCIATE
SECURITY AS THE KEY AND OTHER STUFF.  NOW
I'M GOING TO SIMPLY DEFINE IT A LITTLE
BIT.  THERE ARE OTHERS.  BUT WE'LL DO
ASSOCIATE SECURITY NUMBER AND ADDRESS.
AND THEN WE HAVE THE BOOK ENTITY.  WHERE
WE HAVE THE ISBN NUMBER AS THE KEY AND THE
TITLE AND THE AUTHOR.  AGAIN, THERE ARE
OTHER ATTRIBUTES BUT DOESN'T MATTER.
     AND THE STUDENT CAN BORROW BOOKS, SO
WE HAVE A RELATIONSHIP WHICH IS THE BORROW
RELATION, SO THE STUDENT CAN BORROW BOOK
AT A CERTAIN DATE AND HE CAN HAVE A NUMBER
OF RENEWALS AND IF HE DOESN'T RETURN THE
BOOK, WE CAN CALCULATE AND RECORD THE
FINE.  THE FEE HE HAS TO PAY.  NOW, EACH
STUDENT CAN BORROW MANY BOOKS BUT EACH
BOOK CAN ONLY BE BORROWED BY ONE STUDENT.
SO THIS IS A ONE TO MANY RELATIONSHIP.
ONE STUDENT CAN BORROW MANY BOOKS BUT AT
LEAST IN THIS MODEL, YOU CANNOT LOAN THE
BOOK TO TWO DIFFERENT STUDENTS.  THAT'S
NOT POSSIBLE.  YOU CAN ONLY LOAN IT TO ONE
STUDENT AT A TIME.
     AND I THINK MOST YOU GOT THIS
CORRECTLY.  LIKE I MENTIONED, MOST PEOPLE
FOR THE QUIZ GOT OVER THREE POINTS.  OH,
BY THE WAY FOR EXERCISE ONE I THINK THE
RESULTS ARE PRETTY GOOD.  EVERYBODY GOT
FOUR POINT AND MORE.  OKAY.
     SO THIS IS ACCORDING TO OUR ER
DIAGRAM.  SO ER DIAGRAM BASICALLY YOU HAVE
TWO TYPE OF OBJECT -- CLASSES, ENTITIES
AND THEN THE RELATIONS BUT NOW BE STARTED
TO STUDY RELATIONAL DATABASE AND WE ALL
REALIZED THAT IT IS SOMEWHAT ART OFFICIAL
WE HAVE THIS DISTINCT BETWEEN ENTITIES AND
RELATIONS.  IN FACT THAT'S CAUSED SOME
CONFUSION BECAUSE IN RELATIONAL DATABASE
EVERYTHING IS CALLED A RELATION.  THAT'S
WHY WE RATHER CALL THAT A TABLE.
     SO, IN UML NOTATION, WE WILL TRY TO
REPRESENT THINGS MORE UNIFORMLY.  IN OTHER
WORDS, THERE IS NO ARTIFICIAL DISTINCT
BETWEEN THE BOOK ENTITY AND THE BORROW
RELATIONSHIP.  BY I STILL NEED THEM AS
DIFFERENT CLASSES.  SO LET'S START FROM
THE STUDENT.  SO THE CLASS NAME IS CALLED
STUDENT.  THEN I WILL LIST ATTRIBUTES IN
THE FIRST -- IN THE SECOND BOX.  SO THIS
PART IS ALSO THE SAME AS THIS PART.  AND
THE -- HOW ABOUT THIS PART?  WHAT SHOULD I
PUT THERE?
     STUDENT:   SOMETHING BY FUNCTION --
     PROFESSOR:   LIKE WHAT?  WAIT.  THIS
TALK ABOUT A STUDENT CLASS.  WHAT CAN YOU
DO ON A STUDENT CLASS?  YOU CAN ADD A
STUDENT, YOU CAN DELETE A STUDENT, RIGHT?
YOU MAINTAIN STUDENT LIST, RIGHT?  SO, THE
OPERATION SHOULD BE THINGS LIKE ADD.  YOU
CAN ADD A NEW STUDENT, THINGS LIKE DELETE.
I'M NOT TALKING ABOUT BORROWING YET,
BECAUSE THAT WILL HAPPEN TO THE BORROW
CLASS.  OKAY?  YEAH.  THERE COULD BE MORE.
AGAIN, THIS IS A SIMPLIFIED VERSION AND ON
THIS SIDE WE HAVE THE BOOK CLASS, THAT'S
SIMILAR TO WE HAVE ISBN NUMBER, WE HAVE
TITLE, WE HAVE THE AUTHOR OF THE BOOK.  SO
THESE ARE THE ATTRIBUTES AND THEN -- THE
METHODS?
     STUDENT:   ADD DELETE.
     PROFESSOR:   YES, ADD, DELETE AGAIN.
WE MAY WANT TO ADD A NEW BOOK, WE MAY WANT
TO DELETE A BOOK, AND UPDATE, STUFF LIKE
THAT. SO WE HAVE THESE TWO BASING CLASSES
SO WE CAN ENTER NEW STUDENTS AND WE CAN
ENTER NEW BOOKS.  OH, BY THE WAY, SO SOME
OF YOU ARE TRYING TO LOOK AHEAD INTO THE
PROJECT, THE PROJECT I HAVE CURRENTLY ON
THE WEB IS NOT THE PROJECT YOU'RE GOING TO
DO.  I WANT TO CHANGE IT TO THIS PROJECT.
BECAUSE EVERY TIME I -- I TRY TO MAKE A
NEW PROJECT OF THE DON'T DO IT YET,
OTHERWISE, YOU'LL BE SURPRISED.  AND THEN
IN THE MIDDLE, WE HAVE THE BORROW.  AND
HERE WE HAVE THE KEYS WE NEED TO LINK TO
THESE.  THE DATE, THE NUMBER OF RENEWER --
RENEWAL AND THE TIME -- I'M SORRY, THE
FINE.  AS THE POSSIBLE ATTRIBUTES.  AND
WHAT ABOUT OPERATIONS?
     STUDENT:   ADD AND DELETE?
     PROFESSOR:   ADD DELETE APPLIES TO
THE STUDENT LIST, TO THE BOOK LIST.  NOW
I'M TALKING ABOUT SOME STUDENT BORROWING
SOME BOOK.
     STUDENT:   BORROW, RETURN?
     PROFESSOR:   BORROW, RETURN TO SAY
THE LIST.  WE HAVE THE BORROW OPERATION,
THE RETURN OPERATION AND IF THINGS GET
COMPLICATED WE MAY HAVE THE RENEW.  IN
OTHER WORDS, THE PERSON WANTS TO HOLD ON
TO THE BOOK SO YOU TRY TO RENEW THAT, AND
ALSO TO SUPPORT LIBRARIAN WE HAVE
OPERATION TO CALCULATE FINE.  IN OTHER
WORDS, THE BOOK IS OVERDUE SO WE CALCULATE
HOW MUCH WE SHOULD FINE THEM., THE
STUDENT.  STUFF LIKE THAT.  YOU NOTICE
THIS MODEL IS ACTUALLY BETTER THAN ER
DIAGRAM IN A SENSE, IT ALSO EXPLAINS THE
OPERATIONS WE NEED TO PERFORM.  TO HELP US
WHEN WE DO THE IMPLEMENTATION.  YEAH?
     STUDENT:   I COULDN'T SEE WHAT YOU
HAD WRITTEN ON THE BOARD.
     PROFESSOR:   SORRY ABOUT THAT.
     STUDENT:   THAT'S ALL RIGHT.
     PROFESSOR:   OKAY.  OKAY?  SO, SO FAR
SO GOOD.  WE TAKE THESE THREE THINGS AND
USE SLIGHTLY DIFFERENT REPRESENTATIONS,
THAT'S ALL.  BE WE HAVE METHOD OF
OPERATIONS.  THIS IS MORE CONCISE.  NOW WE
DRAW THIS LINES HERE.  AND IN FACT, WE CAN
ASK SIMILAR QUESTIONS ABOUT HERE, SO ONE
STUDENT CAN ENTER INTO MULTIPLE BORROW
RELATIONSHIPS, RIGHT?  BECAUSE YOU HAVE A
SINGLE STUDENT, HE CAN BORROW SEVERAL
BOOKS.  HOW ABOUT HERE?  ONE TO ONE.
BECAUSE YOU HAVE ONE BOOK HERE, IT CAN
ONLY APPEAR ONCE IN HERE.  RIGHT?  BECAUSE
THE BOOK CAN ONLY BE BORROWED ONCE, NOT --
IT CANNOT BE CHECKED OUT TWICE.  OKAY.  SO
THIS IS THE CLASS DIAGRAM OF UML.  SO THE
CLASS DIAGRAM IS VERY SIMILAR ALTHOUGH NOT
EQUIVALENT TO THE ER DIAGRAM.  IT IS
ACTUALLY A LITTLE BIT RICHER THAN ER
DIAGRAM IN SOME SENSE BUT A LITTLE BIT
LESS THAN ER DIAGRAM IN SOME OTHER SENSE.
     STUDENT:   I HAVE A QUESTION ABOUT
THE ER DIAGRAM.  AFTER LOOKING AT YOUR UML
DIAGRAM, AND HOW I DID IT, AND YOU'RE
SHOWING AS AN OPERATION FOR BORROW,
BORROW, RETURN AND --
     PROFESSOR:   RENEWAL.
     STUDENT:   RENEWAL.
     PROFESSOR:   AND CALCULATE THE FINE.
     STUDENT:   RIGHT.  THINKING ALONG
THOSE LINES, I JUST NEED TO KNOW WHETHER
THIS INCORRECT, INSTEAD OF HAVING ONE
RELATIONSHIP BETWEEN THE STUDENT AND BOOK,
I CREATED THREE ONE FOR BORROW, ANOTHER
RELATIONSHIP WAS FOR RENEW AND ANOTHER ONE
WAS FOR RETURN AND EACH ONE HAD SEVERAL
ENTITIES.
     PROFESSOR:   HERE?  RIGHT?
     STUDENT:   YES.  IS THAT INCORRECT?
     PROFESSOR:   YES AND NO.  YES IN THE
SENSE THAT YOU DO NEED ALL THOSE THINGS,
RIGHT.  KNOWING -- NO IN THE SENSE IF YOU
KEEP THEM SEPARATE YOU PROBABLY
UNNECESSARILY COMPLICATE YOUR DESIGN.  AS
WE'LL SEE LATER ON BUT ALREADY REALIZE
THAT.  WHERE EVER WE HAVE THESE ENTITIES
WE MOST LIKELY WILL MAKE SEPARATE TABLES
OUT OF IT.  AND THEN YOU'LL BE CHECKING
MULTIPLE TABLES IN YOUR OPERATION.  IN
OTHER WORDS, IT MAY MAKE YOUR LIFE MORE
COMPLICATED.  THEN, AGAIN, IT MAY NOT BE
SO, BECAUSE I'M JUMPING AHEAD, BUT IN THE
DESIGN, REALIZATION OF DATABASE FROM ER
DIAGRAM WE CAN ABSORB THIS SOMETIMES INTO
OTHER TABLES.  IN OTHER WORDS, THOSE
BORROW RELATIONS AND LOAN RELATION WE CAN
ALSO PUT IT ON THIS SIDE.  AND THIS
RELATIONSHIPS ARE JUST VIRTUAL.  IT
DOESN'T ACTUALLY SHOW IN THE ACTUAL
DATABASE.
     SO, IN OTHER WORDS, THERE IS NO
SIMPLE ANSWER, BUT IN GENERAL, I PREFER TO
HAVE A SIMPLER DIAGRAM, RIGHT?  OTHERWISE,
YOU MAKE YOUR DESIGN MORE COMPLICATED.
     STUDENT:   RIGHT, I WAS JUST CURIOUS.
I THINK I LOST TWO POINTS BECAUSE I DIDN'T
DO IT THAT WAY, ALTHOUGH I COVERED
EVERYTHING.
     PROFESSOR:   CONCEPTUAL SIMPLICITY IS
WHAT WE ARE LOOKING FOR.  QUESTIONS?
YEAH?
     STUDENT:   IN THE REAL WORLD, THE
LIBRARY WILL HAVE THREE OR FOUR COPIES OF
THE SAME BOOK.
     PROFESSOR:   YES, VERY GOOD.
     STUDENT:   DO YOU ADD AN ATTRIBUTE?
     PROFESSOR:   IN FACT, IF YOU LOOK
INTO THE DIAGRAM THAT I ADDED TO THE ER
LECTURE, THE BOOK WILL HAVE ANOTHER
SO-CALLED DEPENDENCE RELATIONS WHERE I CAN
KEEP DIFFERENT COPIES.  YES, YOU ARE
RIGHT.  BECAUSE IN GOOD LIBRARY, USUALLY
YOU HAVE MULTIPLE COPIES OF EVERYTHING.
THAT'S EXACTLY WHERE YOU USE DEPENDENCY
RELATION.  YOU COULD PUT IT HERE BUT IT
MAKES THINGS MORE COMPLICATED.  I HAVE TO
ADD ANOTHER ATTRIBUTE, SAYING COPY ONE,
COPY TWO.  STUFF LIKE THAT.
     IN REAL LIFE THINGS ARE MORE
COMPLICATED THAN THAT, BUT JUST TO
ANTICIPATE LATER INTO THE PROJECT.  SO THE
CLASS DIAGRAM GIVE US A GOOD PICTURE OF
WHAT'S GOING ON FROM A CONCEPTUAL POINT OF
VIEW.  THEN AS ITS COUNTERPART WE HAVE THE
SO-CALLED OBJECT DIAGRAM.  NOW THE OBJECT
DIAGRAM IS VERY SIMILAR TO THE CLASS
DIAGRAM.  EXCEPT NOW WE ARE DRAWING THE
INSTANCES.  OKAY?  OBVIOUSLY I'M NOT GOING
TO DRAW TEN THOUSAND BOOKS FOR YOU OR
10,000 USER, THAT WOULD BE CRAZY BUT IT
WON'T HURT IF I SHOW YOU MORE THAN ONE,
RIGHT?  YOU GET IDEA.  SO, IN OTHER WORDS,
HERE YOU SEE A CLASS, A CLASS OF STUDENT,
HERE YOU SEE A CLASS OF BORROW, HERE CLASS
OF BOOK.  IF I REDRAW THE OBJECT DIAGRAM
WE CAN DRAW SAY A FEW.  BUT ACTUALLY I'M
ONLY GOING TO DRAW ONE STUDENT, LET'S SAY
JOHN DOE.  SO USING OUR NOTATION I WRITE
DOE, STUDENT WHICH IS INSTANCE OF THE
STUDENT CLASS WHICH IS CALLED DOE.  ON
THIS SIDE LET ME JUST PUT IN TWO BOOKS.  I
HAVE BOOK AND FOR SIMPLICITY I JUST CALLED
IT BOOK ONE AND BOOK TWO.  AND BOTH BOOKS
HAVE BEEN BORROWED BY THIS PERSON.  THEN
THEY ENTER RELATIONSHIP SO DOE CAN BORROW
BOOK ONE -- HAS BORROWED BOOK ONE.  THEN
BORROW RELATIONSHIP.  AND THE BOW ALSO
BORROWED BOOK TWO.  ANOTHER BORROW
RELATIONSHIP.  IN FACT, IF YOU LOOK AT
THIS AND THIS, NOTICE THAT HERE WE SAY ONE
TO N MEANING ONE PERSON CAN HAVE MULTIPLE
BORROWED BOOKS AND THIS IS ILLUSTRATED
CLEARLY IN THIS OBJECT DIAGRAM NOW.
NOTICE ONE BOOK -- ONE PERSON -- ONE
STUDENT INSTANCE CAN ENTER RELATIONSHIP
WITH TWO BORROW INSTANCE.  WHEREAS FROM
THE BORROW INSTANCE AND THE BOOK IT'S ONE
TO ONE.  SO, IF YOU WANT YOU CAN CALL THIS
A SNAPSHOT.  SO BASICALLY IT'S A SNAPSHOT
OF WHAT THE CONTENTS OF THIS DATABASE IS
WHEN IT IS IN OPERATION.  DO YOU LIKE
THIS?  MORE THAN ER DIAGRAM?  YEAH.  IN
FACT, IF YOU ARE WRITING IN C PLUS PLUS OR
JAVA THIS IS CLOSER TO YOUR
IMPLEMENTATION.  IF YOU ARE DOING
RELATIONAL DATABASE IT DOESN'T MATTER.
MAYBE I CAN LIVE WITH ER DIAGRAM AS WELL.
OKAY.
     NOW, THE POINT I WANT TO EMPHASIZE IS
THAT YOU CAN START WITH -- YOU START WITH
THE USER REQUIREMENTS, THEN WE CAN DO THE
ER DAY GRAM, WE CAN ALSO DO THE CLASS
DIAGRAM AND OBJECT DIAGRAM.  AND I WANT TO
YOU BE ABLE TO DO ALL THREE OF THIS.
THAT'S WHY I SAY I MAY PUT THIS IN THE
TEST.  VERY USEFUL.  THERE ARE MANY OTHER
THINGS ABOUT UML.  I'M NOT GOING TO TEACH
YOU THAT, BECAUSE I THINK THAT WILL BE
MOST IMPORTANT FROM A DATABASE VIEWPOINT.
     OKAY.  QUESTIONS?  OKAY.  LATER ON,
WHEN YOU DO THE PROJECT, THIS IS YOUR
START POINT.  YOU CAN START WITH ER
DIAGRAM OF THIS CLASS DIAGRAM, OBJECT
DIAGRAM.


     SO I'M GOING SWITCH GEAR AND TALK
ABOUT SQL. 
WHAT WE'RE GOING
TO DO TODAY IS GO THROUGH A FEW COMPLEX
SQL QUERIES SO THAT YOU CAN SEE.
     PROFESSOR:   OKAY.  THE QUERIES YOU
DID FOR THE SECOND EXERCISE, THEY ARE
FAIRLY SIMPLE.  IN FACT, I ALSO ASKED YOU
WHAT CANNOT BE DONE USING SQL.  IT'S NOT
THAT YOU CANNOT DO THOSE QUERIES, IT MEANS
YOU HAVE TO WRITE THE PROGRAMS OR DO
MATCHING.  THESE ARE NOT ASSUMED TO BE
AVAILABLE IN THE PURE SQL.  IN PURE SQL
YOU ONLY HAVE THE SELECT -- THERE ARE SOME
QUERIES YOU CANNOT READ.  OF COURSE, WHEN
YOU EXTEND THE QUERY LANGUAGE IN MANY
WAYS -- THERE ARE MANY WAYS YOU CAN DO IT.
     TODAY WE'LL GO THROUGH A FEW MORE
COMPLICATED QUERIES JUST TO ILLUSTRATE THE
POWER OF SQL.  ONE THING I WANT TO -- ONE
THING I ALREADY TALKED ABOUT LAST TIME IS
THE INCLUSION OF BRANCH VARIABLES OR WHAT
WE CALL ALIAS.  IN OTHER WORDS WE CAN
RENAME SOME BASE USING A RANGE VARIABLE.
THIS WILL MAKE IT MUCH SIMPLER.
     IF YOU LOOK AT HERE I HAVE A BASE
RELATION WHICH IS THIS SPJ, SUPPLIER PART
PROJECT RELATION AND I RENAMED THEM INTO
SPJX AND SPJY BECAUSE I HAVE THE NEED TO
TALK ABOUT THE SAME RELATION IN TWO
PLACES.  SO I CREATE TWO ALIASES, TWO
RANGE VARIABLES.  SO SPJX AND SPYJ --
SPJY, LET'S LOOK AT WHAT I DO.
     THE QUERY.  I WANT ALL PAIRS OF PART
NUMBERS SUCH THAT SOME SUPPLIER SUPPLIES
BOTH THE INDICATED PARTS.  WE ALREADY WENT
THROUGH THAT.  I JUST WANT TO REPEAT THIS.
I'M GOING TO GET A PAIR SPJX.P NUMBER,
SPJY.P NUMBER.  NOTICE THEY'RE FROM THE
RELATION AND CONDITION IS SPJX.SN EQUAL
SPJS NUMBER MEANS THEY MATCH.  I'M TAKING
TWO ROWS, MATCH S NUMBER.
     BUT THE PART NUMBER MUST BE
DIFFERENT.  IN OTHER WORDS, THESE TWO GUYS
ARE THE PARTS SUPPLIED BY THE SAME
SUPPLIER.  OKAY.  AND THEN MORE DETAILS
ABOUT CREATE, ORDER AND DROP -- ALTER AND
INDEXES I LEAVE THAT TO YOU.
     AGGREGATE.  IF I WANT TO COUNT HOW
MANY SUPPLIERS THERE ARE I CAN SELECT FROM
THE S RELATION ALL THE TUPLES AND THEN
COUNT HOW MANY THERE ARE.  IT WON'T HURT
IF YOU ADD DISTINCTION BEFORE THIS WORD.
WHY?
     STUDENT:   SO YOU DON'T COUNT THE
SAME ONE TWICE.
     PROFESSOR:   CORRECT.  THIS IS TO
AVOID BECAUSE YOU SEE DATABASE, THERE ARE
MANY DIFFERENT IMPLEMENTATIONS.  THE
STANDARD SYNTAX IS THAT THIS MEANS
DIFFERENT SUPPLIERS.  YOU NEVER KNOW.  IF
YOU USE E BASE WHAT THEY RETURN COULD BE
ALL THE TUPLES.  THEY DON'T ELIMINATE
DUPLICATES.  YOU MAY COUNT WRONG.  SO
BECAUSE YOU INCLUDE DUPLICATES.  IF YOU
INCLUDE KEY WORD DISTINCT THEN THIS CAN BE
AVOIDED.  BUT LIKE I SAID, IN SQL SYNTAX
THIS IMPLIED, SO YOU SHOULDN'T CAUSE THIS
PROBLEM BUT JUST TO PLAY IT SAFE IT MAY BE
A GOOD IDEA.
     THIS IS ANOTHER SIMPLE QUERY.  I'M
TRYING TO FIND OUT THE QUALITY OF PART
TWO -- THE QUANTITY OF PART SUPPLIED TO
ALL THE SUPPLIERS.  WHAT I DO IS SELECT
FROM THE SP RELATION, SP RELATION AS YOU
RECALL, LISTS ALL RELATIONS OF SUPPLIER
AND PARTS.  AND I SPECIFY PART NUMBER MUST
BE PART TWO.  OKAY.  AND THEN I ADD UP ALL
OF THE QUANTITY.  SO NOTICE THOSE
AGGREGATE FUNCTIONS, THEY MUST APPEAR IN
THE SELECT CLAUSE.  OKAY.
     THE GROUP BY IS VERY USEFUL.  THIS IS
WHERE YOU DO THE AGGREGATION.  BECAUSE
OFTEN YOU WANT TO GROUP INTO SEPARATE
CATEGORIES FOR EXAMPLE YOU WANT TO GROUP
BY PART NUMBER.  IN OTHER WORDS, ALL OF
THE PART NUMBER P1 SHOULD BE IN ONE PILE.
ALL PART NUMBER P2 SHOULD BE IN ONE PILE.
SO IF I APPLIED THIS OPERATOR TO THE
SUPPLIED PART -- SUPPLIER PART RELATION,
WHAT YOU WILL SEE AS A RESULT, A DIFFERENT
PART.  THE FIRST PART IS ALL THESE WITH
PART 1 HERE.  SECOND PART, PART 2, PART 3,
PART 4.
     OKAY.  IN OTHER WORDS, IF YOU JUST
APPLY -- IF YOU SELECT STOCK FROM SP GROUP
BY P NUMBER THIS IS WHAT YOU'LL GET.  YOU
WILL GET DIFFERENT PARTS OF ALL RECORDS
WITH THE SAME PART NUMBER.  OKAY?  WHEN
YOU ALSO PUT DOWN SUM OF QUANTITY, THEN
YOU'RE ADDING UP THE QUANTITIES BUT NOT
ALL OF THEM.  YOU WILL ADD UP ONLY THE
QUANTITIES IN ONE PILE.  NOW YOU CAN SEE
WHY IT IS USEFUL IN PRACTICE, RIGHT?  SO
YOU DO ALL THIS KIND OF THING, YOU WANT TO
DO THIS KIND OF GROUPING.
     NOW, YOU CAN ALSO ADD A CONDITION ON
THE GROUP NOW.  SO IF I SAY SELECT PART
NUMBER FROM SP, GROUP BY PART NUMBER, LIKE
HERE, HAVING COUNT STAR EQUAL ONE, THIS
MEANS THAT -- GREATER THAN ONE, THIS MEANS
EACH GROUP MUST HAVE MORE THAN ONE MEMBER.
IN OTHER WORDS, I WILL ONLY LIST THOSE
GROUPS OF PARTS WITH MORE THAN ONE MEMBER,
THIS MEANS MAYBE S1, S2 HERE.  SO THE PART
WILL BE SUPPLIED BY MORE THAN ONE
SUPPLIER.  SO IF YOU WANT TO FIND THOSE
PARTS SUPPLIED BY EXACTLY ONE SUPPLIER, I
DO WHAT?
     STUDENT:   HAVE COUNT EQUAL ONE.
     PROFESSOR:   EQUAL ONE IS WHAT WILL
GIVE ME EXACTLY MY ONE SUPPLIER.  SO YOU
CAN SEE HOW VERSATILE IT IS.  SO HAVING
AND GROUP BY COMBINATION, SUBSTITUTE THE
WHERE, WHICH APPLIES TO ROWS.  THIS APPLY
TO GROUPS.
     SO, IN FACT, YOUR NEXT EXERCISE IS
THAT I WILL GIVE YOU QUERY, YOU WILL
TRANSLATE IN TWO FORMS.  ONE IS IN THE SQL
FORM, THE OTHER IS IN THE RELATIONAL
ALGEBRA FORM.  THE ALGEBRA FORM WILL
ENHANCE OUR UNDERSTANDING WHAT'S REALLY
GOING ON.  AND THIS ACTUALLY CAN BE
APPLIED.  SO HERE I WANT TO GET PART
NUMBERS OR PARTS SUPPLIED TO SOME PROJECT
IN AVERAGE QUANTITY OF GREATER THAN 320.
SO, LET'S LOOK AT THIS PART FIRST
CONDITIONAL PART.  SO I'M GOING TO GROUP
BY PART NUMBER AND PROJECT NUMBER.
BECAUSE IN THE QUERY YOU SEE THAT AND
LOOKING AT THE PART SUPPLIED TO SOME
PROJECT SO I'M GROUPING BY THESE TWO
ATTRIBUTES, SO MY GROUPS HERE IS DISTINCT
PART NUMBER AND PROJECT NUMBER AND IF THIS
GROUP AVERAGE QUANTITY HERE COMPUTED
GREATER THAN 320 I RETAIN THAT AND PRINT
OUT THE PART NUMBER.  AND I PRINT OUT
DISTINCT PART NUMBERS SO THE FINALLY JUST
A LIST OF THOSE PARTS SUPPLIED TO PROJECT
WITH AVERAGE QUATNTITY GREATER THAN 320.
AS YOU CAN SEE HERE, SO THESE ARE POSSIBLE
GROUPS AN PERHAPS.  OKAY.  FINALLY, SUB
QUERIES.  I MUST SAY THAT IN PRACTICE, I
LOOK AT A LOT OF DATABASE SYSTEM, MOST
QUERIES ARE SIMPLE SELECT FROM WHERE.
THEY ARE COMPLICATED BUT NEVER COMPLEX.
VERY SELDOM DO THEY HAVE SUB QUERIES BUT
IF DO YOU HAVE SUB QUERIES, THE QUERY CAN
BECOME VERY POWERFUL.  NOW, THE IDEA IS
THAT SINCE WE CAN HAVE RECURSION IN
PROGRAMMING WHY NOT ALSO IN QUERIES.
THAT'S A NESTED QUERY NOW.  SO IF YOU LOOK
AT THIS SELECT FROM WHERE AND NOW THE
INNER QUERY I WANT TO SELECT A SUPPLIER
NAME FROM SUPPLIER WHERE A SUPPLIER NUMBER
IS IN ANOTHER SET AND THIS SET IS DEFINED
BY A NESTING QUERY.  SELECT THOSE
SUPPLIERS FROM SUPPLIER PART WHERE PART
NUMBER IS TWO.  HOW MANY LEVELS OF
NESTING?  DEPENDS.  DEPENDS UPON
IMPLEMENTATION.  IN THE OLDER SYSTEMS,
THEY DON'T ALLOW ANY LEVEL OF NESTING.  IN
NEW SYSTEM, MORE POWERFUL SYSTEM, YOU CAN
HAVE A LARGE NUMBER OF NESTING.  BUT LIKE
I SAID, THIS IS MAINLY WHEN YOU WANT TO
CONSTRUCT VERY COMPLEX QUERIES.
     STUDENT:   DO YOU NECESSARILY HAVE TO
USE SUB QUERY?  ARE ALL SUB QUERIES
REGULAR TO DO THOSE IN REGULAR QUERIES
ALSO?
     PROFESSOR:   YES.  WHAT YOU CAN DO IS
SEPARATE THOSE OUT.  COMPUTE IT AND SAVE
IT SOMEWHERE.  AND THEN HAVE ANOTHER
QUERY.
     STUDENT:   OKAY.
     PROFESSOR:   SO WHAT YOU DO IS YOU
SEPARATE THEM OUT INTO SEVERAL QUERIES.
THE ONLY DRAW BACK IS THAT THIS BECOMES A
MORE PROCEDURAL LANGUAGE, RIGHT?  YEAH.
AND THAT'S RESEARCHER WOULD CLAIM THIS IS
NONPROCEDURAL.  IT'S EASIER TO WRITE INTO
WHOLE QUERY.  WHETHER IT'S TRUE IS
CONTROVERSIAL.  I DON'T THINK IT'S TRUE.
IT'S USUALLY MORE DEFENDANT FOR PEOPLE TO
COME UP WITH A MORE COMPLEX QUERY LIKE
THIS.  IT'S EASE EASIER TO DIVIDE AND
CONQUER WITH SMALLER QUERIES.  THAT'S THE
NEXT ONE WE'LL SHOW.  LIKE I SAID, THIS
MORE CON STRIVE -- CONTRIVED QUERY.  I DO
NOT SAY THIS WILL OCCUR IN REAL LIFE.  IN
FACT, I HAVE DIFFICULTY EVEN TO READ IT.
GET A SUPPLIER NUMBERS FOR SUPPLIERS
SUPPLYING AT LEAST ONE PART SUPPLIED BY AT
LEAST ONE SUPPLIER WHO SUPPLIES AT LEAST
ONE RED PART.  TELL ME HOW MANY TIMES IN
REAL LIFE YOU WOULD ENCOUNTER SUCH
QUERIES?
     NOT LIKELY.  OKAY.  BUT THIS IS JUST
TO ILL STRAIGHT MY POINT.  SO WHAT YOU END
UP WITH IF YOU DO THE NESTED QUERY IS IS
THREE LEVEL -- FOUR LEVEL QUERY.  SELECT
DISTINCT NUMBER FROM SPY WHERE THE PART
NUMBER IS IN THIS SET.  AND WHAT IS THIS
SET?  SELECT PART NUMBER FROM SPY WHERE S
NUMBER IS IN THIS SET.  WHAT IS THIS SET?
SELECT S NUMBER FROM SPY WHERE P NUMBER IS
IN THIS SET.  SELECT PART NUMBER FROM P
NUMBER WHERE COLOR IS RED.
     WHAT I WOULD DO IS I WILL TAKE THIS
OUT, RIGHT?  COMPUTE FIRST SET AND THEN
PLUG IT IN, COMPUTE A SECOND ONE, THIRD
ONE, FOURTH ONE, ACHIEVE THE SAME EFFECT
IN SEVERAL DISTINCT QUERIES.  NOT AS
ELEGANT AS THIS, THOUGH.  YOU SEE WHAT I'M
GETTING AT?  BASICALLY IT'S MATTER OF
TASTE, OKAY.
     MATHEMATICIANS LOVE FORM LAST, VERY
IMPRESSIVE.  NOW, LIKE I SAID, IN THE
NOTES I WILL GO THROUGH THIS WITH YOU STEP
BY STEP.  WELL, AS ANY COMPUTATION INVOLVE
MULTIPLE LOOPS YOU START FROM WHAT?  YOU
START FROM INNER LOOP AND WORK YOUR WAY
OUT.  YOU START FROM THE INNER MOST LOOP,
YOU FIND SOLUTION, SUBSTITUTE OUT AND SO
ON SO FORTH.
     OKAY.  NOW, I INVITE YOU TO LOOK AT
THE OTHER STEPS IN DETAIL AND THAT'S IN
THE NOTES.  NOW, YOU MAY WONDER, WHAT I'M
GOING TO PUT IN THE TEST BECAUSE THAT'S
YOUR PRIMARY CONCERN, RIGHT?  OKAY.  NOW,
WHAT I LIKE YOU TO BE ABLE TO DO IS THAT
YOU SHOULD BE ABLE TO WRITE SIMPLE SQL
QUERIES ALMOST LIKE SECOND NATURE.
BELIEVE ME, THIS HELPS.  IT HELPS IN THE
FUTURE.  SO YOU SHOULD BE ABLE TO DESIGN A
DATABASE, ER DIAGRAM, THE CLASS DIAGRAM
AND THEN WRITE SIMPLE QUERIES VERY, VERY
EASILY.  YOU SHOULD BE ABLE TO FORMULATE
JOIN QUERY.  OKAY?  SO THAT YOU CAN MERGE
THE TABLES.  SO IF I GIVE YOU A QUERY IN
NATURAL LANGUAGE YOU SHOULD BE ABLE TO
TRANSLATE THAT EASILY INTO SQL.  I MAY
GIVE YOU COMPLEX QUERY, I WON'T ASK YOU TO
CONSTRUCT ONE BUT I WANT TO YOU INTERPRET
THAT.  FAIR ENOUGH?  OKAY.  YEAH, SO YOU
HAVE PLENTY OF OPPORTUNITIES TO -- WELL,
YOU STILL CAN DO EXERCISE THREE AND STUDY
AND PREPARE FOR MIDTERM.  SO THAT'S IT
ABOUT SQL.  SO NEXT TIME WE'LL SWITCH GEAR
TO TALK ABOUT PHYSICAL DATA STRUCTURES.

<title>COMMON GATEWAY INTERFACE CGI</title>

<h1>COMMON GATEWAY INTERFACE CGI</h1>

CGI provides the communication interface between
a gateway and a Web server.
In addition to this chapter, you can read the
<a href="CGI/page1.html">notes for a more detailed description</a>.
<br><br>
A script is a program written a C, C++, TCL,
PERL (Practical Extraction and Report Language).
<br><br>
Web server is the middleware to receive request
from the Web client and pass it to CGI script, and
send information back to the Web Client.

<br><IMG SRC="images/fig161.gif"><br>

<hr>
<h1>CGI FOR WEB DATABASE</h1>

The CGI script can be interfaced to the database
through the API (Application Program Interface).

<br><IMG SRC="images/fig162.gif"><br>

<hr>
<h1>Environment Variables</h1>

<h4>CGI environment variables: </h4> 

AUTH_TYPE <br>
CONTENT_TYPE <br>
CONTENT_LENGTH <br>
GATEWAY_INTERFACE <br>
REQUEST_METHOD <br>
SCRIPT_NAME <br>
QUERY_STRING <br>
SERVER_SOFTWARE <br>
SERVER_NAME <br>
SERVER_PROTOCOL <br>
SERVER_PORT <br>
HTTP_USER_AGENT <br>
HTTP_ACCEPT <br>
PATH_INFO  <br>
PATH_TRANSLATED <br> 
REMOTE_HOST <br>
REMOTE_ADDR <br>
REMOTE_USER <br>
REMOTE_IDENT <br>
<p>

Run <a method=GET href="cgi-bin/envvar.cgi?var_1=val_1&var_2=val_2">
this PERL script</a> to display the environment variables and values
available to a CGI script.
<p>
See <a href="cgi-bin/envvar.pl">the PERL script</a>.
<p>

<hr>
<h1>Request Method: GET and POST</h1>

The request method is specified in the environment variable REQUEST_METHOD.
<p>

GET: the query string sent is placed in the environment variable QUERY_STRING
     for CGI script to process. <br>
<p>

POST: the query string is sent by a separate stream and becomes the
      standard input to the CGI script. 
Note: when POST is used, the environment variables are set:
      CONTENT_LENGTH, CONTENT_TYPE. <br>
<p>

<hr>
<h1>EXAMPLES OF CGI SCRIPT</h1>

<h2>PERL example:</h2>
A <a href="http://www.cs.pitt.edu/~jung/156/club.html">bulletin board service</a> for a discussion group can be used
by the group to exchange information.  The html form submits the input
information to the PERL program as follows:
<pre>
&lt;Form method=POST action="full_path_name/cgi-bin/club.cgi"&gt
      Your name:    &lt;input type="text" name="name" size="30"&gt&lt;br&gt
      Address:      &lt;input type="text" name="address" size="50"&gt&lt;br&gt
      Tel. No:      &lt;input type="text" name="tel" size="30"&gt&lt;br&gt
      Fax:          &lt;input type="text" name="fax" size="30"&gt&lt;br&gt
      Email:        &lt;input type="text" name="email" size="30"&gt&lt;br&gt
      Private message to host:&lt;br&gt
      &lt;textarea name="comm1" rows=5 cols=40&gt&lt/textarea&gt&lt;p&gt
      E-mail message to all members (also posted on bulletin board) :&lt;br&gt
      &lt;textarea name="comm2" rows=5 cols=40&gt&lt/textarea&gt&lt;p&gt
      Message posted on bulletin board only:
      &ltbr&gt     &lt;textarea name="comm3" rows=5 cols=40&gt&lt/textarea&gt&lt;p&gt
      &lt;input TYPE="submit" VALUE="Submit"&gt&lt;input TYPE="reset" VALUE="Erase"&gt
</pre><p>
In the above, you need to replace full_path_name to where the cgi-bin is
actually located.  The cgi program is called club.cgi and it is in cgi-bin.
It looks like this:
<pre>
#!/usr/local/bin/perl
# The first line should be where perl resides on the local system.

$company = "company-name\@cs.pitt.edu";
$webmaster = "webmaster-name\@cs.pitt.edu";
# You can have a list of e-mail addresses in the memberlist.
$memberlist = "member-name\@cs.pitt.edu";

 ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst)
                                                  = localtime(time);
      $mon = $mon + 1;

if ($ENV{'REQUEST_METHOD'} eq 'POST') {

# Get the input

    read(STDIN, $buffer, $ENV{'CONTENT_LENGTH'});

# Split the name-value pairs

    @pairs = split(/&/, $buffer);

# Load the FORM variables

    foreach $pair (@pairs) {
        ($name, $value) = split(/=/, $pair);
        $value =~ tr/+/ /;
        $value =~ s/%([a-fA-F0-9][a-fA-F0-9])/pack("C", hex($1))/eg;

        $FORM{$name} = $value;
    }

# Open the email message to send the data to webmaster
				
    if($FORM{comm1} ne "") {
    open (MESSAGE, "| /usr/bin/mail  $webmaster ");
# The mail utility is in /usr/bin/mail so you need to change that if different.

# Format email header information

    print MESSAGE "To: $company\n";
    if ($FORM{email} ne "") {
        print MESSAGE "Reply-To: $FORM{email}\n";
    }

# Write the actual email message

    print MESSAGE "Subject: Message from $ENV{'REMOTE_HOST'}\n\n";
    print MESSAGE "Name: $FORM{name}\n";
    print MESSAGE "Address: $FORM{address}\n";
    print MESSAGE "Telephone: $FORM{tel}\n";
    print MESSAGE "Fax:         $FORM{fax}\n";
    print MESSAGE "Email:   $FORM{email}\n";
    print MESSAGE "Message to Host:     $FORM{comm1}\n"; 
    close (MESSAGE);
    }

# Open the email message to send the data to a list of members
				
    if($FORM{comm2} ne "") {
    open (MESSAGE, "| /usr/bin/mail $memberlist ");

# Format email header information

    print MESSAGE "To: $company\n";
    if ($FORM{email} ne "") {
        print MESSAGE "Reply-To: $FORM{email}\n";
    }

# Write the actual email message

    print MESSAGE "Subject: Message from $ENV{'REMOTE_HOST'}\n\n";
    print MESSAGE "Name: $FORM{name}\n";
    print MESSAGE "Address: $FORM{address}\n";
    print MESSAGE "Telephone: $FORM{tel}\n";
    print MESSAGE "Fax:         $FORM{fax}\n";
    print MESSAGE "Email:   $FORM{email}\n";
    print MESSAGE "Message to All:     $FORM{comm2}\n";
    close (MESSAGE);
# Also post this message
# You need to change the full_path_name.
    open (MESSAGE, "&gt /full_path_name/t1");
    print MESSAGE "&lt;p&gt\n";
    print MESSAGE "&lt;b&gt Message from $ENV{'REMOTE_HOST'}&lt/b&gt&ltbr&gt";
    print MESSAGE "&lt;b&gt Name&lt/b&gt: $FORM{name}&lt;br&gt";
    print MESSAGE "&lt;b&gt Email&lt/b&gt:   $FORM{email}&lt;br&gt";
    print MESSAGE "&lt;b&gt Time/Date&lt/b&gt:$hour:$min:$sec / $mon-$mday-$year,&lt;br&gt";
    print MESSAGE "&lt;b&gtPosted Message&lt/b&gt:     $FORM{comm2}&lt;br&gt";
    close (MESSAGE);
# The bulletin bu.html and two temporary files t1 and t2, are in local directory.
# We use local files t1 and t2 so that a new message appears at the top of bulletin.
    $ans=`cat /full_path_name/t1 /full_path_name/bu.html &gt /full_path_name/t2`;
    $ans=`cp /full_path_name/t2 /full_path_name/bu.html`;
    }

#    Post message to the bulletin board only
				
    if( $FORM{comm3} ne "") {
    open (MESSAGE, "&gt /full_path_name/t1");
    print MESSAGE "&lt;p&gt\n";
    print MESSAGE "&lt;b&gt Message from $ENV{'REMOTE_HOST'}&lt/b&gt&lt;br&gt";
    print MESSAGE "&lt;b&gt Name&lt/b&gt: $FORM{name}&lt;br&gt";
    print MESSAGE "&lt;b&gt Email&lt/b&gt:   $FORM{email}&lt;br&gt";
    print MESSAGE "&lt;b&gt Time/Date&lt/b&gt:$hour:$min:$sec / $mon-$mday-$year,&lt;br&gt";
    print MESSAGE "&lt;b&gtPosted Message&lt/b&gt:     $FORM{comm3}&lt;br&gt";
    close (MESSAGE);
    $ans=`cat /full_path_name/t1 /full_path_name/bu.html &gt /full_path_name/t2`;
    $ans=`cp /full_path_name/t2 /full_path_name/bu.html`;
    }

# Thank the user and acknowledge the order
    &thank_you;

} 

else { 	
# Format an error message for the user

    print "Content-type: text/html\n\n";
    print "&lt;HTML&gt\n";
    print "&lt;HEAD&gt\n";
    print "&lt;TITLE&gtMessage Form Error&lt/TITLE&gt\n";
    print "&lt/HEAD&gt\n";
    print "&lt;BODY&gt\n";
    print "&lt;H1&gtMessage Form Error&lt/H1&gt\n";
    print "&lt;HR&gt\n";
    print "&lt;P&gt\n";
    print "Form input was not processed.  Please mail your ";
    print "remarks to $company\n";
    print "&lt/BODY&gt\n";
    print "&lt/HTML&gt\n";
}
sub thank_you {

    print "Content-type: text/html\n\n";
    print "&lt;HTML&gt\n";
    print "&lt;HEAD&gt\n";
    print "&lt;TITLE&gtThank You&lt/TITLE&gt\n";
    print "&lt/HEAD&gt\n";
    print "&lt;BODY&gt\n";
    print "&lt;H1&gtThank You&lt/H1&gt\n";
    print "&lt;HR&gt\n";
    print "&lt;P&gt\n";
    print "Your message have been emailed to host, or emailed to other members, or posted on the bulletin board.\n";
    print "&lt/BODY&gt\n";
    print "&lt/HTML&gt\n";
}

</pre>

<hr>

<h2>UNIX SHELL Example:</h2>

The following html form submits the input information to
the CGI script hello.cgi:<br>

<pre>
&lt;Form Method = "post" action = "cgi-bin/hello.cgi"&gt
Input your name here:
&lt;Input Type="text" Name = "your_name" size=20 value=""&gt
&lt;Input Type="submit" value="submit"&gt
&lt/Form&gt
</pre>

<br>
This is what you see in the browser: 

<Form Method = "post" action = "cgi-bin/hello.cgi">
Input your name here:
<Input Type="text" Name = "your_name" size=20 value="">
<Input Type="submit" value="submit">
</Form>

The CGI script hello.cgi looks like this:<p>

<pre>
#!/bin/sh -f
# When the request method is POST,
# read the query string from the standard input.
read string
echo Content-type: text/html
echo ""
echo query string: $string
echo "&lt;p&gt"
echo $string | awk -F= '{print "Hello", $2, "!"}' | sed 's/+/ /'
</pre>

<hr>

<h2>C Example:</h2>

This html form sends input information to the CGI script ind_info.cgi:

<pre>
&lt;Form method=GET action="cgi-bin/club.cgi"&gt
      Your name:    &lt;input type="text" name="name" size="30"&gt&lt;br&gt
      Address:      &lt;input type="text" name="address" size="50"&gt&lt;br&gt
      Tel. No:      &lt;input type="text" name="tel" size="30"&gt&lt;br&gt
      Fax:          &lt;input type="text" name="fax" size="30"&gt&lt;br&gt
      Email:        &lt;input type="text" name="email" size="30"&gt&lt;br&gt
                    &lt;input TYPE="submit" VALUE="Submit"&gt
                    &lt;input TYPE="reset" VALUE="Erase"&gt
&lt;Form&gt
</pre><p>

what you see in the browser is:

<pre>
<Form method=POST action="cgi-bin/ind_info.cgi">
      Your name:    <input type="text" name="name" size="30"><br>
      Address:      <input type="text" name="address" size="50"><br>
      Tel. No:      <input type="text" name="tel" size="30"><br>
      Fax:          <input type="text" name="fax" size="30"><br>
      Email:        <input type="text" name="email" size="30"><br>
                    <Input Type="submit" value="submit">
                    <input TYPE="reset" value="Erase">
</Form>
</pre>
<p>

The CGI script ind_info.cgi looks like this:<p>

<pre>

#include &lt;stdio.h&gt
#include &lt;stdlib.h&gt

/*from <a href="cgi-bin/cgi2env.c">cgi2env.c</a>*/
extern void cgi2env();
extern void http_head();

main()
{
   char *val;

   /* split Name-Value pairs into environment variables WWW_Name */
   cgi2env();

   http_head();  /* output header "Content-type: text/html\n\n" */
   val = getenv("WWW_name");
   printf("name = %s &lt;br&gt\n", val);
   val = getenv("WWW_address");
   printf("address= %s &lt;br&gt\n", val);
   val = getenv("WWW_tel");
   printf("telphone = %s &lt;br&gt\n", val);
   val = getenv("WWW_fax");
   printf("fax = %s &lt;br&gt\n", val);
   val = getenv("WWW_email");
   printf("email = %s &lt;br&gt\n", val);
}

</pre>


<hr>

<h1>WRAPPER MIDDLEWARE FOR DISTRIBUTED DATABASES</h1>

To simplify the task of the access and integration of information
from a variety of heterogeneous data sources, mediator systems are built.
In a mediator system, wrappers serve as a middleware to encapsulate individual
data sources so that all data sources present a common interface to the mediator.
<p>
Wrappers accept one input query and convert it into one or more
queries/commands understandable by the encapsulated data source, and transform
the native query results into a format understood by the mediator.
The mediator thereby integrates these results and returns it to the user.
<p>
The figure below illustrates a mediator system in which data sources
could be relational databases, object-oriented databases, legacy databases,
web sites and so on.
<p>
<IMG SRC="images/fig163.gif"><br>

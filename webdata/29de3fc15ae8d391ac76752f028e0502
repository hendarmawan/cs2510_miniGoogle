     PROFESSOR:   BASICALLY I WANT TO
TEACH YOU SQL AND YOU CAN SEE TODAY PEOPLE
KNOW SEQUEL.  I WANT TO TEACH YOU SEQUEL
BECAUSE THAT'S A LANGUAGE IS THAT POPULAR
AND WANT TO GET SOME FLAVOR OF WHAT ORACLE
IS ABOUT.  AND THEN WE'LL SWITCH TO THE
WEB PROGRAMMING.  BUT EVEN FOR THAT YOU
NEED SQL.  SQL IS THE MUST.  NO MATTER
WHAT YOU DO YOU NEED SQL.
     LIKE I JUST EXPLAINED, NO MATTER WHAT
PROGRAMMING LANGUAGE OR WHETHER WE ARE
USING WEB WE STILL HAVE TO USE DATABASE
QUERY LANGUAGE WHICH IS SQL.  SO LATER ON
WE'LL GOOD TO WEB BASE PROGRAMMING AND
ESSENTIALLY SQL COMMANDS WILL BE IM BEDDED
IN THAT LANGUAGE OR IN THAT WEB PAGE.  SO,
SQL IS REALLY QUITE EASY TO LEARN,
ESPECIALLY THROUGH THE NAVIGATOR.  LATER
ON WHEN YOU NEED TO POPULATE A DATABASE TO
CREATE DATABASE, YOU NEED TO HAVE THE
WHOLE BUNCH OF DML STATEMENT.  DML STANDS
FOR DATA MANIPULATION LANGUAGE.  THIS
INCLUDES, UPDATES, THE DELETE AND INSERT.
IF YOU FIND THE SCHEMA, WHICH WE ALREADY
WENT THROUGH, YOU CAN USE THE NAVIGATOR TO
DEFINE SCHEMA.  THE EASIEST WAY TO
POPULATE DATABASE IS TO USE INSERT
COMMAND.  SO JUST INSERT INTO A CERTAIN
RELATION THE TUPLES.
     AND THAT BEING DONE THEN YOU CAN USE
THE SELECT STATEMENT TO RETRIEVE.  AND
THIS THE ONLY COMMAND, ONLY THAT WE CAN
USE TO DO THE QUERY.  AND SYNTAX IS
PERFECTLY SIMPLE, SELECT FROM WHERE?
THAT'S ALL.
     LATER ON IF YOU CHOOSE TO DO THE
COMPILER PROJECT YOU WILL WRITE A PARSER
TO PARSE.  YOU HAVE CLUES.  YOU ALREADY
HAVE COLLECT FROM WHERE.  SO YOU CAN QUITE
EASILY PICK UP THE SUB CLAUSES.  OR IF YOU
CHOOSE TO DO SO, YOU CAN WRITE A VERY
SIMPLE STRUCTURE EDITOR SO THAT YOU PROMPT
USER FOR THE KEY WORDS.  AND THAT'S EVEN
SIMPLER.  IN ANY CASE LET'S GO BACK TO THE
SIMPLE QUERY.  THE SELECT CLAUSE YOU NAME
ATTRIBUTES THAT YOU WANT TO RETRIEVE.  YOU
SELECT S NUMBER AND STATUS.  WE TALK ABOUT
RELATIONAL ALGEBRA SO THIS IS EQUIVALENT
TO PROJECT.  SO WE ARE PROJECTING ON TO
THE TWO COLUMNS, THE COLUMN HEADER IS S
NUMBER AND STATUS.  OKAY.  SELECT IS
COLUMNS.
     FROM IS TO NAME THE SOURCE WHERE WE
RETRIEVE THE INFORMATION AND IN THIS CASE
THE SOURCE IS THE S RELATION.
     LAST PART IS WHERE WE PUT IN
PREDICATE AND THAT IS CITY IS EQUAL TO
PARIS.  AND FINALLY THE LIMB I ITER, END
OUR STATEMENT.  NOTICE THAT YOU CAN PUT
QUALIFIER SO THAT YOU CAN BE MORE PRECISE.
BECAUSE WHEN YOU TALK ABOUT A SINGLE
RELATION IT'S NO PROBLEM.  ALL OF THE
ATTRIBUTES BELONG TO THAT RELATION.  BUT
IF YOU NAME MULTIPLE OBJECTS, MULTIPLE
RELATIONS HERE, THEN THERE IS A QUESTION.
ARE WE TALKING ABOUT THE ATTRIBUTE S
NUMBER FROM S OR FROM A DIFFERENT
RELATION?  IF YOU PUT DOWN S DOT S NUMBER
THERE IS NO AMBIGUITY.  SO IN THIS CASE
YOU CAN SEE THAT WE CAN OMIT THAT BECAUSE
THERE IS ONLY ONE SOURCE.  THE S RELATION
SO THERE CAN BE NO AMBIGUITY.  SO IT HAS
TO BE S DOT S NUMBER S DOT STATUS.
OTHERWISE WE CAN SPELL IT OUT AND MAKE IT
MORE CONCISE.
     SO, OF THE THREE CLAUSES SELECT FROM
AND WHERE YOU CAN DROP THE WHERE, IN OTHER
WORDS SOMETIMES YOU DON'T HAVE ANY
PREDICATES.  IT'S JUST SELECT AND FROM.
THIS IS EQUIVALENT TO THE PROJECTION WE
TALK ABOUT BECAUSE HAVE YOU NO CONDITIONS,
YOU ARE JUST PROJECTING ON TO THE
ATTRIBUTES YOU SELECT.  SO HERE WE ARE
GOING TO SELECT THE P NUMBER, THAT COLUMN
FROM THE SP RELATION.  NOW IF YOU CHECK
YOUR MANUAL, YOUR ONLINE HELP MANUAL
CAREFULLY, THEN YOU'LL FIND MANY NICE
THINGS YOU CAN DO SUCH AS THE KEY WORD
DISTINCT.  NOW IF YOU ARE SELECTING SP
NUMBER FROM SP AND THE RELATION IS
SOMETHING LIKE THIS.  LET'S SAY IT'S LIKE
THIS.
     SO IF I'M PROJECTING ON TO THIS
COLUMN I'LL GET SUB TABLE LIKE THIS.
WHICH MAY NOT BE WHAT I WANT BECAUSE
BASICALLY I'M JUST INTERESTED IN FINDING
OUT WHAT PARTS ARE SUPPLIED.  SO WE CAN
ELIMINATE DUPLICATES BY INCLUDING THE
DISTINCT KEY WORDS.  AND THEN WE CAN ALSO
DO SOME SIMPLE ARITHMETIC COMPUTATION LIKE
CONVERTING THE WEIGHT FROM POUND TO GRAMS
SO YOU JUST MULTIPLY BY TWO, THREE, FOUR
AND ACTUALLY DISPLAY THAT YOU WILL DISPLAY
THE RESULT AFTER THE COMPUTATION.  YOU
HAVE SO S STANDS FOR ALL SO IF YOU PUT
SELECT STAR THAT MEANS I'M SELECTING ALL
COLUMNS, ALL ATTRIBUTES FROM THE RELATION
S.  NOW S DOT ASTERISK HAS THE SAME
MEANING, NAMELY SELECTING ALL COLUMNS OF
THE RELATION S FROM THE REGION S.  IT'S
EQUIVALENT TO THIS IF YOU WANT TO DO IT
LONG WAY.
     STUDENT:   IS USING DISTINCT THE SAME
AS USING UNIQUE.
     PROFESSOR:   UNIQUE?  YEAH, IN THIS
CASE IT IS THE SAME.  IN THIS CASE THE
SAME.
     OKAY.  NOW, THE POWER OF SQL COMES
FROM THE -- SELECT AND FROM IS EASY WE
DON'T HAVE TO WORRY ABOUT THAT.  IN THE
WHERE CLAUSE THAT'S WHERE YOU PUT IN YOUR
CONDITIONS.  WE FIRST START WITH ONE
RELATION, THIS WHAT IS WE DISCUSSED LAST
TIME.  WE HAVE A TABLE AND YOU WANT TO
SELECT A SUBSET OF ROWS FROM THIS TABLE SO
YOU THROW IN SOME PREDICATES LIKE I WANT
TO SELECT ONLY THOSE SUPPLIERS LOCATED IN
PARIS AND STATUS GREATER THAN 20.  AND YOU
ALSO HAVE OTHER THINGS LIKE TRYING TO
PRODUCE THE RESULT.  AND YOU ORDER THAT BY
CERTAIN ATTRIBUTE AND HERE LIKE ORDER BY
STATUS DESCENDING HAS THE OBVIOUS MEANING,
SO WE ARE GOING TO PRESENT RESULTING TABLE
ORDERS BY STATUS FROM BIG VALUE TO SMALL
VALUE.
     OKAY.  NOW, IT'S THE JOIN QUERY
THAT'S REALLY OF INTEREST TO US.  IN
ALGEBRA WE HAVE AN EXPLICIT OPERATOR.  THE
JOIN OPERATOR.  TO COMBINE RELATIONS,
RIGHT?  SO YOU HAVE THIS EXPLICIT JOIN
OPERATOR.  TO COMBINE THINGS.  IN THE SQL
QUERY WE DON'T NEED THE OPERATORS.  THE
OPERATORS ARE ACTUALLY IMPLICIT.  WHAT
WILL HAPPEN IS THAT SOME OF THE CLAUSES IN
THE WHERE PART IS ACTUALLY A JOIN
CONDITION.  LET'S LOOK AT THIS QUERY.
     SO I'M SELECTING FROM S AND P TABLES,
NOTICE I CAN SELECT FROM MULTIPLE SOURCES
OKAY?  NOW THIS IS ACTUALLY A WAY OF
TELLING THE QUERY TRANSLATER THAT I NEED
TWO RELATIONS SO IN THE IMPLEMENTATION WE
HAVE TO OPEN BOTH FILES AND READ THAT INTO
THE BUFFER AREA, RIGHT?  OKAY.
     SO, I NEED TWO RELATION, S AND P AND
WHAT DO I SELECT?  I SELECT ALL THE
COLUMNS FROM S TABLE AS WELL AS ALL THE
COLUMNS FROM THE P TABLE.  WHERE S DOT
CITY EQUAL TO P DOT CITY.  FIRST OF ALL
NOTICE I'M USING QUALIFIED NAME.  THE
REASON IS THAT OTHERWISE I CANNOT TELL THE
TWO ATTRIBUTE APART, RIGHT?  I MATCH CITY
WITH CITY.  BUT A CITY COMES FROM THE S
TABLE AND ANOTHER CITY ATTRIBUTE COME FROM
THE P TABLE.  SO I BETTER SAY THAT.  I SAY
S DOT CITY EQUAL TO P DOT CITY.  THIS
THE -- THIS MEANS WHEN I'M LOOKING AT
TABLES S AND P, SO I'M LINKING OR MATCHING
THE IDENTICAL ENTRIES FROM THESE TWO
TABLES BASED UPON THE CITY ATTRIBUTE.
OKAY?  SO NOTICE THAT SQL IS NICE BECAUSE
YOU DON'T HAVE TO WORRY ABOUT EXPLICITLY
PUTTING THE OPERATOR, YOU JUST DEFINE THE
JOIN CONDITION.
     NOW YOU WILL SEE TWO KIND OF
CONDITIONS.  SO YOU HAVE FOR EXAMPLE,
S.CITY EQUAL TO PARIS AND S.CITY EQUAL TO
P.CITY.  IF WE ENCOUNTER THE FIRST ONE,
THIS IS APPLIED TO A SINGLE RELATION,
RIGHT?  THIS IS JUST SAYING THAT FROM THE
S TABLE I WANT TO PICK UP THOSE ROWS WHERE
THE CITIES EQUAL TO PARIS.  THIS IS NOT
JOIN.  THIS IS WHAT?
     STUDENT:   RESTRICT.
     PROFESSOR:   RESTRICT.  OKAY.  AND
THE THING THAT TIP US OFF THAT THIS IS A
JOIN CONDITION IS BECAUSE?
     STUDENT:   THEY'RE BOTH THE SAME
FORM, THEY'RE BOTH TABLE COLUMN.
     PROFESSOR:   BUT THERE IS A
DIFFERENCE.
     STUDENT:   TWO RELATIONS.
     PROFESSOR:   RIGHT.  IN OTHER WORDS,
IF YOU LOOK AT THE QUALIFIED NAME S.CITY,
P.CITY THEY ARE DIFFERENT.  IN OTHER WORDS
I'M TELLING YOU THAT WHEN DO YOU THE --
PARSING, IF YOU CHOOSE THE PROJECT THE
PARSING OF THIS EXPRESSION, THE REASON
THAT WE KNOW THIS IS RESTRICT AND THIS IS
A JOIN IS BECAUSE OF THE FORM OF THIS
CLAUSE.  IF IT'S JUST ATTRIBUTE NAME ON
ONE SIDE AND LITERAL ON THE OTHER SIDE OR
VALUE ON THE OTHER SIDE, THIS IS
DEFINITELY A RESTRICT.  IF YOU SEE
VARIABLES ON BOTH SIDES, IT COULD BE A
JOIN IF THESE ARE DIFFERENT.  NOW THIS IS
HIGHLY UNLIKELY TO MATCH ATTRIBUTE IN THE
SAME TABLE.  IT ALMOST NEVER OCCURS
BECAUSE IT'S NOT MEANINGFUL, RIGHT?  IT'S
SAYING THAT THE TWO COLUMNS IN THE TABLE
MUST BE IDENTICAL.  ALMOST NEVER HAPPEN.
OKAY.  SO NORMALLY YOU WOULD SEE THIS KIND
AND THIS KIND.  THIS KIND HERE IS
ATTRIBUTE NAME.  AND THIS SIDE HERE IS
WHAT WE CALL THE LITERAL OR VALUE.  THAT
MEANS IT'S A RESTRICT AND IF BOTH SIDES
ARE ATTRIBUTE NAMES, AND QUALIFIED
RELATION NAME ARE DIFFERENT IT'S
DEFINITELY A JOIN CONDITION.  YEAH?
     STUDENT:   NOW, WHEN THIS STATEMENT
RETURNS ALL COLUMNS FROM BOTH RELATIONS
WILL IT RETURN THE CITY FROM THE S TABLE
AND CITY FROM P TABLE?
     PROFESSOR:   YES.  AND THIS WHAT
ACTUALLY YOU DON'T LIKE.  THIS IS A VERY
GOOD QUESTION.  SO LET ME JUST DO A VERY
SMALL EXAMPLE TO SHOW YOU WHAT MAY HAPPEN.
LET'S SAY I HAVE IN THIS TABLE S NUMBER
CITY AND THIS STABLE P NUMBER CITY.  JUST
FOR THE SAKE OF SIMPLICITY.  OKAY?  AND
HERE IS CITY PARIS JOINED WITH PARIS AND
THEN NUMBER 1 AND S1 AND P1 AND HERE IS
LONDON JOINED WITH S2 AND P2, HERE IS
LONDON.  NOW IF I DO THIS JOIN AND SELECT
ALL OF THE COLUMNS, I END UP WITH A TABLE
OF HOW MANY COLUMNS?  I WILL DRAW IN FOUR,
RIGHT?  S NUMBER, HERE IS S.CITY, HERE IS
P.CITY AND HERE IS THE P NUMBER.  SO YOU
WILL SEE TWO IDENTICAL COLUMNS HERE.
OKAY?  AND THIS IS THE EQUI JOIN.  THIS
DOESN'T LOOK NATURAL TO US, RIGHT?
BECAUSE THESE TWO COLUMNS WILL LOOK ALWAYS
THE SAME.  AND WHAT WE CALL THE NATURAL
JOIN THAT YOU ONLY NEED ONE OF THEM.  THIS
IS CALLED A NATURAL JOIN.  IN OTHER WORDS,
IN THE JOIN CONDITION YOU ARE MATCHING
ATTRIBUTES, RIGHT?  YOU DON'T HAVE TO KEEP
BOTH, YOU ONLY NEED TO KEEP ONE.  THIS IS
CONCEPT OF THE NATURAL JOIN.  IN FACT IT
IS SPELLED OUT HERE.  IF ONE OF THE TWO
IDENTICAL COLUMNS IS ELIMINATED IT'S
CALLED A NATURAL JOIN.
     SO WHEN YOU DO THE JOINING AFTER
WARDS WHEN YOU DO THE PROJECTION, YOU CAN
ELIMINATE ONE COLUMN ALTOGETHER BECAUSE IT
CARRIES NO MORE INFORMATION.  AND
IMPORTANT THING I WANT TO MENTION HERE IS
THAT AS YOU PROGRESS YOU WILL CONSTRUCT
MORE COMPLEX QUERIES.  THE COMPLEXITY
USUALLY IS HIDDEN IN YOUR JOIN CONDITION.
OKAY?  THAT'S HOW YOU CAN CONSTRUCT
SOMETHING VERY COMPLEX.  OTHER THINGS ARE
VERY SIMPLE.  IN FACT, ONCE YOU GO TO WORK
AND YOU LOOK AT SOME OF THE DATABASE
QUERIES, YOU WILL NOTICE MANY OF THEM ARE
COMPLICATED BUT NOT COMPLEX.  BY THAT I
MEAN YOU WILL SEE A QUERY, LET'S SAY IF
THEY'RE ALPHABET CAL AND YOU'RE DOING MANY
TASKING, IF YOU SEE MANY -- IF YOU'RE
DOING MEDICAL, PATIENT MUST HAVE DIABETES,
SOMETHING, BLAH, BLAH, LOT OF
RESTRICTIONS, SO THE QUERY LOOKS
COMPLICATED BUT IF YOU LOOK INTO THAT,
IT'S NOTHING.  NO JOIN CONDITION.
ACTUALLY IT'S VERY SIMPLE.  WHEN IT'S
COMPLEX IT MEANS HAVE YOU A LOT OF JOIN
CONDITIONS.  THIS REALLY DOESN'T HAPPEN
VERY OFTEN.  AT MOST YOU ARE COMBINING TWO
OR THREE TABLES.  YEAH.
     SO IN THE NOTES I GIVE YOU QUITE A
FEW QUERY EXAMPLES AND YOU CAN LOOK INTO
MORE DEEPLY.  FOR EXAMPLE, HERE I AM
TRYING TO SELECT FROM TWO UNDERLYING
TABLES THE SPJ RELATION AND THE S
RELATION.  AND SELECT ONLY DISTINCT PART
NUMBERS THIS MEANS THAT I DON'T WANT
DUPLICATES.
     AND UNDERNEATH IT I HAVE TWO
CONDITIONS.  AND WE ALREADY DISCUSSED
THAT.  THE CITY EQUAL TO LONDON IS WHAT?
RESTRICTION, RIGHT?  AND THE REASON I KNOW
IT IS THAT YOU HAVE ATTRIBUTE NAME AND
VALUE.  SO THAT'S WAY RESTRICTION.
     AND THE OTHER CAUSE SINCE WE HAVE
ATTRIBUTE NAMES ON BOTH SIDES OF THE
EQUATION WE KNOW IT'S A JOIN CONDITION.
JUST LOOK AT THE QUERY YOU KNOW THAT IT
HAS TO INVOLVE THE TWO RELATIONS.  SO THE
CITY HAS TO EQUAL TO LONDON AND SUPPLIER
NAME HAS TO MATCH.
     STUDENT:   YOU SAY SELECT DISTINCT
PART NUMBER TWO OF THEM COME UP DOWN
BELOW.  OR IS THAT ENTIRE TABLE DOWN
BELOW?
     PROFESSOR:   RIGHT.  HAVE YOU TO LOOK
AT THE TABLE.  THAT'S ANOTHER TIP.  IN
OTHER WORDS, WHEN YOU DO QUERY, NORMALLY
IF YOU DO QUERY, WHAT I DO IS THAT I DRAW
SOME SAMPLE TABLES OR I HAVE THOSE SAMPLE
RELATIONS ON THE SIDE SO I CAN EASIER LOOK
AT THEM AT THE SAME TIME.  SO IN THIS CASE
YOU WILL HAVE S, P, J RELATION AND SPJ
RELATION.  OKAY.  YOU NEED TO LOOK AT THAT
AND THEN FORMULATE THE QUERY BY LOOKING AT
YOUR EXAMPLE DATABASE.  OKAY.  IN FACT, IN
THIS CASE IN THE NOTES I ALREADY GIVE YOU
THE TABLES.  AND THE -- THE S TABLE HAS S
NUMBER, S NAME, STATUS, CITY THOSE KIND OF
THINGS.  AND SPJ TABLE IS THE LINK TABLE.
THAT'S S NUMBER, P NUMBER, J NUMBER
QUANTITY.  THE WAY TO INTERPRET THAT IS
FOR THE SUPPLIER SUPPLIES THESE PARTS TO
THIS PROJECT AND THAT'S THE QUANTITY
SUPPLIED.  RIGHT?  OKAY.  SO NOW I'M
LINKING -- LET'S GO BACK TO OUR QUERY.  SO
THE QUERY SAYS LOOK AT THE TABLE SPJ.  AND
S.  SO IN SPJ TABLE I HAVE S NUMBER, P
NUMBER, J NUMBER AND QUANTITY.  S TABLE IS
S NUMBER, S NAME, STUFF LIKE THAT.
     SO I'M MATCHING S NUMBER WITH S
NUMBER.  IMPOSING A CONDITION S.  AND SAY
CITY MUST BE EQUAL TO LONDON.  AND WHERE
DO I GET THE PART NUMBER?
     PROFESSOR:   FROM HERE, RIGHT?  I
DON'T HAVE PART NUMBER HERE, I HAVE PART
NUMBER HERE.  THAT'S WHY I DID NOT PUT IN
QUALIFYING NAME THERE BECAUSE THERE IS NO
AMBIGUITY.  SO I'M TRYING TO GET THE PART
NUMBER FROM THIS TABLE.  APPLY JOIN
CONDITION HERE AND A RESTRICT HERE.  IN
THE ACTUAL EVALUATION OF THIS QUERY HOW DO
WE PROCEED?  WHERE DO WE START?
     STUDENT:   THE S NUMBERS?
     PROFESSOR:   WE START --
     STUDENT:   SUPPLY NUMBER?
     PROFESSOR:   SUPPLY AND DO WHAT?
     STUDENT:   RESTRICT.
     PROFESSOR:   RESTRICT.  RIGHT.
BECAUSE FIRST I WILL USE THE RESTRICT TO
PICK UP ONLY THOSE TUPLES, ONLY THOSE ROWS
WHERE IT SAYS LONDON.  THAT'S NUMBER ONE.
STEP ONE.  THEN?
     STUDENT:   THEN YOU GO TO SPJ TABLE.
     PROFESSOR:   HOW?
     STUDENT:   JOIN.
     PROFESSOR:   BY THE JOIN.  THEN I
FOLLOW THIS LINK AND JOIN THIS, COMBINE
THE INFORMATION.  THIRD STEP?
     STUDENT:   DO THE COMPARISON?
     PROFESSOR:   YEAH.  THAT'S WHAT WE
DID.  OKAY.  FINALLY, WHAT DO I WANT?
     STUDENT:   REMOVE DUPLICATES FOR THE
PART NUMBER.
     PROFESSOR:   OKAY.  AND.
     STUDENT:   THAT'S DISTINCT.
     PROFESSOR:   OKAY  .
     AND PROJECT TO PART NUMBER.  THAT'S
WHAT I WANT.  LET ME REPEAT.  STEP ONE, DO
THE RESTRICT.  STEP TWO, APPLY THE JOINT
CONDITION, MERGE THE TABLES.  STEP THREE,
DO THE PROJECT.  SO ALL THREE STEPS
ACTUALLY ARE INCLUDED IN THIS QUERY.  SO
THE USER DOESN'T HAVE TO DO KNOW THAT BUT
MENTALLY THERE IS SOME LOGICAL STEPS,
RIGHT?  AND THAT'S WHAT I WANT YOU TO PAY
ATTENTION TO.  SO WHEN YOU FORM THE QUERY,
YOU ALSO MENTALLY GO THROUGH SAME STEPS,
RIGHT?  SO CONDITION, RESTRICTION TO THE
JOINING FINALLY THAT GIVE ME THE RESULT.
IF YOU THINK LOGICALLY, THOSE SIMPLE
QUERIES OR SO-CALLED COMPLICATED, I MEAN
JUST ONE JOIN, NO BIG DEAL, ALL LIKE THAT.
     YEAH?
     STUDENT:   SO IN OTHER WORDS, THE
DATABASE PROGRAM LOOKS AT THE QUERY AND
INTERPRETS IT AND TRIES TO COME UP WITH
ORDER ON HOW IT DOES THINGS?  IS IT SET UP
SO THAT IT NATURALLY LOOKS FOR CERTAIN
THINGS FIRST LIKE RESTRICTIONS BEFORE
JOIN?
     PROFESSOR:   THAT'S THE OPTIMIZING
QUERY INTERPRETERS JOB.  YOU'RE RIGHT.  IN
OTHER WORDS, WHEN WE DO THINGS, YOU KNOW,
YOU CERTAINLY HAVE HEARD ABOUT OPTIMIZING
COMPILER, RIGHT?  WHAT DOES AN OPTIMIZING
COMPILER DO?
     STUDENT:   GIVES OPTIMAL CODE.
     PROFESSOR:   RIGHT.  IN OTHER WORDS
YOU SPIT OUT A CODE BUT IT ALSO TRY TO
MAKE IT SO THAT THE CODE IS EFFICIENT.  BY
TAKING ASSIGNMENT OUT OF LOOP AND ALL
THOSE TRICKS.  WITH DATABASE PROGRAMMING
SAME THING.  WE DON'T WANT USER TO WORRY
ABOUT IT.  THE USER WILL DO IT IN SQL
QUERY AND SQL QUERY IS NICE BECAUSE IT'S
INTUITIVE AND MORE OR LESS NONPROCEDURAL.
YOU DON'T HAVE TO TELL USER TO WORRY ABOUT
STEP ONE, STEP TWO, STEP THREE, IT'S
ALREADY IN THERE, BUT COMPILER, IF IT IS
SMART, YOU FIGURE THAT OUT AND MAKE THIS
MORE EFFICIENT.  SO GOING BACK TO YOUR
QUESTION, THE REASON WE DO THIS FIRST IS
BECAUSE THIS WILL ELIMINATE TUPLES.  IF
YOU DON'T DO THAT FIRST, CAN YOU DO IT,
THE ANSWER IS YES.  IF YOU JOIN.  YOU
FIRST COMBINE THAT AND THEN YOU DO THE
RESTRICT YOU JUST END UP WITH MORE WORK.
THAT'S WHAT OPTIMIZER WILL DO FOR YOU.
     OKAY.  SO THIS KIND OF SIMPLE QUERY
SHOULD BECOME SECOND NATURE VERY, VERY
SOON.  IN OTHER WORDS, YOU SHOULD BE ABLE
TO QUICKLY WRITE A QUERY LIKE THIS WITHOUT
EVEN THINKING ABOUT IT.  OKAY.
     NOW, OF COURSE THERE ARE MANY
ADDITIONAL NICETIES WHICH I REFER YOU TO
THE TEXTBOOK AND I WANT YOU STUDY BY
YOURSELF LIKE WHAT IS A THETA JOIN.
THAT'S A MORE GENERAL TYPE OF JOIN THAT
CAN JOIN BASED UPON ANY OPERATORS.  OR IN
THE CASE OF SQL LANGUAGE I CAN SAY THIS.
DOES THIS MAKE SENSE?
     STUDENT:   NO.
     PROFESSOR:   DOESN'T MAKE SENSE,
RIGHT?  WHY ON EARTH I WANT TO FIND
SOMETHING BIGGER THAN SOME OTHER CITY IN
OTHER WORDS, THIS OF COURSE MEANS THAT YOU
ARE ALREADY GOOD PROGRAMMER AND WE KNOW
THAT CITY IS REALLY REPRESENTED BY-IS
ALREADY REPRESENTED BY ALPHABET CAL
SCREENS SO THE GREATER THAN IS A WAY FOR
US TO IMPOSE SOME KIND OF ORDERING OF
THINGS.  OKAY?  THEN WHAT DOES THIS QUERY
TRY TO SAY?
     STUDENT:   YOU WANT TO PROJECT THE
ROWS WHERE-.
     PROFESSOR:   I HAVE TWO TABLES.  NOW
THE TABLES ARE THE S TABLE WHICH GIVE ME
THE SUPPLIER.  AND THE PART TABLE GIVE ME
THE PARTS.
     STUDENT:   SO, THIS WILL RETURN THE
COLUMNS -- IT WILL RETURN THE COLUMNS FROM
EACH TABLE.
     PROFESSOR:   YEAH.  THIS MEANS RETURN
ALL THE COLUMNS FROM EACH TABLE.
     STUDENT:   ONLY WHERE THE CITY IN THE
S TABLE IS ALPHABETICALLY COMES BEFORE THE
CITY IN THE P TABLE.
     PROFESSOR:   YOU SAID IT.  YOU WANT A
BITTER WAY TO SAY THAT?
     STUDENT:   NO, THAT'S PRETTY MUCH IT.
     PROFESSOR:   YEAH?
     STUDENT:   THE RETURN IN ALPHABET CAL
ORDER?
     PROFESSOR:   AND ALSO IT RETURN FIRST
OF ALL IT MUST BE DIFFERENT -- THE IT TWO
CITY CANNOT BE THE SAME, RIGHT?  IT CANNOT
BE BECAUSE GREATER THAN EXCLUDE THAT.  SO
WHAT IT SAYS IS LET'S RETURN PAIRS OF
CITIES, SO IF ONE CITY IS ATHENS AND THEN
DEPEND THE GREATER, LET'S SAY
ALPHABETICALLY FIRST, THEN HERE ON THIS
OTHER SIDE WILL BE OTHER SIDE LIKE
BETHLEHEM, CAIRO, ET CETERA.  AND THEN
COMES BETHLEHEM.  DO I RUN ATHENS HERE?
NO.  ANYTHING GREATER THAN THAT.  SO IT
HAS TO BE CAIRO AND D.
  6 A     WHAT IS D?
     STUDENT:   DENVER.
     PROFESSOR:   DUBLIN.  DUBLIN, YEAH.
WHATEVER.  OKAY  .
     IN OTHER WORDS, WHY WE GENERATE THIS
TABLE, THIS LIST ALL SUPPLIER AND PART
PAIRS.  WHERE IT IS ORDERED IN SUCH A WAY
THAT THE -- THE SAME SUPPLIER HAVE ALL OF
THE PART, CITY AND IS ORDER OF ALPHA
NUMERICALLY.  ALSO YOU DON'T HAVE
DUPLICATE THIS IS WAY.  OTHERWISE HAVE YOU
ATHENS, BETHLEHEM AND ATHENS IT WON'T
HAPPEN, BECAUSE IF YOU LOOK AT THE MATRIX.
SO HERE IS THE CITY, ATHENS, BETHLEHEM, SO
BASICALLY WE ARE PRINTING EVERYTHING IN
THIS UPPER PART OF DIEING A NATIONAL.  WE
DIAGONAL.  IT'S A PROGRAMMING TRICK.  BUT
IMBEDDED IN QUERY.  OKAY  .
 24
     SO, ALTHOUGH THIS DOESN'T MAKE SENSE
BUT ACTUALLY IT HAS ITS USE.
     OKAY.  AND I GIVE YOU SOME OTHER
EXAMPLES WHERE I MATCH THE CITY PAIRS AND
ALSO TO JOIN -- THIS MORE INTERESTING.
THIS IS TO JOIN A TABLE WITH ITSELF.  NOW
I JUST SAID A MOMENT AGO IF I TRY TO
IMPOSE A JOIN WITH ITSELF, LET'S SAY
MATCHING CITY WITH THE CITY OF THE SAME
TABLE, S CITY EQUAL TO S CITY.  IT DOESN'T
MAKE SENSE.  THERE IS NO NEED FOR ME TO DO
THIS KIND OF THING.  IT'S THE SAME THING.
HOWEVER, YOU LOOK AT THIS QUERY, YOU
NOTICE SOMETHING STRANGE.  SO WE HAVE S
TABLE.  SO THE FROM CLAUSE SHOULD NAME
THOSE TABLE.  YOU SEE WHAT?  S FIRST, S
SECOND.  WHAT DOES THAT MEAN?  YEAH?
     STUDENT:   FIRST AND SECOND ARE
ALIASES FOR S.
     PROFESSOR:   EXACTLY.  VERY GOOD.  IN
OTHER WORDS, I WANT TO TALK ABOUT S BUT I
WANT TO TALK THE TWO DIFFERENT S'S.  HOW
DO I TELL THEM APART?  THE WAY TO TELL
PART IS TO INTRODUCE ALIAS IN OR WE CALL
THAT BRANCH VARIABLE.  THE VARIABLE
FIRST -- RANGE VARIABLE.  BUT ALIAS IS
EASIER TO EXPLAIN AND UNDERSTAND.  SO IN
OTHER WORDS, WE GIVE IT TWO ALIASES SO WE
CALL IT FIRST AND SECOND.  BUT BOTH ARE
WHAT?  BOTH ARE ACTUALLY S.  OKAY.  SO WE
HAVE TWO S WHERE THE CITY MATCH AND THE S
NUMBER AGAIN THIS TRICK.  THIS WILL
PRODUCE WHAT?  I'M LOOKING AT SUPPLIERS.
I'M LOOKING AT SUPPLIERS.  THESE SAY THE
TWO SUPPLIERS LOCATED IN THE SAME CITY.
SO THE WHOLE QUERY SAYS WHAT?
     STUDENT:   PRODUCE AN ORDERED LIST OF
SUPPLIERS IN THE SAME CITY.
     PROFESSOR:   PRODUCING A LIST OF
SUPPLIERS, PAIRS OF SUPPLIERS IN THE SAME
CITY.  SO IT WILL GO LIKE THIS.  S1, S2
BOTH IN LONDON.  S1, S3, BOTH IN LONDON,
S1, S6 BOTH IN LONDON.  THEN IT GOES ON TO
S2, S -- CANNOT BE S2.  MAYBE S4, S5, THEY
ARE LOCATED IN LONDON, ET CETERA, ET
CETERA.  IN OTHER WORDS, IT WILL PRODUCE A
TABULATION OF PAIRS OF SUPPLIERS THAT ARE
LOCATED IN THE SAME ST. AND BY USING THIS
CONDITION IT GUARANTEES THAT YOU DON'T
HAVE DUPLICATES, YES?
     STUDENT:   WON'T IT ALSO RETURN, FOR
EXAM, S2, S3 AS A PAIR, S2, S6, S3, S6?
     PROFESSOR:   IF THEY'RE LOCATED IN
SAME CITY, YES.
     STUDENT:   THEY HAVE TO BE ACCORDING
TO YOUR OUTPUT.
     PROFESSOR:   YEAH, YOU ARE RIGHT.  IT
SHOULD HAVE --
     STUDENT:   I'M JUST TRYING TO
ENVISION SOMEPLACE WHERE THAT WOULD BE
USEFUL TO DO.  I MEAN IN THIS DATABASE IT
DOESN'T SEEM LIKE IT'S USEFUL.
     PROFESSOR:   NO, THIS IS NOT USEFUL.
BUT LET'S SAY I'M TRYING TO FIND OUT PAIRS
OF PEOPLE WHO ARE COMPATIBLE IN SOME WAY.
LIKE SAY DATING SERVICE.  OKAY?  JUST
EXAMPLE.  THIS MIGHT BE USEFUL.  PEOPLE
WITH THE SAME RELIGIOUS INTEREST, THINGS
LIKE THAT.  OKAY?  THAT QUERY COULD BE
WHAT?  I'M LOOKING FOR THE PAIR OF PEOPLE
WHO ARE LOCATED IN SAME CITY AND SAME
RELIGIOUS BELIEF.
 22 Q     OKAY  .
     ACTUALLY, THE REASON I INTRODUCE THE
EXAMPLE IS TO SHOW YOU THE POWER OF ALIAS.
IT'S NOT NICE.  YOU PUT VARIABLES THERE SO
YOU CAN PUT NAME TWICE.  ANOTHER QUERY YOU
COULD DO YOURSELF IS THOSE PERSON MANAGED
BY ADAM.  MANAGER AS SUPERVISOR AND
EMPLOYEE ARE BOTH IN THE SAME RELATION AND
YOU NEED TO DEFINE THE QUERY.  CAREFULLY.
OKAY.  SO HERE I WANT TO TAKE ABOUT IS THE
CONCEPT OF RANGE VARIABLES OR ALIASES FOR
COMPLEX QUERIES THIS IS VERY, VERY USEFUL.
NOW, THERE ARE OTHER STATEMENTS THAT I
WON'T GO INTO DETAIL BUT IN PRACTICE VERY,
VERY USEFUL.  ARE THOSE STATEMENTS TO DO
DATA DEFINITION.  NOW, THERE ARE MANY
COMMERCIAL OUTFITS THAT WILL OFFER ORACLE
COURSES FOR TWO DAYS, THREE DAYS, STUFF
LIKE THAT, TRAIN YOU TO BE AN ORACLE
MANAGER.  WHAT THEY WILL CONCENTRATE,
THOSE THINGS, IN OTHER WORDS, YOU CAN
IMAGINE FROM A PRACTICAL STANDPOINT IT'S
VERY IMPORTANT THAT YOU BE ABLE TO CREATE
A DATABASE, PLAIN TAKEN A DATABASE AND
ALSO BE ABLE TO CREATE A LOT OF INDEXES.
INDEX IS PART OF THE DATA STRUCTURE THAT
WE CAN CREATE.  ITS PURPOSE IS TO EXPEDITE
ACCESSING, MANIPULATION OF THE DATABASE.
THE END USER, THEY USUALLY DON'T WORRY
ABOUT INDEXING, IT'S NOT THEIR BUSINESS.
BUT THE ADMINISTRATOR, YOU HAVE TO.
BECAUSE IF YOU DON'T HAVE THE INDEX, YOU
WILL NOT BE ABLE TO ACCESS THE DATABASE
FACTS.  NORMALLY WHAT YOU DO IS CREATE
INDEX OF THE PRIMARY KEY, OKAY?  SO IF YOU
HAVE NO OTHER INDEXING, YOU SHOULD DO
THAT. YOU ALWAYS KNOW THE PRIMARY KEY,
RIGHT?  YEAH.  BECAUSE WHEN YOU DO THE --
WE ALL WENT THROUGH THIS EXERCISE NOW, IN
CONCEPTUAL DESIGN YOU IDENTIFY ENTITIES
AND KEYS, YOU NOTE KEY ATTRIBUTES SO BASED
ON THE KEY YOU CREATE AN INDEX.  SO YOU
CAN CREATE TABLE, INDEX, CREATE DIFFERENT
TYPE VIEWS AND OF COURSE YOU HAVE THE
FACILITY TO CHANGE THING AND TO DROP THOSE
TABLE VIEW AND INDEXES.  LIKE I SAID, THIS
IS THE MANAGEMENT PART.  VERY USEFUL IN
PRACTICE BUT IT'S ALSO VERY SPECIFIC IN
TERMS OF PARTICULAR DIALECT OF SQL THAT
YOU WERE GETTING INTO.  THAT'S IT.  

<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage Express 2.0">
<title>Microsoft .NET Presentation</title>
</head>

<body bgcolor="#FFFFFF">

<table border="0" width="100%">
    <tr>
        <td valign="top"><a href="slide-13.htm"><img
        src="previous.gif" border="0" width="26" height="26"></a></td>
        <td align="center" valign="top"><h1>&nbsp; The Versioning
        Problem</h1>
        </td>
        <td align="right" valign="top"><a href="slide-15.htm"><img
        src="next.gif" border="0" width="26" height="26"></a></td>
    </tr>
</table>

<h2>Shared libraries - the key to efficient upgrading...</h2>

<p><font size="4">Shared libraries are a good idea. Rather than
have several applications statically link in the same runtimes
and functions, these were broken out into a shared module - a DLL
(SO for you Unix folk). Space was saved and best of all, if you
needed to upgrade you replace one module, right?</font></p>

<h2>...or maybe not</h2>

<p><font color="#000000" size="4">Unfortunately, unless strict
100% backward compatibility is maintained between upgrades to
shared libraries, you will break every application that uses it.
This problem of maintaining correct versions of a shared library
for all applications using it has come to be called &quot;DLL
Hell&quot;.</font></p>

<p><font color="#000000" size="4">Although binary interface
standards like COM try to address these problems by requiring
immutable interface contracts, problems with versioning still can
be very difficult. For instance, Microsoft ended up inventing an
entire API, DirectSetup, devoted entirely to managing the correct
installation of upgrades to the DirectX software layer, which is
entirely COM-based.</font></p>

<hr>

<p><a href="references.htm"><em>References</em></a><em>: D</em></p>
</body>
</html>

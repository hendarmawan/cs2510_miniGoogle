<title>INTEGRITY RULES</title>
<h1>INTEGRITY RULES</h1>
<center><xs><a href="http://www.cs.pitt.edu/~chang/156/lecture/12">Click here for audio-text lecture and feed it to the speech agent</a></xs></center>
<center><a href="http://blue.cs.ksi.edu/dl/cs156x/12.rm">Click here for an audio lecture that can be played using RealPlayer</a></center>
<br>
<li> Integrity rules are needed to inform the
     DBMS about certain constraints in the
     real world.
<br>
<li> Specific integrity rules apply to one
     specific database.
<br>
Example: part weights must be greater than zero.
<br>
<li> General integrity rules apply to all
     databases.
<br>
Two general rules will be discussed to deal
with: primary keys and foreign keys.
<hr>
<h1>PRIMARY KEYS</h1>
<br>
<li> Primary key is a unique identifier for
     a relation.
<br>
<li> There could be several candidate keys,
     as long as the they satisfy two properties:
<br>
	1. uniqueness
<br>
	2. minimality
<br>
<li> From the set of candidate keys, one is
     chosen to be the primary key.
<br>
<li> The others become alternate keys.
<br>
<br>
EXAMPLE: The relation R has several candidate keys.
<br>
ID	SSN	License_Number	NAME
<br>
If we select ID to be the primary key, then
the other candidate keys become alternate keys.
<hr>
<h1>THE ENTITY INTEGRITY RULE</h1>
<br>
<li> No component of the primary key of a base
     relation is allowed to accept nulls.
<br>
<br>
<br>
WHAT ARE NULLS?
<br>
Null may mean "property does not apply". For
example, the supplier may be a country, in
which case the attribute CITY has a null value
because such property does not apply.
<br>
Null may mean "value is unknown".  For example,
if the supplier is a person, then a null
value for CITY attribute means we do not know
the location of this supplier.
<br>
<br>
<li> Nulls cannot be in primary keys, but can
     be in alternate keys.
<br>
EXAMPLE: SSN may be null for one and only one
person (why?)
<hr>
<h1>FOREIGN KEYS</h1>
<br>
<li> A foreign key is an attribute of one
     relation R2, whose values are required
     to match those of the primary key of
     some other relation R1
     (R1 and R2 can be identical)
<br>
EXAMPLE: SP relation has attribute S#, and
S relation has primary key S#.  Then
S# in SP is considered a foreign key.
<br>
SP is called the "referencing relation".
S is called the "referenced relation".
<br>
We can draw a "referential diagram"
<br>
SP ---S#---> S
<br>
or simply
<br>
SP --------> S
<hr>
<h1>WHY ARE FOREIGN KEYS IMPORTANT?</h1>
<br>
<li> Foreign-to-primary-key matching are the 
     "glue" which holds the database together.
<br>
     Another way of saying it
<br>
<li> Foreign keys provide the "links" between
     two relations.
<br>
A relation's foreign key can refer to the
same relation.
<br>
EXAMPLE: EMP ( EMP#, SALARY, MGR_EMP#, ... )
<br>
EMP# is the primary key
MGR_EMP# is the foreign key
<br>
EMP is a "self-referencing relation".
<br>
<br>
THE REFERENTIAL INTEGRITY RULE
<br>
<li> The database must not contain any
     unmatched foreign key values.
<hr>
<h1>REFERENTIAL INTEGRITY RULE</h1>
<br>
<br>
EXAMPLE: The three 3NF relations are:<br>
   SP(S#,P#,QTY)<br>
   SC(S#,CITY)<br>
   CS(CITY,STATUS)<br>
<br>
The referential diagrams are:
<br>
SP ---S#---> SC ---CITY---> CS
<br>
DELETE INTEGRITY RULE:
<br>
We should not delete (S5,London) from SC
if S5 is present in SP.
<br>
INSERT INTEGRITY RULE:
<br>
We should not insert (S3,P2,200) into SP
unless S3 is present in SC.
<br>
<br>
(Please study these integrity rules in light of
 the "update anomalies" for non-3NF relations)

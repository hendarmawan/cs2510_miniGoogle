<html>
<head>
<title>SQL AND PL/SQL</title>
</head>
<body>
<h2 align = center>SQL and PL/SQL</h2>
<p align=center>
For the following explanation I will use the following Table:<br>
</p>
TABLE:ROSTER
<table align=center width=100% border=1>
<TR>
<TD>Attributes/ROW#</TD>
<TD>NAME</TD>
<TD>SSN</TD>
<TD>CLASS</TD>
<TD>GRADE</TD>
</TR>

<TR>
<TD>1</TD>
<TD>John</TD>
<TD>111223333</TD>
<TD>CS001</TD>
<TD>87</TD>
</TR>

<TR>
<TD>2</TD>
<TD>John</TD>
<TD>111223333</TD>
<TD>Bio20</TD>
<TD>92</TD>
</TR>

<TR>
<TD>3</TD>
<TD>John</TD>
<TD>111223333</TD>
<TD>Hist045</TD>
<TD>75</TD>
</TR>

<TR>
<TD>4</TD>
<TD>Mary</TD>
<TD>123456987</TD>
<TD>Phil089</TD>
<TD>91</TD>
</TR>

<TR>
<TD>5</TD>
<TD>Mary</TD>
<TD>123456987</TD>
<TD>Art90</TD>
<TD>71</TD>
</TR>

<TR>
<TD>6</TD>
<TD>Moe</TD>
<TD>999876543</TD>
<TD>Phil1600</TD>
<TD>98</TD>
</TR>

<TR>
<TD>7</TD>
<TD>Moe</TD>
<TD>999876543</TD>
<TD>Cs1698</TD>
<TD>97</TD>
</TR>
</table>
<p>
<b><u>SQL</u></b><br>
An SQL statement consists of three parts:<br>
Select, From, and Where<br>
(Note: Not all three parts must be used.  Where is not required)<br><br>
The Select tells SQL which attribute to select IE: Select NAME<br>
The FROM tells SQL which TABLE or VIEW to Select out of IE: From ROSTER<br>
The Where tells SQL what restrictions to apply IE: Where GRADE > '90'<br><br>

So we have: Select NAME From ROSTER Where GRADE > '90'<br>
(Notice that in the Where clause the 90 is surrounded by a single quote.  
This is required because otherwise SQL would look for an Attribute Column called
90.  The single quote identifies 90 as a value and not a column.)<br><br>

This Select, From, Where statement would return the following information:<br>
John<br>
Mary<br>
Moe<br>
Moe<br>

(Notice that 'Moe' is selected twice.  This is because his name shows up twice
in the Table.  To have his Name show up only once you would need to add a modifier
to your Select statement IE: Select UNIQUE NAME)<br><br>

If you want to have more attributes returned, simply add them to your Select statement
separated by commas. IE: Select NAME, CLASS From ROSTER Where GRADE > '90'.<BR>
Returning:<br>
John Bio20<br>
Mary Phil89<br>
Moe Phil1600<br>
Moe Cs1698<br>
</p><br>
Other SQL commands that will be useful when using SQL-PLUS:<br>
CREATE USER:<br>
CREATE USER <i>name</i> IDENTIFIED BY <i>password</i>;<br><br>
CREATE TABLE:<br>
CREATE TABLE [<i>user.</i>]<i>table_name</i><br>
(NAME CHAR(25), SSN NUMBER(9), CLASS CHAR(15));<br><br>
DROP TABLE:<br>
DROP TABLE <i>table_name</i>;<br>

The same commands can be used for creating and removing views, procedures and functions.<br>
 
<p>
<b><u>PL/SQL</u></b><br>
Procedural Language for Structured Query Language<br>
PL/SQL has a general format:<br>
<pre>
DECLARE
     declare block
BEGIN
     body block
EXCEPTION
     exception block
END;
 
</pre>
The declare block would contain any variables that are desired.<br>
The body block would contain the executable code.<br>
The exception block would contain any error handling you wish to add.<br>
(Note: Only the <i>BEGIN body block END;</i> is required)<br><br>

<u>Variables</u><br>
The easiest way to create variables is to declare them explicitly.  To do<br>
so simply declare the following:<br><br>
var_name data_type [<i>constant</i>] [<i>NOT NULL</i>] [[:= || <i>default</i>] <i>initial_value</i>]<br>

example: Student_Name CHAR(25) DEFAULT 'NEW_USER';<br>
         Student_Number NUMBER(9) NOT NULL := 9999999;<br><br>

<i><b>Cursors</b></i><br>
A cursor is a variable that is defined to retrieve data from the database.<br>
It contains an SQL Select statement.  There are two types of cursors, Implicit and Explicit.<br><br>

Implicit:<br>
These cursors are contained in SQL commands that return a single row or no rows.<br>
Examples of this type are INSERT, UPDATE, and DELETE commands.<br><br>

Explicit:<br>
These cursors are defined by the programmer.  The syntax for creating an explicit cursor is:<br>
<i>CURSOR cursor_name IS<br>
Select query<br>
From query;</i><br><br>

Once an explicit cursor has been created it can be used in the body of the procedure.<br>
There are three commands that must be used to get a cursor to work correctly.  They are<br>
OPEN <i>cursor_name</i>; FETCH <i>cursor_name</i> INTO <i>variable_name</i>; Close <i>cursor_name</i>;<br><br>
The OPEN .. command activates the cursor at the beginning of the table specified in the<br>
cursor's definition.  The FETCH .. INTO .. command retrieves the current row's information<br>
and places it in the variable specified in the command.  To retrieve the next row's information<br>
you simply need to make another FETCH .. INTO .. command.  The easiest way to accomplish<br>
this is to use some form of looping structure with either an exit requirement or exit call.<br>
The CLOSE command deactivates the cursor.<br><br>

Example:
<pre>
DELCARE
	s_name CHAR(25);
	s_ssn NUMBER(9);

	CURSOR name_fetcher IS
	Select NAME, SSN
	FROM ROSTER;
BEGIN
	OPEN name_fetcher;
	FETCH name_fetcher INTO s_name, s_ssn;
	CLOSE name_fetcher;
END;
</pre>
This would select the NAME and SSN of the first person in ROSTER into the variables<br>
s_name and s_ssn.  The variables could then be used to update or insert into a new table,<br>
or be tested against values.<br><br>

<i><b>Loops and tests</b></i><br>
IF-THEN-ELSE<br>
The format of the testing blocks is very similar to other IF-THEN-ELSE blocks you have already seen.<br>
<pre>
IF condition THEN
	if_block || NULL;
[ELSIF || ELSE] condition THEN
	else_block || NULL;
END IF;
</pre>
Looping<br>
There are several types of loop formats available in PL/SQL.<br>
CURSOR FOR LOOP<br>
LOOP<br>
WHILE LOOP<br>
FOR LOOP<br><br>

CURSOR FOR LOOP is a loop structure designed specifically for CURSORS.  With the CURSOR FOR LOOP<br>
you do not need to handle OPEN, FETCH, or CLOSE of the CURSOR; the LOOP handles them implicitly.<br>
Syntax:<br>
FOR row_name IN cursor_name LOOP<br>
	loop code<br>
END LOOP;<br><br>
Example:<pre>
FOR Curr_ROW IN name_fetcher LOOP
	IF Curr_ROW.GRADE > 90 THEN
		INSERT INTO DEANSLIST (NAME, SSN)
		VALUES (Curr_ROW.NAME, Curr_ROW.SSN);
	END IF;
END LOOP;
</pre><br>
LOOP is a continuous loop that technically will never end.  When using this command always<br>
allow for a test that will break out of the loop using the EXIT WHEN condition command.<br>
Syntax:<pre>
LOOP
	loop code
	EXIT WHEN (true);
END LOOP;</pre>

WHILE LOOP is the same as a regular while loop command.  It continues until a certain<br>
criteria has been met.<br>
Syntax:<pre>
While condition LOOP
	loop code
END LOOP;
</pre>
FOR LOOP is the same as a regular for (i = 0; i < 9; i++) looping structure.  It will<br>
loop as long as it is within the specified counting range.<br>
Syntax:<pre>
FOR count_variable IN [REVERSE] starting_number .. ending_number LOOP;
	loop code
END LOOP;
</pre> 
PL/SQL is often the programming language used when creating procedures and functions<br>
in a database.  In Oracle 8 the DECLARE keyword is not required when creating variables<br>
in a function or procedure.
</p>

<br><br><a href="gendirpo8.html" align=center>Return to General Directions</a><br>
<a href="cs1555.html" align=center>Return to Cs 1555</a>

</body>
</html>
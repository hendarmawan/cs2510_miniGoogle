   PROFESSOR: WE NOW DISCUSS RELATIONAL DATABASE, WHY WE LIKE
THAT, BECAUSE IT OFFERS A VERY SIMPLE AND
VERY INTUITIVE VIEW OF DATA.  AND WE CAN
SPEND TWO MINUTES TO EXPLAIN IT TO ANY
PERSON ON THE STREET.  AND THEY WILL BE
ABLE TO UNDERSTAND RELATIONAL DATABASE.
CANNOT SAY THE SAME ABOUT NETWORK OR
HIERARCHY OR OBJECT ORIENTED APPROACH.
THE RELATION HAS THIS ADVANTAGE.
     IT'S BASICALLY A COLLECTION OF ROWS.
BUT TO DEFINE IT MORE FORMALLY A
COLLECTION OF TIME VARYING, ALWAYS
CHANGING, NORMALIZED -- WE'LL COME TO THAT
LATER -- RELATIONS OF ASSORTED DEGREES.
WE'LL COME THAT THAT LATER.  SO EVERY
RELATION YOU SHOULD HAVE INSTALLED THAT IN
THE FORM OF A FILE.  IT CONTAINS UNIFORM
INSTANCES, NAMELY THERE IS ONLY ONE RECORD
TYPE.  AND CONCEPTUALLY THE RECORDS HAVE
NO PARTICULAR ORDER, MEANING THAT YOU CAN
PER MUTE THE PROGRAMS AT WILL FROM THE
CONCEPTUAL POINT OF VIEW, DOESN'T CHANGE
THE THING.  THE NEXT ONE IS SIGNIFICANT.
EVERY FIELD IS SINGLE-VALUED.  BY THAT I
MEAN WHAT WE PUT INTO THE TABLE, THESE ARE
ATOMS.  THAT'S IT.  ONLY STRINGS AND
NUMBERS AND NOTHING ELSE.  IN OTHER WORDS,
THIS WILL DISALLOW SETS.  WE CANNOT PUT
SETS THERE BECAUSE THESE WILL MAKE IT
MULTIVALUED.  WE SHOULD NOT HAVE NESTED
TABLES.  ALL THESE WILL NOT BE ALLOWED.
THIS IS A VERY STRONG CONSTRAINT.
     NAMELY, ALL THESE ELEMENTS IN THIS
RELATIONAL TABLE MUST BE ATOMS.  NOW IN
REALITY, SOME OF THESE CONSTRAINTS COULD
BE VIOLATED.  SO IF YOU LOOK AT SOME OLDER
DATABASE SYSTEMS, YOU CANNOT ARBITRARILY
PER MUTE THE COLUMNS.  BECAUSE THE WAY
IT'S STORED, THE RECORD IS SIGNIFICANT.
SO IT MAY VIOLATE THAT. AND SOME SYSTEM
MAY EVEN VIOLATE THIS SINGLE VALUE ASSUMES
AND THEY ALLOW POINTERS TO BE THERE,
ESPECIALLY NOW WHEN WE HAVE SO-CALLED
MULTIMEDIA DATABASE.  FOR MULTIMEDIA
DATABASE SOMETIMES IT'S NOT VERY
ECONOMICAL TO STORE, LET'S SAY, A VIDEO
CLIP IN YOUR DATABASE.  THE VIDEO CLIP IS
VERY BIG.  SEVERAL MEGABYTES EASILY.  OR
THE VOICE OR IMAGE.  THEY ARE BIG FILES
COMPARED TO THE OTHER PART.  SO FOR THOSE
SOMETIMES YOU WILL PREFER TO HAVE A
POINTER THAT POINT AT THE IMAGE THAT CAN
MAKE IMPLEMENT MORE CLEAR.
     OKAY.  SO WE ALL UNDERSTAND IN
PRACTICE WHEN YOU IMPLEMENT SOMETHING,
HAVE YOU TO MAKE CERTAIN COMPROMISES BUT
AT LEAST THESE ARE MAIN CONCEPTS.  SO NOW
LET'S LOOK AT WHAT WE HAVE.  SO BASICALLY
RELATIONAL DATABASE IS JUST A TABLE.  SO
HERE WE HAVE FOR COLUMNS.  THESE ARE
ACTUALLY OUT OF FOUR ATTRIBUTES AND EVERY
ATTRIBUTE HAS A ATTRIBUTE NAME.  S NUMBER,
S NAME, STATUS AND CITY.  THE NUMBER OF
ATTRIBUTES IN A TABLE IS CALLED IT'S
DEGREE.  AND IN THIS TABLE WE HAVE EITHER
WE CAN CALL THEM TUPLES OR ROWS OR
RECORDS.  THEY ALL MEAN THE SAME THING.
TUPLES IS MORE MATHEMATICAL TERM.  ROWS
REFERS TO THE ROWS IN THE TABLE AND
RECORDS IS LOOKING AT IT FROM THE FILE
STRUCTURE POINT OF VIEW.  NOW IN THIS
TABLE WE HAVE FIVE ROWS OF FIVE TUPLES.
THEN WE SAY THE TABLE HAS CARDINALITY
FIVE.  SO CARDINALITY IS JUST ANOTHER
FANCY WAY OF SAYING NUMBER OF ROWS.  EVERY
ATTRIBUTE CAN TAKE ON A CERTAIN VALUE FROM
A CERTAIN DOMAIN LIKE THIS KEY.  S ONE,
S2, THROUGH S5 IS ALWAYS A LETTER FOLLOWED
BY NUMBER.  THAT'S IT'S DOMAIN.  THE NAME
MAY BE JUST A STRING, THAT'S IT'S DOMAIN
AND STATUS IS TWO DIGIT AND CITY IS A
STRING.  SO, THE ALL POSSIBLE VALUES THAT
A CERTAIN ATTRIBUTE CAN TAKE ON IS
REFERRED TO AS ITS DOMAIN.  OKAY.  SO HERE
IS A SUMMARY OF THE KEY TERMS AND THE
CORRESPONDING LAYMAN'S TERM.  A RELATION
IS A MATHEMATICAL TERM SO IN LAYMAN'S TERM
IT'S A TABLE.
     EVERY ROW IS CALLED A TUPLE.  SO IT'S
ALSO CALLED A RECORD.
     AN ATTRIBUTE, THAT'S A COLUMN OR A
FIELD.  CARDINALITY IS THE NUMBER OF ROWS.
DEGREES NUMBER OF COLUMNS.  EVERY RELATION
MUST HAVE A PRIMARY KEY WHICH UNIQUELY
IDENTIFY EVERY TUPLE, EVERY ROW.  IT'S
THE -- IS THE KEY ALSO A SINGLE ATTRIBUTE?
YES OR NO?
     STUDENT:   NO.
     PROFESSOR:   NO.  BECAUSE SOMETIMES
WE CANNOT USE A SINGLE ATTRIBUTE WE HAVE
TO USE SEVERAL ATTRIBUTE TO FORM A
COMPOSITE KEY.  BUT IF YOU WANT
EFFICIENCY, YOU ALWAYS TRY TO STRIVE FOR A
SINGLE KEY, SUCH AS ASSOCIATE SECURITY
NUMBER, THINGS LIKE THAT.
     FINALLY THE DOMAIN REFERS TO THE ALL
POSSIBLE VALUES.  AND DOMAINS ARE
BASICALLY JUST DATA TYPE.  IF I HAVE
DOMAIN IS THAT NAMES I USE THAT AS
CHARACTER STREAM.  IF I HAVE A DOMAIN
WHICH CONSISTS OF WEIGHT, THEN PROBABLY
JUST NUMBERS AND POSITIVE NUMBERS BECAUSE
YOU CANNOT HAVE NEGATIVE NUMBERS WITH
WEIGHT.  BASICALLY JUST DATA TYPES.
     AND THIS ALSO THE WAY THAT WE CAN PUT
IN THE CONSTRAINT OR INTEGRITY CONSTRAINT,
SEMANTIC CONSTRAINT.
     HERE IS ARE FIRST RUN IN SQL
LANGUAGE.  THIS IS WHAT YOU WILL USE TO
ACCESS DATABASE.  THE NICE THING ABOUT
THIS LANGUAGE THAT IS SO EASY TO TEACH
YOU, THAT IS THE BASIC AND THAT YOU CAN
PUT THAT INTO THE ORACLE INTERFACE TO
ACCESS THE DATABASE INTERACTIVELY.  OR WE
CAN PUT THAT INTO SOME FORM SO WE CAN ASK
THEM THROUGH INTERNET INTERFACE.
     SO, THE STRUCTURE OF THIS SQL
LANGUAGE, THREE KEY WORDS.  SELECT FROM
WHERE.  LATER YOU WILL GET MORE COMPLEX
BUT THE BASIC THING IS VERY SIMPLE, SELECT
FROM WHERE.  SELECT WILL LIST THE
ATTRIBUTES IN QUESTION.  WHAT ATTRIBUTE I
WANT TO SELECT.  SO YOU CAN IMAGINE SELECT
TOYS PICK THE COLUMNS.
     FROM, THAT WILL NAME THE UNDERLYING
RELATIONS.  FROM WHAT RELATIONS DO I
OBTAIN DATA.  WHERE?  THAT'S THE
CONDITION.
     SO, YOU DON'T KNOW THE LANGUAGE, YOU
LOOK AT THE STRUCTURE YOU CAN SEE ROUGHLY
WHAT I'M GETTING AT.  SO I'M TRYING TO
EXTRACT INFORMATION FROM TWO RELATIONS OR
TWO TABLES AND THEY ARE CALLED P AND SP.
PART AND SUPPLIER PART.  AND THE MEAN --
I'M PICKING ALL POSSIBLE ATTRIBUTES FROM
THESE TWO TABLES.  WHAT DOES THIS
CONDITION SAY?  YEAH?
     STUDENT:   THE ATTRIBUTE IS IT LIKE
THE P.
     PROFESSOR:   P NUMBER.
     STUDENT:   IT'S WHERE THE P NUMBER
AND P TABLE IS EQUAL P TABLE AND SP TABLE.
     PROFESSOR:   VERY GOOD.  IN OTHER
WORDS THEY MATCH.  I'M TRYING TO MATCH THE
RECORD ON THE PRODUCT TABLE -- PART TABLE
ON ONE HAND AND SUPPLIER PART TABLE ON THE
OTHER HAND AND MAKING SURE THEY MENTION.
IS THAT CALLED EQUAL JOIN.  WE'LL GO INTO
THAT LATER.  VERY POWERFUL OPERATOR TO
MATCH TABLE.  BUT WHAT I'M TRYING TO SAY
THAT IT IS QUITE CLEAR, IN OTHER WORDS
THAT'S ONE OF THE BEAUTY, INTUITIVE PART
IS CLEAR.  THAT'S THE BEAUTY OF SQL.  IT'S
QUITE INTUITIVE.  CANNOT SAY THIS FOR VERY
COMPLEX QUERIES THE POINT I WANT IT GET
ACROSS HERE, HERE WE ARE TRYING TO MATCH
TWO KEYS.  THE PART NUMBERS.  AND THEY
HAVE THE SAME UNDERLYING DOMAIN.  THAT
MAKES SENSE.  IT'S A SENSIBLE QUERY.  IF
YOU LOOK AT THIS ONE IT'S NOT THAT
SENSIBLE.
     BECAUSE YOU ARE TRYING TO MATCH
WEIGHT AND QUANTITY.  JUST DOESN'T MAKE
SENSE.  IN OTHER WORDS, IF THE UNDERLYING
DOMAIN'S NOT THE SAME, QUERIES MAY NOT BE
MEANINGFUL.  SO IN FACT ONE COMPUTE USER
INTERFACE -- IT HAS SEMANTIC CONSTRAINT SO
YOU CANNOT DO SOMETHING WAY OUT OF LINE.
OKAY.  WHAT COMES NEXT IS A TERM WHICH IS
ALSO FROM MATHEMATICS CALLED CARTESIANS
PRODUCT.  IT IS BASICALLY TAKING TWO SETS
AND FORM ALL OF THE PARTS OF COMBINATIONS
FROM THESE TWO SETS.  THAT'S CALLED
CARTESIAN PRODUCT.  IF I GIVE ANY BIG
EXAMPLE, IT WILL JUST BE TOO MANY TUPLES.
LET'S SAY I HAVE TWO SETS.  ONE SET IS
SUPPLY NUMBERS ONE TWO, THREE.  THE OTHER
SET IS THE NAMES, SMITH AND DOE.  IF I
WANT TO LOOK AT ALL OF THE PARTS -- ALL
POSSIBLE COMBINATIONS OF THESE TWO SETS, I
WILL TAKE THEIR CARTESIAN PRODUCT.  THE
NOTATION IS USUALLY ACROSS, SO I HAVE TWO
SETS I TAKE ACROSS AND THIS GIVE ME ALL
PROBLEM COMBINATIONS.  OR IF YOU PREFER,
YOU CAN IMAGINE YOU HAVE TWO TABLES, ONE
TABLE HAVE THIS S NUMBERS ONE, TWO, THREE.
THE OTHER TABLE HAS THE NAMES.  AND WHAT
IS A CARTESIAN PRODUCT?  YOU TRY -- IT
TRIES TO GIVE YOU ALL OF THE COMBINATIONS.
SO THIS GIVE YOU THREE TIMES TWO, SIX
COMBINATIONS.  SO THE CARTESIAN PRODUCT IS
QUITE EXPENSIVE BECAUSE IF YOU HAVE TWO
BIG SETS, EVERY SET HAS A MILLION RECORDS.
IF YOU DO A CARTESIAN PRODUCT YOU'RE IN
TROUBLE BECAUSE YOU END WITH UP WITH A
VERY BIG SET.  THIS IS NOT ADVISABLE IF
YOU HAVE VERY LARGE SETS BUT VERY USEFUL
BECAUSE THIS IS THE BASIS OF SUCH NICE
CONCEPT AS EQUAL JOIN WHICH WE JUST
MENTIONED IS HOW YOU CAN COMBINE THE ROWS
OR RECORDS FROM DIFFERENT TABLES OF
DIFFERENT FILES.
     OKAY.  FINALLY, LET ME JUST GIVE YOU
THE MATHEMATICAL DEFINITION.  NOW I WOULD
JUST THROW THIS AT YOU AND ASK YOU TO LOOK
AT IT MORE AT HOME AND ALSO STUDY THE
CORRESPONDING SECTIONS IN THE TEXTBOOK.
BECAUSE THERE IS BASICALLY NOTHING TO IT.
JUST A WAY TO SAY FORMALLY WHAT WE MEAN BY
RELATION.  BASICALLY RELATION CONSISTS OF
THE NUMBER OF DIFFERENT DOMAINS, D1, D2
AND DEFINED BY HAVING A HEADER AND BODY.
SO THE HEADER BASICALLY GIVE US NAME OF
ATTRIBUTES.  IT'S LIKE THE HEAD OF THE
TABLE.  SO THE HEADER GIVE US LIKE THE
DIFFERENT ATTRIBUTE NAMES AND THE
CORRESPONDING DOMAINS.
     AND THE BODY PART DOES THE ACTUAL
TABLE.  ACTUAL TABLE WILL ACTUALLY HAVE
THE REAL VALUES FOR EACH ENTRY.  SO THIS
VALUE ARE SELECTED FROM UNDERLYING DOMAIN.
SO THE BODY IS CALLED AN INSTANCE.  AND
HERE IS EXAMPLE.  SO, THE RELATION IS
CALLED R AND HAS THE FOLLOWING ATTRIBUTES
FOUR ATTRIBUTES SO THE DEGREE IS FOUR.
AND EACH ONE HAS A CORRESPONDING DOMAIN.
I JUST USE THE SAME NOTATION BUT THESE ARE
SETS.  AND ANY INSTANCE LIKE THIS IS WHERE
EACH ATTRIBUTE TAKES OUR SPECIFIC VALUE.
SO YOU CAN ALSO WRITE IT LONG WAY SAYING S
NUMBER IS S1, S NAME IS SMITH, STATUS 20,
CITY LONDON.  OKAY.  SO, THE PROPERTIES OF
THE RELATIONS FIRST OF ALL, NO DUPLICATES.
REMEMBER WE HAVE THIS DISCUSSION LAST WEEK
WHEN SOMEONE SAY WHY DON'T WE PUT TWO
IDENTICAL EMPLOYEE RECORD INTO THE
RELATION.  YOU CANNOT DO THAT.  WHY WE
DON'T LIKE IT?  WHY WE DON'T LIKE TWO
RECORDS EXACTLY THE SAME?  YES?
     STUDENT:   IT'S A WASTE OF SPACE.
     PROFESSOR:   NOT ONLY A WASTE ALSO
WILL CAUSE --
     STUDENT:   VIOLATES INTEGRITY.
     STUDENT:   I WAS GOING TO SAY WOULD
BE A BETTER WAY TO DO IT IF YOU HAD A
DUPLICATE.
     PROFESSOR:   RIGHT.  BECAUSE ONCE
HAVE YOU DUPLICATES CHANCES ARE YOU MISSED
SAME INFORMATION TWICE AND IF YOU MAKE ANY
CHANGES THEY BECOME DIFFERENT YOU'RE IN
BIG TROUBLE.  SO WE MAKE SURE WE HAVE ONLY
UNIQUE RECORDS IN THE SYSTEM.  THIS IS
VERY IMPORTANT.  NO DUPLICATES.  SO YOU
JUST CANNOT ALLOW TO HAVE TWO IDENTICAL
EMPLOYEE RECORDS.
     CONCEPTUALLY THE TUPLES ARE NOT
ORDERED.
     ATTRIBUTES ARE ALSO UNORDERED.  IN
OTHER WORDS YOU CAN PER MUTE THE TABLE ANY
WAY YOU WANT.  AND FINALLY, THIS IS VERY
IMPORTANT.  ATTRIBUTES VALUES ARE ATOMIC.
JUST STRINGS AND NUMBERS.  NOTHING ELSE.
BUT LIKE I SAID, THIS IS ALSO NOT TRUE IN
PRACTICE BECAUSE ONCE WE HAVE A NEW
DATABASE SYSTEM FOR MULTIMEDIA WE TEND TO
POINTERS.  OKAY.  JUST ONE LAST SLIDE AND
I'LL LET YOU GO.  THESE ARE DIFFERENT
KINDS OF RELATION WE TALK ABOUT.  LATER
WE'LL BE -- LATER WILL BE USEFUL.  NOW,
WHEN WE FORMULATE DATABASE, WHEN YOU FIRST
DESIGN DATABASE SYSTEM LIKE IN YOUR FIRST
EXERCISE, YOU CONSTRUCT THE BASE
RELATIONS.  THESE RELATIONS THAT ACTUALLY
EXIST, THAT ACTUALLY YOU STORE IN YOUR
DATABASE SYSTEM.  OKAY?  SO YOU CALL THOSE
BASE TABLE IN SQL.  FROM THE BASE
RELATIONS, WE CAN THEN CONSTRUCT VIRTUAL
RELATIONS OR VIEWS.  WHY DO WE NEED VIEWS?
SO FOR DIFFERENT USERS THEY MAY BE ABLE TO
SEE THE DATA DIFFERENTLY, SO WE CAN ALSO
MAKE SURE THAT THEY DON'T SEE INFORMATION
THAT'S IRRELEVANT OR CONFIDENTIAL.  THAT'S
A DERIVED RELATION SO VIEWS ARE VIRTUAL
RELATIONS.  THEY ARE CONSTRUCTED.
     SNAPSHOTS.  LET'S SAY I'M DOING BACK
UP.  WHEN I DO BACK UP ON SEPTEMBER 7,
TODAY, I STORE MY BASE TABLES OR EVEN
SOMETIMES VIRTUAL RELATIONS INTO SOME BACK
UP STORAGE DEVICE.  IT'S A SNAPSHOT.  WHY?
I TAKE A PICTURE, THE PICTURE WILL THEN
NEVER CHANGE.  WHY DO I DO THIS BACK UP?
STUPID QUESTION, RIGHT?  ABOUT WHY?  YES?
     STUDENT:   SOMETIMES WHENEVER YOU'RE
WORKING ON YOUR DATABASE YOU'RE MAKING A
MISTAKE THAT'S IRREVOCABLE AND YOU HAVE TO
GO BACK TO THE LAST BEST COPY HAVE YOU.
     PROFESSOR:   RIGHT.  IN OTHER WORDS
LET'S SAY THAT WE ARE OPERATING IN TIME.
SO HERE IS TIME.  SO TODAY IS SEPTEMBER
THE 5.  I DO MY BACK UP SO I HAVE MY
SNAPSHOTS.  I KEEP ON GOING AND THEN MY
SYSTEM CRASH HERE.  WIPING OUT MY
DATABASE.  WHAT DO I DO?  SO THIS IS NOW
SEPTEMBER 8.  BUT LUCKILY I HAVE THIS BACK
UP, SNAPSHOT.  SO I GO BACK HERE.  THEN
WHAT DO I DO?
     STUDENT:   REINPUT THE CHANGES.
     PROFESSOR:   REINPUT THE CHANGES.  IN
OTHER WORDS, IN DATABASE WE CALL THEM
TRANSACTIONS.  SO I GO BACK TO MY MOST
RECENT BACK UP AND RUSE THE USE THE
RECONSTRUCT -- I RECONSTRUCT THIS.
     WORST COMES TO WORST I OPERATE WITH
THIS.  THAT I LOST ALL THESE TRANSACTIONS,
LOST THREE DAYS OF WORK BUT STILL I'M ABLE
TO SURVIVE.  IF YOU DON'T HAVE THAT YOU
MAY BE IN BILLING TROUBLE.
     STUDENT:   IS THAT THE SAME THING
VISUAL BASIC IS DOING WHEN IT CREATES WORK
SPACE FOR DATABASE.
     PROFESSOR:   COULD YOU USE THAT IF
YOU BACK UP WORK SPACE.  THIS IS OLD
CONCEPT, SO-CALLED CHECK POINT RESTART.
THIS IS MY CHECK POINT.  OF COURSE YOU
DON'T HAVE ONE SINGLE CHECK POINT YOU KEEP
ON GOING AND THEN WHEN YOU'RE IN TROUBLE
YOU RESTART FROM YOUR MOST RECENT CHECK
POINT.  YEAH.
     STUDENT:   IF YOU DO A CALL BACK ON
TRANSACTION.
     PROFESSOR:   YOU CAN DO THE SAME.
IT'S VERY IMPORTANT ESPECIALLY FOR
DATABASE.  OKAY.  YOUR PROGRAMMING
SOMETIMES IS LESS WORRISOME BUT IN
DATABASE YOU CANNOT AVOID -- TOLERATE ANY
LOSSES.  TWO MORE TERMS AND I LET YOU GO.
QUERY RESULT IS WHERE YOU STORE THE
TEMPORARY RESULTS AND TEMPORARY RELATIONS,
ANYTHING THAT YOU CONSTRUCT THAT YOU MAY
NOT KEEP PERMANENT.  SO THAT'S IT.  SO DO
EXERCISE ONE.

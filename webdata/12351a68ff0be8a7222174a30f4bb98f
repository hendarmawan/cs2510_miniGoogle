<html>

<head>
<meta http-equiv="Content-Language" content="en-us">
<meta name="GENERATOR" content="Microsoft FrontPage 5.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
<title>The Limitations of the CORBA Object Model</title>
</head>

<body>

<p align="center"><a href="page1.htm">
<img border="0" src="previous.gif" align="left" width="26" height="26"></a><a href="page3.htm"><img border="0" src="next.gif" align="right" width="26" height="26"></a></p>

<p align="center"><u><font size="6">The Limitations of the CORBA Object Model</font></u></p>
<ul>
  <li>
  <p align="left"><span style="font-family: Times New Roman"><font size="5">
  <font color="#FF0000">No 
  standard way to deploy object implementations.</font> </font></span>
  <font face="Times New Roman" size="5">CORBA deployment involves distributing 
  object implementations, installing those implementations in their execution 
  contexts, and activating the implementations in an ORB. Developers had to develop ad hoc 
  strategies to instantiate all objects in the system and because objects may 
  depend on one another, implementation is complicated and non-portable. </font>
  </li>
</ul>
  <p align="left">&nbsp;<ul>
  <li>
  <p align="left"><span style="font-family: Times New Roman"><font size="5">
  <font color="#FF0000">Limited standard support for common CORBA server programming patterns.</font>&nbsp; 
  The CORBA family of specifications provides a rich set of features to 
  implement servers. For example, the CORBA 2.2 specification introduced the 
  Portable Object Adapter (POA), which is the ORB mechanism that forwards client 
  requests to concrete object implementations. In many application domains, 
  however, only a limited subset of these features is ever used repeatedly; yet 
  server developers face a steep learning curve to understand how to configure 
  POA policies selectively to obtain their desired behavior.</font></span></li>
</ul>
  <p align="left">&nbsp;<ul>
  <li>
  <p align="left"><span style="font-family: Times New Roman"><font size="5">
  <font color="#FF0000">Limited extension of object functionality.</font> In the traditional CORBA object 
  model, objects can only be extended via inheritance. Multiple inheritance in CORBA IDL is fragile because overloading is not supported; therefore, multiple 
  inheritance has limited application.</font></span></li>
</ul>
  <p align="left">&nbsp;<ul>
  <li>
  <p align="left"><span style="font-family: Times New Roman"><font size="5">
  <font color="#FF0000">Availability of CORBA Object Services not defined in advance.</font>&nbsp; </font>
  </span><font size="5" face="Times New Roman">Developers had to develop adhoc 
  strategies to configure and activate missing runtime services when deploying a system.
  </font></li>
</ul>
  <p align="left">&nbsp;<ul>
  <li>
  <p class="MsoNormal"><font size="5"><font color="#FF0000">No standard object life cycle management.</font> 
  No standard interface required developers to define auxiliary interfaces to 
  control object life cycles. </font></li>
</ul>
<p class="MsoNormal"><font size="5">&nbsp;In conclusion, the inadequacies just 
mentioned led to implementations of objects that are hard to design, reuse, 
deploy, maintain, and extend. Everything that a reusable component should not 
be!!!</font></p>
<p align="left">&nbsp;</p>

</body>

</html>
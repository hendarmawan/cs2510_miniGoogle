<html>
<head> 
<title> CS 2510: Assignment 2 Requirements/Clarifications </title>
</head>
<body bgcolor="#ffffff" text="#000000">
<div align=center>
Assignment 2 Requirements/Clarifications
</div>
<br>
<ul>
<li> <p> servers should be concurrent. i.e., should handle messages from
multiple clients/servers without blocking. note that this gives rise to a
local ME problem in accessing the request queue.
</p>
<li> <p> multiple clients can connect to a single server.
</p>
<li> <p> it's not necessary to have a name server. the name service can
be provided through a common file. the file may also store information 
like server id, client id and the group information (may vary with 
different algorithms.
</p>
<li> <p> the client should contact a single server. the server should 
contact the other servers according to the algorithm. the user running the 
client program should have the liberty of choosing which server to contact.
</p>
<li> <p> on getting access to the CS, the client can use the UNIX commands
more/less to read the file or vi to edit the file.
</p>
<li> <p> it can be assumed that the client does not behave maliciously.
</p>
<li> <p> it can be assumed that the servers and clients are up all the time.
if anything crashes, you are allowed to restart everything.
</p>
<li> <p> the servers and clients should be robust. i.e., not crash during 
the normal course of operation.
</p>
<li> <p> the readers/writers problem has to be solved. i.e., readers should 
be able to access the critical section simultaneously.
</p>
<li> <p> it's very important to print diagnostic messages to notify events like
message arrival and other events specific to the algorithm for the grader to 
verify that the algorithm is actually works. the client should not get access
to the critical section magically. e.g., if a server gets a token, a message 
should be printed.
</p>
<li> <p> you're algorithm should be fair and should not cause starvation.
</p>
<li> <p> timeout values, and other variables, like which server to connect to,
should be configurable either as command line arguments or as parameters in
a configuration file. 
</p>
<li> <p> you've to define metrics to evaluate your algorithm and argue why 
you're algorithm is good. write a small report on this.
</p>
<li> <p> extra credit (5 %): interworking with other groups. i.e. i should be 
able to use X's client & Y's server, etc.
</p>
<li> <p> extra credit (10 %): implementation of a more complex/efficient 
algorithm (raymond's or maekawa's). you've to argue why it's a better algorithm
using the metrics you've defined.
</p>
<li> <p> remember that there are points for efficient and sensible design, good
user interfaces, etc. even if you meet all the requirements, you may lose some
points here.
</p>
</ul>
</body>

<html xmlns:v="urn:schemas-microsoft-com:vml"
xmlns:o="urn:schemas-microsoft-com:office:office"
xmlns:w="urn:schemas-microsoft-com:office:word"
xmlns="http://www.w3.org/TR/REC-html40">

<head>
<meta http-equiv=Content-Type content="text/html; charset=iso-8859-1">
<meta name=ProgId content=Word.Document>
<meta name=Generator content="Microsoft Word 9">
<meta name=Originator content="Microsoft Word 9">
<link rel=File-List href="./pcspim_files/filelist.xml">
<title>Unit 1 - Assembly Language Overview and the SPIM Simulator</title>
<!--[if gte mso 9]><xml>
 <o:DocumentProperties>
  <o:Author>don</o:Author>
  <o:LastAuthor>don</o:LastAuthor>
  <o:Revision>2</o:Revision>
  <o:TotalTime>4</o:TotalTime>
  <o:Created>2001-02-01T17:50:00Z</o:Created>
  <o:LastSaved>2001-02-01T17:54:00Z</o:LastSaved>
  <o:Pages>1</o:Pages>
  <o:Words>401</o:Words>
  <o:Characters>2289</o:Characters>
  <o:Company>University of Pittsburgh Optics Lab</o:Company>
  <o:Lines>19</o:Lines>
  <o:Paragraphs>4</o:Paragraphs>
  <o:CharactersWithSpaces>2811</o:CharactersWithSpaces>
  <o:Version>9.2720</o:Version>
 </o:DocumentProperties>
</xml><![endif]-->
<style>
<!--
 /* Font Definitions */
@font-face
	{font-family:Wingdings;
	panose-1:5 0 0 0 0 0 0 0 0 0;
	mso-font-charset:2;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:0 268435456 0 0 -2147483648 0;}
 /* Style Definitions */
p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-parent:"";
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p
	{font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
pre
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:10.0pt;
	font-family:"Courier New";
	mso-fareast-font-family:"Courier New";}
@page Section1
	{size:8.5in 11.0in;
	margin:1.0in 1.25in 1.0in 1.25in;
	mso-header-margin:.5in;
	mso-footer-margin:.5in;
	mso-paper-source:0;}
div.Section1
	{page:Section1;}
 /* List Definitions */
@list l0
	{mso-list-id:12734393;
	mso-list-type:hybrid;
	mso-list-template-ids:1320705214 1308366532 -1410679058 1155662766 -1928313252 -1737217262 -1246702072 1767285596 -1430106628 243402860;}
@list l0:level1
	{mso-level-number-format:bullet;
	mso-level-text:\F0B7;
	mso-level-tab-stop:.5in;
	mso-level-number-position:left;
	text-indent:-.25in;
	mso-ansi-font-size:10.0pt;
	font-family:Symbol;}
@list l1
	{mso-list-id:294876225;
	mso-list-type:hybrid;
	mso-list-template-ids:1434877248 1632289034 1401577890 510193882 1864946366 1739369770 -1055767058 248406956 513962894 -1366274958;}
@list l1:level1
	{mso-level-number-format:bullet;
	mso-level-text:\F0B7;
	mso-level-tab-stop:.5in;
	mso-level-number-position:left;
	text-indent:-.25in;
	mso-ansi-font-size:10.0pt;
	font-family:Symbol;}
@list l2
	{mso-list-id:1050421687;
	mso-list-type:hybrid;
	mso-list-template-ids:1036943268 1349299904 -1960397638 -824175384 1492303052 -2126365026 -998715558 1003943292 1629899206 -1953999514;}
ol
	{margin-bottom:0in;}
ul
	{margin-bottom:0in;}
-->
</style>
<!--[if gte mso 9]><xml>
 <o:shapedefaults v:ext="edit" spidmax="1027"/>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <o:shapelayout v:ext="edit">
  <o:idmap v:ext="edit" data="1"/>
 </o:shapelayout></xml><![endif]-->
<meta name="Microsoft Border" content=none>
</head>

<body bgcolor=white background="..\Unitbkg.jpg" lang=EN-US link=blue
vlink=blue style='tab-interval:.5in'>

<div class=Section1>

<h1 align=center style='text-align:center'>Unit 3 - Instruction Set Overview
and the SPIM Simulator</h1>

<h2>Instruction Set Overview:</h2>

<p class=MsoNormal>For an overview of the MIPS R2000 Assembly language
instructions, look <a
href="http://www.cs.pitt.edu/~don/coe1502/Reference/InstructionSet.html">here</a>.
</p>

<h2>Installing SPIM:</h2>

<ul type=disc>
 <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l1 level1 lfo1;tab-stops:list .5in'>Run the SPIM Installation
     File from the class directory I:\1502-prj\1502\Spimwin.exe and install
     into your home directory (i.e. I:\<groupname>\PCSpim). </li>
 <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l1 level1 lfo1;tab-stops:list .5in'>A new folder will be created
     on the local portion of your Start/Programs menu called <i>PCSpim for Windows</i>
     with a shortcut <i>PCSpim for Windows</i>. Use this shortcut to start
     PCSpim. </li>
</ul>

<h2>Introduction to SPIM:</h2>

<ul type=disc>
 <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l0 level1 lfo2;tab-stops:list .5in'>Download the the example file
     <a href="./Unit3Example.s">Unit3Example.s</a> into the PCSpim directory.</li>
 <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l0 level1 lfo2;tab-stops:list .5in'>Start PCSpim.</li>
 <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l0 level1 lfo2;tab-stops:list .5in'>Go to File/Open and open the
     file Unit1Example.s</li>
 <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l0 level1 lfo2;tab-stops:list .5in'>Display all of the status
     windows by selecting <i>Window/Tile</i>. </li>
 <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l0 level1 lfo2;tab-stops:list .5in'>Step through the example file
     using the <i>Simulator/Single Step</i> menu item or the <i>F10</i> key.
     Observe the changes in the registers in the <i>Registers</i> window as
     instructions are executed. </li>
</ul>

<h2>Assignment:</h2>

<p class=MsoNormal>You are to write an assembly language program which will
read a packed string of eight characters from a specified memory location,
check to make sure that each character is a digit from (0-9), and then convert
the string of digits into its corresponding integer value and place this value
in a specified register.&nbsp; If a character is not recognized as a decimal
digit, then call an error routine which sets the value of the result register
to 0xFFFFFFFF.&nbsp; The string will be initialized into memory using a <i>.data</i>
section in your assembly language code to store an ascii string 8 characters: </p>

<pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .data</pre><pre>STRING1:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .asciiz &quot;76543210&quot;</pre>

<p class=MsoNormal>&nbsp; </p>

<p>The above code will load the ascii character '7' into the byte at address
STRING1, the ascii character '6' into the byte at address (STRING1 + 1), etc.  The ASCII string is terminated by a NULL (value 0) character.</p>

<p>It may be useful to use the R2000 Assembly language routines <b>mult <i>rs, </i>rt</b>
; <b>div <i>rs</i>, <i>rt</i></b> ; and <b>mflo <i>rd, rs</i></b> </p>

<p>Here is a rough sketch of an algorithm that can be used to accomplish this:
</p>

<ol start=1 type=1>
 <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l2 level1 lfo3;tab-stops:list .5in'>Clear the result and index registers</li>
 <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l2 level1 lfo3;tab-stops:list .5in'>Load the byte at label
     STRING1 using your index register into a register $<i>x</i></li>
 <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l2 level1 lfo3;tab-stops:list .5in'>Check to make sure that the
     character is not the NULL character.  If so, branch out of the loop.</li>
 <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l2 level1 lfo3;tab-stops:list .5in'>Check to make sure that the
     character is a decimal digit (between 0x30 and 0x39).  If not, branch to an error routine.</li>
 <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l2 level1 lfo3;tab-stops:list .5in'>Multiply the result register
     by 10.</li>
 <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l2 level1 lfo3;tab-stops:list .5in'>Subtract 0x30 from the value (to convert from ASCII to binary) and add it to the result register.</li>
 <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l2 level1 lfo3;tab-stops:list .5in'>Return to step 2.</li>
 <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l2 level1 lfo3;tab-stops:list .5in'>Return to calling routing (jr
     $31)</li>
</ol>

<br>

<p class=MsoNormal>Remember, DO not use register $0, $1 or $31 in your code
(except for jr $31 to return), SPIM reserves them for its use. </p>

</div>

</body>

</html>

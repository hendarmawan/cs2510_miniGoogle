<html><head></head><body><h1>A Testbed for Personal HealthCare Slow Intelligence System</h1>
In what follows, we describe
a Testbed for Personal HealthCare Slow Intelligence System.
This testbed can be used for component-based SIS development.
<div id="sys_desc"><font color="blue"><h2>System Description</h2></font>
<p>The Personal HealthCare Slow Intelligence System (PHSIS) consists of many types of components, each type serves with certain funtionality, working together to solve complex problems. Components are communicating with each other through message, check out <a href="#msg">Message Types</a>.
</p>
<p> Below is a list of predesigned components right out of the box, you may also develop your own components of an existing type, or even a totally new type. You can check out <a href="#roles">Components / Roles</a> for details.</p>
<p>
<b>(1) SIS Server:</b> is technically not a component, but a forwarding center that processes and dispatches messages based on an existing routing table constructed with Register messages.
</p>
<p>
<b>(1) GUI:</b> is a predesigned Monitor component that monitors all <b>Basic/Super/Advertiser</b> components within the current scope in the system. All properly registered <b>Basic/Super/Advertiser</b> component will have its control panel here. You can adjust behaviors of each component individually.
</p>
<p>
<b>(3) Input Processor:</b> The Input Processor is a predesigned Basic
component which takes in data stream generated by PaceTech machine and outputs readings
for the various vital signals such as Blood Pressure, SPO2, EKG, etc.
</p><p>
<b>(4) Uploader:</b> is a predesigned Advertiser component
which processes and propagates information to the outside world so authorized personnel
can access said information.
</p><p>
<b>(5) PrjRemote:</b> is a predesigned Debugger component
which can simulate any well-formed messages, and capture any messages from any component to another component within a Scope.
</p><p>
<br>
<p><img src="SISfig15.png" align="center"></p>
<p>The above diagram can be redrawn as an UML
deployment diagram as follows.</p>

<p><img src="PatCareSIS.png"></p>

<p>The PrjRemote, the SIS server, the InputProcessor
and the Uploader constitute the <b>Component Infrastructure</b>
(see Chapter 15 on component infrastructure)
.  The other components are built with
respect to this Component Infrastructure.</p>
</p>
</div>

<div id="roles"><font color="blue"><h2>Component Types / Roles</h2></font>
<p>There are 5 pre-defined Roles, Basic/Super/Monitor/Advertiser/Debugger</p>
<p><b>(1) Basic Component: </b>your average, run-of-the-mill guy who collects data, send out Reading, and occasionally send out Alert.</p>
<p><b>(2) Super Component: </b>can be responsible for processing Reading/Alert from Basic components, and occasionally send out Emergency.</p><p><b>(3) Monitor Component: </b>watches over Reading/Alert all across a Scope.</p><p><b>(4) Advertiser Component: </b>spots Alert/Emergency and tell the outside world about it.</p><p><b>(5) Debugger Component: </b>like PrjRemote, can simulate any well-formed messages, and capture any messages from any component to another component within a Scope.</p></div><div id="msg"><font color="blue"><h2>Message Types</h2></font>
<p>There are 7 pre-defined messages, Reading/Alert/Setting/Register/Confirm/Connect/Emergency, for actual definition of all existing message, check out <a href="MessageSIS.htm">Message Definition</a>.</p>
<div><p><b>(1) Reading: </b>a normal reading from a Basic component</p>
<table style="
    width: 550px;
">
  <colgroup><col width="250">
  <col width="300">
  </colgroup><tbody><tr>
    <td>Scope</td>
    <td>The operating level of this message</td> 
    
  </tr>
  <tr>
    <td>MessageType</td>
    <td>"Reading"</td> 
    
  </tr>
<tr>
    <td>Sender</td>
    <td>Which component sends this</td> 
    
  </tr><tr>
    <td>[Receiver]</td>
    <td>Optional, which component receives this</td> 
    
  </tr><tr>
    <td>YOUR_OWN_ITEM_1</td>
    <td></td> 
    
  </tr><tr>
    <td>...</td>
    <td></td> 
    
  </tr><tr>
    <td>YOUR_OWN_ITEM_N</td>
    <td></td> 
    
  </tr><tr>
    <td>Date</td>
    <td>Date when this message is sent</td> 
    
  </tr></tbody></table>
</div>
<div><p><b>(2) Alert: </b>an alert from a Basic component</p>
<table style="
    width: 550px;
">
  <tbody><tr>
    <td>Scope</td>
    <td>The operating level of this message</td> 
    
  </tr>
  <tr>
    <td>MessageType</td>
    <td>"Alert"</td> 
    
  </tr>
<tr>
    <td>Sender</td>
    <td>Which component sends this</td> 
    
  </tr><tr>
    <td>[Receiver]</td>
    <td>Optional, which component receives this</td> 
    
  </tr><tr>
    <td>YOUR_OWN_ITEM_1</td>
    <td></td> 
    
  </tr><tr>
    <td>...</td>
    <td></td> 
    
  </tr><tr>
    <td>YOUR_OWN_ITEM_N</td>
    <td></td> 
    
  </tr><tr>
    <td>Date</td>
    <td>Date when this message is sent</td> 
    
  </tr></tbody><colgroup><col width="250">
  <col width="300">
  </colgroup></table>
</div><div><p><b>(3) Setting: </b>a setting command, usually from a Monitor</p>
<table style="
    width: 550px;
">
  <tbody><tr>
    <td>Scope</td>
    <td>The operating level of this message</td> 
    
  </tr>
  <tr>
    <td>MessageType</td>
    <td>"Setting"</td> 
    
  </tr>
<tr>
    <td>Sender</td>
    <td>Which component sends this</td> 
    
  </tr><tr>
    <td>[Receiver]</td>
    <td>Optional, which component receives this</td> 
    
  </tr><tr>
    <td>Purpose</td>
    <td>The purpose of this setting action, preferably no spaces, used for differentiate settings for a component</td> 
    
  </tr><tr>
    <td>YOUR_OWN_ITEM_1</td>
    <td></td> 
    
  </tr><tr>
    <td>...</td>
    <td></td> 
    
  </tr><tr>
    <td>YOUR_OWN_ITEM_N</td>
    <td></td> 
    
  </tr></tbody><colgroup><col width="250">
  <col width="300">
  </colgroup></table>
</div><div><p><b>(4) Register: </b>a registration request</p>
<table style="
    width: 550px;
">
  <tbody><tr>
    <td>Scope</td>
    <td>The operating level of this message</td> 
    
  </tr>
  <tr>
    <td>MessageType</td>
    <td>"Register"</td> 
    
  </tr>
<tr>
    <td>Role</td>
    <td>Basic / Super / Monitor / Advertiser / Debugger / YOUR_OWN_ROLE<br><br>* Unless behaviors added to SISServer otherwise using your own customized role here won't do anything.</td> 
    
  </tr><tr>
    <td>Name</td>
    <td>Name of the component, no duplicates allowed for one Scope</td> 
    
  </tr><tr>
    <td>[InputPath]</td>
    <td>Optional, for super components only, provide the location of all required sources to build a super component, leave blank to use default /SuperComponents folder</td> 
    
  </tr><tr>
    <td>[OutputPath]</td>
    <td>Optional, for super components only, provide the location to put the generated super component, leave blank to use default /Components folder</td> 
    
  </tr></tbody><colgroup><col width="250">
  <col width="300">
  </colgroup></table>
</div><div><p><b>(5) Confirm: </b>a confirmation from SISServer</p>
<table style="
    width: 550px;
">
  <tbody><tr>
    <td>Scope</td>
    <td>The operating level of this message</td> 
    
  </tr>
  <tr>
    <td>MessageType</td>
    <td>"Confirm"</td> 
    
  </tr>
<tr>
    <td>Sender</td>
    <td>Which component sends this</td> 
    
  </tr><tr>
    <td>Receiver</td>
    <td>which component receives this</td> 
    
  </tr></tbody><colgroup><col width="250">
  <col width="300">
  </colgroup></table>
</div><div><p><b>(6) Connect: </b>a connecting request from a component other than Monitors</p>
<table style="
    width: 550px;
">
  <tbody><tr>
    <td>Scope</td>
    <td>The operating level of this message</td> 
    
  </tr>
  <tr>
    <td>MessageType</td>
    <td>"Connect"</td> 
    
  </tr>
<tr>
    <td>Role</td>
     
    
  <td>Basic / Super / Monitor / Advertiser / Debugger / YOUR_OWN_ROLE<br><br>* Unless behaviors added to SISServer otherwise using your own customized role here won't do anything.</td></tr><tr>
    <td>Name</td>
     
    
  <td>Name of the component, no duplicates allowed for one Scope</td></tr></tbody><colgroup><col width="250">
  <col width="300">
  </colgroup></table>
</div><div><p><b>(7) Emergency: </b>a emergency message from a Super component</p>
<table style="
    width: 550px;
">
  <tbody><tr>
    <td>Scope</td>
    <td>The operating level of this message</td> 
    
  </tr>
  <tr>
    <td>MessageType</td>
    <td>"Emergency"</td> 
    
  </tr>
<tr>
    <td>Sender</td>
    <td>Which component sends this</td> 
    
  </tr><tr>
    <td>MainComponent</td>
    <td>The Basic component initiates the emergency</td> 
    
  </tr><tr>
    <td>HelperComponents</td>
    <td>All other Basic components which provide useful information</td> 
    
  </tr><tr>
    <td>Note</td>
    <td>Additional Note</td> 
    
  </tr><tr>
    <td>Date</td>
    <td>Date when this message is sent</td> 
    
  </tr></tbody><colgroup><col width="250">
  <col width="300">
  </colgroup></table>
</div></div><div id="install"><h2><font color="blue">System Installation</font></h2>
<p>Download <a href="SISServer/SISv5.zip">SISServer/SISv5.zip</a>, unzip and follow the instructions in <a href="ReadMe_V5.txt">ReadMe_V5.txt</a> to install the system.</p>
<p>You can then use
the debugger <a href="SISServer/PrjRemote.jar">PrjRemote.jar</a> to simulate message exchanges to debug an application system.
Both ReadMe_V5.txt and PrjRemote.jar are also included in the zip file.

<p>There is also a Developer's version <a href="SISv5_DEV.zip">SISv5_DEV.zip</a>, containing the implemented components for the personal healthcare system.
The developer's version will be made avaible upon requests from those
who will do term projects based upon PHSIS.
</div>
<div id="pre">
<font color="blue"><h2>Preliminary Condition</h2></font>
<p>SIS Server and PaceTech machine pre-exist or have already been instantiated.</p>

<p>GUI, InputProcessor, BloodPressure/SPO2/EKG Monitor and Uploader will be instantiated.</p>

</p>In case some of these components are not available, it
is still OK.  You can use the PrjRemote to
simulate messages from these components.  Messages
to these components will be ignored by the SIS Server,
but still displayed in PrjRemote since that's how a Debugger component rolls.</p>
<p>For the class projects,
for example, you can simulate messages from InputProcessor.
Therefore, you don't need to have access to the PaceTech machine
to develop and test your plug-in components.</p>
</div>
<div id="init">
<font color="blue"><h2><a href="MessageSIS.htm">Initialization</a></h2></font>
<p>You can use a Debugger component like PrjRemote to simulate Register message(s), or simply use the batch script provided: Scripts/runIndividualComp/runInitializer.bat</p>
<p>
PrjRemote sends <a href="xml/InitXML/CreateGUI.xml">Register</a> to SISserver to enable message forwarding for GUI
</p><p>
PrjRemote sends <a href="xml/InitXML/CreateInputProcessor.xml">Register</a> to SISserver to enable message forwarding for InputProcessor
</p><p>
PrjRemote sends <a href="xml/InitXML/CreateBloodPressure.xml">Register</a> to SISserver to enable message forwarding for BloodPressure Monitor
</p><p>
PrjRemote sends <a href="xml/InitXML/CreateSPO2.xml">Register</a> to SISserver to enable message forwarding for SPO2 Monitor
</p><p>
PrjRemote sends <a href="xml/InitXML/CreateEKG.xml">Register</a> to SISserver to enable message forwarding for EKG Monitor
</p><p>
PrjRemote sends <a href="xml/InitXML/CreateUploader.xml">Register</a> to SIServer to enable message forwarding for Uploader
</div>

<div id="sce">
<font color="blue"></font></p><h2><font color="blue">A Scenario</font></h2>

<p>PachTech machine send out input to InputProcessor, which parses the data and extracts vital signals. <font color="black">(InputProcessor accepts sensor data input and produces InputProcessorBloodPressureSetting / InputProcessorEKGSetting / InputProcessorSPO2Setting. However sensor data input may not be a formatted message)</font>
</p>

<p>InputProcessor sends InputProcessorBloodPressureSetting (a "Setting" message) to BloodPressure Monitor, which checks for abnormality. There could be a knowledge base, but initially we just check if systolic reading is over 140 or diastolic is over 90 to generate a BloodPressureAlert. <font color="black"><font color="orange">(BloodPressure Monitor accepts InputProcessorBloodPressureSetting from InputProcessor, generate BloodPressureReading / BloodPressureAlert)</font></font>
</p>

<p>BloodPressure Monitor sends BloodPressureAlert to GUI, which displays the vital signals. <font color="black">(GUI accepts "Reading" / "Alert")</font></p>
<p><font color="orange">BloodPressure Monitor sends BloodPressureAlert to Uploader, medical conditions to remote database.</font> <font color="black">(Uploader accepts "Alert" / "Emergency" and uploads it.  The uploading may not be a formatted message)</font></p>

<p>(There are other messages and other components for heart
rate, SPO2 level, EKG signals for irregular heart beats, etc.
But it is the same scenario, only more complicated.
The GUI may also need to display the combined vitals.)
</p>

</div>

<!--
<font color=blue>
<h2>What should be checked</h2>
</font>
We need to verify that UniversalInterface can talk to
SISserver, which then talks to the instantiated components.
<p>
However, we should also verify that UniversalInterface can talk to the components directly.
I think if developer runs UniversalInterface and specify
the IP address, and runs components with same
IP address, they can talk directly.  This may not be
needed in the development process.  But it is a nice
option so that the developer can test the components
directly with the UniversalInterface.
-->

<!--
<font color=blue><h2>1631 Group Projects to Develop Additional Components</h2></font>


<font color="black">
CS1631 students will specify and develop
other additional components. 
In general each group is responsible for two components:
one component for the monitor and the other
for the knowledge base.
The group working on the GUI is responsible for
the GUI component and a simple SPO2 monitor.
Two groups will work on same components.
<p>
GUI and SPO2 Monitor <b>(G1 and G2):</b>
<p>
Blood Pressure Monitor with Knowledge Base <b>(G3 and G4):</b>
<p>
Blood Sugar Monitor with Knowledge Base <b>(G5 and G6):</b>
<p>
EKG Monitor with Knowledge Base <b>(G7 and G8):</b>
<p>
General Health Monitor with Knowledge Base <b>(G9 and G10):</b>
<p>
</font>
System Integration (TA and Instructor)
-->
<div id="design">
<font color="blue"></font></p><h2><font color="blue">Design Considerations</font></h2>
<p>

A monitor component and the associated knowledge
base component can be considered as one
<b>coarse grained business component</b>.
The refined monitor component and the associated knowledge
base component are the <b>fine grained components</b>.
(See Chapter 16 on business components.)

</p>

<p>A component is brought to life by the <b>"Register"</b> message. </p>
<p>When a component first comes to life, it should send a <b>"Connect"</b> message to the SISserver.</p>
<p>SISserver will return an <b>"Confirm"</b> message to the said component.</p>
<p>The <b>"Activate"</b> message and <b>"Deactivate"</b> message will activate/deactivate the said component. </p>
<p>Finally, the <b>"Setting"</b> message with the purpose of <b>"Kill"</b> will destroy it.</p>
</div>
<!--
The following message space is assigned to the
individual project groups:
<pre>
G1   110-119
G2   120-129
G3   130-139
G4   140-149
G5   150-159
G6   160-169
G7   170-179
G8   180-189
G9   190-199
</pre>
-->
<div id="spec">
<font color="blue"></font></p><h2><font color="blue">Component Specification</font></h2>
We need to specify at least the input messages,
output messages, the variables (attributes)
and the methods for the components.
Therefore the class diagrams should be prepared.
<p>
For a complete specification we can use the following UML diagrams:
The use-case diagram specifies the major
use-cases (or components).
The sequence diagram describes the interactions
among the classes and actors based upon messages.
The state diagram describes the state transitions
for the major component(s).
</p><p>
Special attention should be paid to the interface.
For more details about interface see Chapter 17 on Components and Connectors.

<!--
<font color=blue><h2>A Tool for Component Specification for Slow Intelligence Systems</h2></font>

There is a tool for messages and component specification for Slow Intelligence Systems,
<a href="http://www.cs.pitt.edu/~ezegarra/sismc/">
Slow Intelligence System Management Console</a>,
implemented by Emilio Zegarra.  Since this is a single-user
tool, all the components specified by a user should be
distinctly named to avoid collision with other user's
components.  It is suggested that the user's last name
be prefixed to the component name.  For example, if the
user's name is "Doe", a component for blood pressure
monitoring can be named "DoeBPmonitor".
-->
</p>
</div>
</body>
</html>

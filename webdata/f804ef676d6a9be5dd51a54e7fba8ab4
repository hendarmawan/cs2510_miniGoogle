<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
   <meta name="GENERATOR" content="Mozilla/4.75 [en] (WinNT; U) [Netscape]">
   <title>Unit1a : Black Box Description of the MIPS R2000 ALUUnit1 : Black Box Description of the MIPS R2000 ALU</title>
   <base target="1502main">
</head>
<body background="Unitbkg.jpg">

<center>
<h2>
Design Specification for the Mentor Graphics Tutorial</h2></center>
Before we begin the tutorial, this page will provide a black box description
of the device that you will design. What you see in the figure below, is
an external description of the device called a&nbsp; <i>symbol</i> in the
Mentor tools. This is the basic method for implementing hierarchical designs
and for supporting design abstraction. The symbol tells us the input and
output specification, but we have no way of knowing what is going on inside.
In fact, over the course of the design we may use several design descriptions
interchangeably the same way that several architectural descriptions may
be provided for a single entity descriptions in VHDL. In fact this is the
graphical equivalent of the entity statement in VHDL.
<center>
<p><img SRC="ALU2.jpg"></center>

<p>For the purposes of this tutorial, the I/O architecture is fixed by
the processor design from your text.&nbsp; The signal type
and direction of each signal is described in the following table.
<br>&nbsp;
<table BORDER=2 >
<tr>
<td COLSPAN="2">
<center><b><font size=-2>INPUTS</font></b></center>
</td>
</tr>

<tr>
<td WIDTH="200"><b>A(63 downto 0)</b></td>

<td>Operand A is a 64 bit input bus carrying the "A" operand for an ALU
operation.&nbsp;</td>
</tr>

<tr>
<td><b>B(63 downto 0)</b></td>

<td>Operand B is a 64 bit input bus carrying the "B" operand for an ALU
operation.&nbsp;</td>
</tr>

<tr>
<td><b>ALUOp(3 downto 0)</b></td>

<td>ALUOp is a 4 bit input bus which controls which operation the ALU executes.&nbsp;</td>
</tr>

<tr>
<td><b>SHAMT(4 downto 0)</b></td>

<td>SHAMT is a 5 bit input bus which forms the 5 least significant bits of a 6 bit shift amount.  The 6 bit shift amount indicates the number of bits to shift the operand in a shift operation.&nbsp;</td>
</tr>
<!-- SHAMT is a 5 bit input bus which indicates the number of bits to shift the operand in a shift operation. -->

<tr>
<td><b>SHAMT_HIGH</b></td>

<td>SHAMT_HIGH is a single input bit that is combined with SHAMT(4 downto 0) to form a 6 bit shift amount.  SHAMT_HIGH is the most significant bit of the 6 bit shift amount.&nbsp;</td>
</tr>

<tr>
<td COLSPAN="2">
<center><b><font size=-2>OUTPUTS</font></b></center>
</td>
</tr>

<tr>
<td><b>R(63 downto 0)</b></td>

<td>R is a 64 bit output bus which will hold the result of the ALU Operation.&nbsp;</td>
</tr>

<tr>
<td><b>Zero</b></td>

<td>Zero is a single bit output which will be set high if the result of
an arithmetic operation is equal to zero and low otherwise.&nbsp;</td>
</tr>

<tr>
<td><b>Overflow</b></td>

<td>Overflow is a single bit output which will be set high if the execution
of an arithmetic operation results in an overflow of the adder/subtractor
and low otherwise.&nbsp;</td>
</tr>
</table>

<p>For reference as you implement the design, the functionality of the
ALU is listed below. As above, these functions have been determined by the
hardware operations of the MIPS R2000 instruction set and the role of the
ALU in each operation. We will look into this process in detail when we
design the control unit for our microprocessor. For now, we will assume
that we have been handed a set of specfications that describe the set of
functions that the ALU must implement. They will be encoded on to the ALUOp
and the SHAMT_HIGH and SHAMT inputs. Although the ALUOp encodings would typically be
fixed as well, I will leave this to you as an excercise (HINT: pay attention
to the instruction set encodings). After all, you will eventually design
the control unit as well.
<br>&nbsp;
<table BORDER >
<tr>
<td WIDTH="225"><b><font size=-2>Name of Operation</font></b></td>

<td><b><font size=-2>Description of Operation</font></b></td>
</tr>

<tr>
<td>Add Signed (<b>ADD</b>)&nbsp;</td>

<td>R = A + B : Treating A, B, and R as signed two's complement integers.&nbsp;</td>
</tr>

<tr>
<td>Add Unsigned (<b>ADDU</b>)&nbsp;</td>

<td>R = A + B : Treating A, B, and R as unsigned integers.&nbsp;</td>
</tr>

<tr>
<td>Bitwise AND (<b>AND</b>)&nbsp;</td>

<td>R(i) = A(i) AND B(i).&nbsp;</td>
</tr>

<tr>
<td>Bitwise NOR (<b>NOR</b>)&nbsp;</td>

<td>R(i) = A(i) NOR B(i).&nbsp;</td>
</tr>

<tr>
<td>Bitwise OR (<b>OR</b>)&nbsp;</td>

<td>R(i) = A(i) OR B(i).&nbsp;</td>
</tr>

<tr>
<td>Set on Less Than (<b>SLT</b>)&nbsp;</td>

<td>R = "000...01" if A &lt; B otherwise R = "000....00" : Treating A and B
as signed two's-complement integers.&nbsp;</td>
</tr>

<tr>
<td>Set on Less Than Unsigned(<b>SLTU</b>)&nbsp;</td>

<td>R = "000....01" if A &lt; B otherwise R = "000....00" : Treating A and B
as unsigned integers.&nbsp;</td>
</tr>

<tr>
<td>Shift Left Logical (<b>SLL</b>)&nbsp;</td>

<td>R = A &lt;&lt; (SHAMT_HIGH concatenated with SHAMT) : filling in vacated bits with '0'.&nbsp;</td>
</tr>

<tr>
<td>Shift Right Arithmetic (<b>SRA</b>)&nbsp;</td>

<td>R = A >> (SHAMT_HIGH concatenated with SHAMT) : filling in vacated bits with replicas of the sign
bit, A(63).&nbsp;</td>
</tr>

<tr>
<td>Shift Right Logical (<b>SRL</b>)&nbsp;</td>

<td>R = A >> (SHAMT_HIGH concatenated with SHAMT) : filling in vacated bits with '0'.&nbsp;</td>
</tr>

<tr>
<td>Subtract Signed (<b>SUB</b>)&nbsp;</td>

<td>R = A - B : Treating A, B, and R as signed two's complement integers.&nbsp;</td>
</tr>

<tr>
<td>Subtract Unsigned (<b>SUBU</b>)&nbsp;</td>

<td>R = A - B : Treating A, B, and R as unsigned integers.&nbsp;</td>
</tr>

<tr>
<td>Bitwise XOR (<b>XOR</b>)&nbsp;</td>

<td>R(i) = A(i) XOR B(i).&nbsp;</td>
</tr>
</table>

<p>We are now ready to start up to tools and set up your design libraries.&nbsp;&nbsp;

<a href="LibOpen/LibOpen.html">Click here to continue</a>
</body>
</HTML<HTML>
</html>

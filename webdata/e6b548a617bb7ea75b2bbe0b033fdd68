<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="GENERATOR" content="Microsoft FrontPage Express 2.0">
<title>Microsoft .NET Presentation</title>
</head>

<body bgcolor="#FFFFFF">

<table border="0" width="100%">
    <tr>
        <td valign="top"><a href="slide-10.htm"><img
        src="previous.gif" border="0" width="26" height="26"></a></td>
        <td align="center" valign="top"><h1>SOAP</h1>
        </td>
        <td align="right" valign="top"><a href="slide-12.htm"><img
        src="next.gif" border="0" width="26" height="26"></a></td>
    </tr>
</table>

<h2>.NET and SOAP</h2>

<p><font color="#000000" size="4">.NET uses SOAP as its protocol
for representing both data and commands. In short, web services
use SOAP as their &quot;interface&quot; to the outside world. .NET
also provides a <u>W</u>eb <u>S</u>ervices <u>D</u>escription <u>L</u>anguage
- similar in purpose to the IDL used by binary object standards
like COM and Corba - to allow a service provider to describe <em>what</em>
specific data and commands are accepted by the service. WSDL is
also based on XML grammar. Finally, &quot;SOAP discovery&quot;
allows a user looking for a service to find that service's
description and its capabilities (WSDL).</font></p>

<p><font color="#000000" size="4">Hence, any web service can
expose itself programatically over the Internet using open
standard, non-proprietary protocols. Any user can use the web
service through these protocols. The .NET Framework will provide
API calls to make these web service calls easier. And because
SOAP is platform independant, web services can be written for and
used by any operating system and any distributed object model.</font></p>

<h2>SOAP: the advent of web services and retirement of
distributed objects?</h2>

<p><font size="4">Because of SOAP being the underpinnings for web
services, what does this mean for distributed object systems like
COM?</font></p>

<p><font size="4">It means in short that COM isn't going away
anytime soon. Thanks to .NET, any COM object will look like a web
service, and any web service can be made to look like a COM
object. So the billion-dollar industry that has grown up around
providing programming components need not start to sweat.</font></p>

<p><font size="4">What it <em>does</em> mean is that you now have
the best of both worlds: a nice distributed object system like
COM with all the advantages of loose coupling. Mixing DCOM with
RMI or Corba becomes instantly possible.</font></p>

<hr>

<p><a href="references.htm"><em>References</em></a><em>: B,E</em></p>
</body>
</html>

     PROFESSOR:   
     OKAY.  NOW LAST TIME WE STARTED TO
TALK ABOUT WHAT IS A DATABASE SYSTEM.  AND
WHAT IT IS FOR.  WE START TALKING ABOUT
ARCHITECTURE OF THE DATABASE SYSTEM.  A
DATABASE CONSISTS OF THREE LEVELS, THE
EXTERNAL LEVEL, THE CONCEPTUAL LEVEL AS
WELL AS THE INTERNAL LEVEL.  THE
CORRESPONDING DIAGRAM ILLUSTRATES THE
ARCHITECTURE OF THE SYSTEM.  FROM THE END
USER POINT OF VIEW, THEY COME INTO THE
SYSTEM THROUGH THE EXTERNAL LEVEL.  SO THE
END USER AS FAR AS THE USE USER IS
CONCERNED, HE IS USING THE DATABASE AS A
COLLECTION OF TABLES.  SO IF HE IS DOING
PAYROLL THEN MAYBE HE IS LOOKING AT THE
DATABASE JUST AS A HUGE TABLE WHICH IS THE
PAYROLL FILE.  THAT'S THE VIEW FOR THE
USER OR USER GROUPS OF APPLICATION
PROGRAMS.  SOME OF THESE WILL BE USED IN
THE SYSTEM INTERACTIVELY.  NOW MOST
DATABASE SYSTEMS THESE DAYS DO OFFER A
VERY FRIENDLY USER INTERFACE.  THEN AGAIN,
MOST DATABASE SYSTEM ALSO PROVIDE
INTERFACE FOR APPLICATIONAL PROGRAMS SO
THAT APPLICATION PROGRAMMER CAN WRITE
PROGRAMS TO ACCESS INFORMATION THAT'S THE
FIRST LEVEL OR THE EXTERNAL LEVEL.
     NOW, IMAGINE YOU HAVE GROUPS OF
USERS, SO EACH GROUP WILL BE VIEWING THE
DATABASE IN THEIR OWN WAY, SO THEY'RE
LOOKING AT A PART OF THE ENTIRE COLLECTION
OF DATA SO THE METAPHOR IS THE ELEPHANT SO
THAT EACH PERSON DEPEND UPON HIS VIEWPOINT
WILL ELEPHANT DIFFERENTLY BUT THEN YOU
HAVE ENTIRE ELEPHANT WHICH IS THE
COLLECTION OF INFORMATION FROM THESE
INDIVIDUAL VIEWS.  SO THE NEXT LEVEL IS
THE CONCEPTUAL LEVEL.  THIS MEANS THAT WE
TAKE THE INDIVIDUAL VIEWS OF DIFFERENT
GROUP OF USER.  PERHAPS ONE GROUP IS
TAKING PAYROLL, ANOTHER GROUP IS DOING
BENEFITS, ET CETERA, ET CETERA SO EACH ONE
OF THEM WILL BE JUST VIEWING A PART OF THE
DATABASE THEN THE ENTIRE COLLECTION WILL
BE THE SO-CALLED CONCEPTUAL VIEW.
     SO, LAST TIME WE HAVE THIS FIGURE SO,
FOR THE INDIVIDUAL USER HIS VIEW IS THIS.
A RELATION TABLE OR COLLECTION OF TABLES
THESE ARE THE INDIVIDUAL VIEW.  THE
EXTERNAL LEVEL.  IF WE CONSIDER THEN THE
INTEGRATION OF ALL OF THESE VIEWS, THEY
FORM THE UNDERLYING DATABASE AND THIS IS
THE CONCEPTUAL LEVEL AND THIS IS WHAT
WE'RE TALKING ABOUT.  OKAY.  SO THE
INDIVIDUAL USER OR THE PROGRAMMERS WILL
LOOK AT DATA AND DATA INTEGRATED INTO THE
CONCEPTUAL VIEW.  FINALLY, THIS LOGICAL
INFORMATION HAS TO BE STORED SOMEWHAT AND
ORGANIZED.  THIS IS CALLED INTERNAL LEVEL
OR THE PHYSICAL LEVEL WHERE WE WORRY ABOUT
HOW WE MAP INFORMATION ON TO THE STORAGE.
     NOW THESE DAYS IF YOU USE SYSTEM LIKE
ORACLE WHAT WE'LL DO IS THAT WE WILL
DEFINE THE SCHEMA TO REALIZE THE
CONCEPTUAL VIEW AND ON TOP OF THAT THE
USER VIEWS BUT WE CAN ALSO CREATE A
DIFFERENT KIND OF INDEXES TO HELP US TO
ORGANIZE THE KEY DATA AND ACCESS THAT MORE
EFFICIENTLY.  IN A FEW WEEKS WE'LL SPEND
SOME TIME ON THE PHYSICAL DATA STRUCTURE,
USING DATA STRUCTURES THAT ARE FAMILIAR TO
MOST OF YOU, FOR EXAMPLE, LISTS, TREES AND
WE'LL TALK ABOUT B TREE AND DYNAMIC HASH.
THESE ARE WAY WE CAN ORGANIZE DATA
EFFICIENTLY.  THE END USER THEY'RE NOT
CONCERNED ABOUT THAT. ALL THEY WANT TO DID
IS MANIPULATE AND ACCESS INFORMATION BUT
IT IS THE SYSTEM PROGRAMMERS JOB AND
ADMINISTRATORS JOB TO MAKE SURE THAT THEY
CREATE EFFICIENT DATA STRUCTURES SO THE
INFORMATION CAN BE ORGANIZED AND ACCESSED
EFFICIENTLY.  SO EXTERNAL LEVEL, WHERE
DATA IS VIEWED BY INDIVIDUAL OR USER OR
GROUPS OF USER.  CONCEPTUAL LEVEL, A
COMMUNITY OF USERS, FINALLY INTERNAL LEVEL
WHERE THE DATA IS PHYSICALLY STORED.
SEQUEL WHICH IS THE POPULAR LANGUAGE
SUPPORTED BY MOST DATABASE MANAGEMENT
SYSTEMS IS THE LANGUAGE WE CAN USE AT
EXTERNAL LEVEL AS WELL AS CONCEPTUAL
LEVEL.
     SO WE HAVE THIS THREE LEVELS OF
ARCHITECTURE FROM THE USER TO CONCEPTUAL
VIEW TO HOW WE ORGANIZE THAT INTERNALLY.
IN ORDER FOR US TO BE ABLE TO DEFINE AT
VARIOUS LEVELS HOW WE STRUCTURE DATA WE
NEED DATA MODEL AND SCHEMA.  DATA MODEL AS
THE NAME IMPLIES IS THE WAY THAT WE
ORGANIZE THE CONCEPT AND RELATIONSHIPS
INTO SOME KIND OF STRUCTURE.  AND THIS IS
THE MOST IMPORTANT BECAUSE IN ORDER FOR US
TO DESIGN THE DATABASE WE MUST HAVE A DATA
MODEL.  WHAT ARE THE POPULAR DATA MODEL?
WE'LL TALK ABOUT RELATIONAL MODEL AND
NETWORK AND NOWADAYS OBJECT ORIENTED
MODEL.
     BUT PRIOR TO THAT WHEN WE FIRST START
WITH THE DATABASE DESIGN, WE CAN START
WITH A MORE NEUTRAL MODEL, NEUTRAL MEANING
THAT WE HAVE NOT YET COMMITTED OURSELF TO
ANY PARTICULAR APPROACH IN THE DATABASE
DESIGN LIKE RELATIONAL OR OBJECT ORIENTED
AND THAT'S THE CONCEPTUAL DATA MODEL AND
WHAT I'LL TEACH YOU IS TO USE THE ENTITY
RELATIONSHIP DIAGRAM TO DO CONCEPTUAL
MODELING.  AND THERE WILL BE SOME NEW
MATERIAL THAT I WILL INCLUDE THAT WILL BE
USING SO-CALLED U-M-L.  THE UNIVERSAL
MODEL LANGUAGE SO THAT WE CAN PROVIDE A
MORE GENERAL DESCRIPTION OF THE PROCESSES.
 THAT PART IS NOT IN THE TEXTBOOK BUT
SINCE U-M-L IS GAINING IMPORTANCE THESE DAYS I
WOULD LIKE YOU TO BE EXPOSED TO THOSE
CONCEPTS.  BUT FOR THE EXERCISE I WILL ASK YOU
TO DO USE ER, THE ENTITY RELATION -- IS NOT
EMERGENCY ROOM IT IS ENTITY RELATION DIAGRAM
TO DO THE MODELING.
     SO YOU HAVE THE MODEL AND THEN THE WAY WE
CAN SPECIFY THE MODEL WRITE IT DOWN IN SOME
KIND OF FORM THAT CAN BE UNDERSTAND BY THE
COMPANY IS DATABASE SCHEMA.  SO IT IS
BASICALLY A DESCRIPTION OF THE DATABASE OR THE
SPECIFICATION OF A DATA MODEL.  SO FOR ANY
DATABASE APPROACH, RELATIONAL, OBJECT ORIENTED
BUT NOW WE NEED TO SPECIFY THE SCHEMA.
     OKAY.  NOW GOING BACK TO OUR THREE
LEVELS, OKAY.  THE EXTERNAL LEVEL, CONCEPTUAL
LEVEL AND THE STORAGE LEVEL OR THE INTERNAL
LEVEL.
     SO FROM EXTERNAL LEVEL WE HAVE DIFFERENT
VIEWS OF DATA.  ONE USER MAY BE LOOKING AT THE
DATABASE AS THE TABLES AND ANOTHER AS PART OF
THE TABLES.  THIS IS THE IMPORTANT CONCEPT OF
WHAT WE CALL THE DATABASE VIEW.  SO LET ME
GIVE YOU EXAMPLE HERE.  LET'S USE TABLES
BECAUSE TABLE IS EVERYTHING THAT WE CAN EASILY
UNDERSTAND.  LET'S SAY WE HAVE EMPLOYEE
INFORMATION.  NOW FOR EVERY EMPLOYEE WE
USUALLY COLLECT INFORMATION SUCH AS NAME,
ADDRESS AND SALARY.  THEY COULD BE MORE BUT
LET'S, FOR THE MOMENT JUST STOP HERE.  THEN WE
CAN STORE INFORMATION FOR THE VARIOUS
EMPLOYEES IN THIS TABLE.  SO EVERY EMPLOYEE
WILL HAVE ONE ROW IN THIS TABLE SO MAYBE THIS
IS DOE AND SOME ADDRESS AND A CERTAIN SALARY.
OKAY?  NOW IF YOU WANT TO DO PAYROLL
PROCESSING TO ISSUE PAYCHECKS TO THE
INDIVIDUAL EMPLOYEES, THEN WHEN YOU ORDER
INFORMATION -- WE ARE TO SEND A CHECK TO THAT
PARTICULAR ADDRESS AND SALARY, WELL, DEPENDING
HOW WE PAY THAT PERSON, SO IF YOU PAY WEEKLY,
THAT AMOUNT DIVIDED BY 52 WILL BE SENT OUT,
WEEKLY CHECK.
     SO FOR THAT VIEW, FOR THE PAYROLL WE NEED
A WHOLE TABLE.  BUT LET'S SAY WE PROVIDE
INFORMATION TO THE MAYBE THEY HAVE MANY SOCIAL
ACTIVITIES SO THEY FORM CLUBS AND
ASSOCIATIONS.  IF YOU PROVIDE THAT INFORMATION
TO THE GENERAL PUBLIC, IT WILL BE NO GOOD,
RIGHT?  BECAUSE NOBODY WANTS PEOPLE TO KNOW
THEIR SALARY.  SO, IN THAT CASE, WHAT WE MAY
DECIDE TO DO IS TO GIVE ONLY THIS PART OF THE
TABLE TO THE GENERAL PUBLIC.  SO THAT'S
ANOTHER VIEW.  THAT VIEW CONSISTS OF ONLY A
PART OF THE TABLE THAT WE ORIGINALLY
SPECIFIED.  OKAY?  SO WHAT I'M TALKING ABOUT
IS FOR DIFFERENT USERS, OR USER GROUPS WE CAN
PROVIDE DIFFERENT EXTERNAL VIEWS.
     AND AS FAR AS THE DATABASE SYSTEM IS
CONCERNED, THOUGH, WE NEED TO PUT ALL OF THE
VIEW TOGETHER TO FORM THE INTEGRATED VIEW,
WHICH IS THE CONCEPTUAL VIEW.  NOW WE CAN SEE
WHY THESE VIEWS ARE VERY VALUABLE.  IT WILL
ENABLE US TO PROTECT CONFIDENTIAL INFORMATION,
IT WILL ENABLE US TO OFFER SOME KIND OF
SECURITY SO THAT THE WRONG PERSON WILL NOT GET
THE INFORMATION.  LIKE WHAT I ASKED YOU TO
ENTER AS YOU REGISTER, THERE IS PASS WORD
INFORMATION.  OBVIOUSLY, THE PASS WORD WILL
NOT BE SOMETHING THAT I WILL LIKE TO LET
EVERYBODY KNOW.  ALTHOUGH IN MY DATABASE THE
PASS WORD WILL BE COLUMN IN THE TABLE, IT WILL
BE HIDDEN FROM THE GENERAL PUBLIC.  OKAY.  SO
EXTERNAL VIEW CONCEPTUAL VIEW, IT GIVES A WAY
TO CONVEY INFORMATION TO GIVE THE RIGHT
INFORMATION TO THE RIGHT PEOPLE.
     AND THEN WE CAN MAP IT LIKE I SAID, TO
THE STORAGE AND ORGANIZE THAT IN SUCH A WAY SO
THAT WE CAN ACCESS INFORMATION EFFICIENTLY.
THIS IS NOT ONLY DONE USING INDEXING SCHEMES.
LATER WE'LL TALK AT LENGTH ABOUT DIFFERENT
TYPES OF INDEX.  SO THESE ARE WAYS TO SPEED UP
THE ACCESS OF INFORMATION. 
     PROFESSOR:   OKAY.  NOW, LIKE I
MENTIONED, THE USERS IS ONLY CONCERNED
ABOUT EXTERNAL VIEW SO WHO IS RESPONSIBLE
FOR MAINTAINING THE DATABASE AND DEFINING
THE VARIOUS VIEWS?  THAT'S THE JOB OF THE
DATABASE ADMINISTRATOR, THE DBA.  REMEMBER
LAST TIME I TALKED ABOUT TWO TYPE OF
PERSONNEL THE DBA, DATABASE ADMINISTRATOR
AND DA, WHICH IS THE DATA ADMINISTER.
THEY ARE USUALLY HIGH UP, VICE PRESIDENT
LEVEL.  MAYBE NOT THAT HIGH BUT AT LEAST
ASSOCIATE VICE PRESIDENT OF TECHNOLOGY.
AND THAT PERSON WILL DICTATE THE
INFORMATION TO BE GATHERED FOR THE ENTIRE
COMPANY.  THE DBA IS USUALLY LOWER LEVEL.
IN FACT, SOME OF YOU MAY END UP BEING DBA
OR MAYBE NOT BEING CALLED THIS NAME BUT
LIKE THAT.  THAT'S WITH SMALL COMPANIES
THESE DAYS, EVERYBODY HAS DATABASE.  YOU
MAY BE ASKED THIS KIND OF THING.  WHAT YOU
NEED TO DO IS -- YOU FIRST NEED TO DO
STUDY OF THE COMPANY, WHAT WE CALL
REQUIREMENTS ANALYSIS AND BE ABLE TO MAP
UP THE CONCEPTUAL MODEL FOR THE DATABASE
AND FROM THE CONCEPTUAL MODEL TRANSLATE
INTO DATABASE SCHEMA AND REALIZE THAT INTO
A DATABASE.
     THIS IN FACT IS THE PURPOSE OF THE
FIRST TWO EXERCISES.  IN THE FIRST
EXERCISE MAYBE SOME OF YOU ALREADY TOOK A
PEAK AT IT.  WHAT I'M GOING TO DO IS ASK
YOU TO USE THE TOOL, THE ER DIAGRAM THAT I
AM GOING TO TEACH YOU SO THAT YOU CAN
START WITH SOME KIND OF REQUIREMENT, BE
ABLE TO DESIGN THE CONCEPTUAL DATABASE.
THEN YOU SHOULD BE ABLE TO MAP THIS
CONCEPTUAL DATABASE INTO SCHEMAS AND THEN
THERE IS STILL NO IMPLEMENTATION.  THE
THIRD THING IS ONE YOU INSTALLED ORACLE ON
YOUR PC YOU ARE GOING USE THAT AND DEFINE
THE DATABASE SCHEMA AND THEN YOU START
POPULATING THE DATABASE.
     OKAY, THE WORD "POPULATE" MEANS WE
START TO ACTUALLY PUT DATA INTO THE
DATABASE.  SO YOU WILL VIEW THE DATABASE
AND START TO PUT IN THE REAL DATA.  OF
COURSE, THIS IS JUST EXERCISE SO I'M NOT
GOING TO ASK YOU TO PUT IN HUNDREDS OF
RECORDS.  IT'S A -- YOU PUT IN FOUR OR
FIVE RECORDS AND THEN TO SHOW YOU CAN USE
THAT TEST A LANGUAGE.  SO THAT'S OUR
IMMEDIATE GOAL.
     NOW LET'S GO A LITTLE DEEPER INTO
THREE LEVELS.  AT THE EXTERNAL LEVEL THERE
IS WHERE THE END USER OF THE APPLICATION
PROGRAMMER FITS IN.  LIKE I MENTIONED
THESE DAYS ANY GOOD DATABASE SYSTEM WILL
PROVIDE US WITH USUALLY AN INTERACTIVE WAY
OF ACCESSING THE SYSTEM AND ORACLE WILL
PROVIDE THAT. AND IT ALSO PROVIDE US WITH
INTERFACE TO A POPULAR LANGUAGE.  NOW OF
COURSE LANGUAGES LIKE COBOL PL/1 ARE
RATHER OBSOLETE SO WE TALK FROM C FROM
JAVA FROM C PLUS PLUS, ET CETERA?
     AND THEN THERE WILL BE USUALLY EMBED
IN THIS LANGUAGE A POWERFUL QUERY
LANGUAGE.  THE PURPOSE IS TO ENABLE TO --
WE WON'T HAVE TO DEVELOP THIS QUERY
LANGUAGE OURSELVES, WE WILL RELY ON LIKE
SQL, WHICH IS WHAT IT IS ABOUT.  IT'S
ALMOST UNIVERSAL.  ALL OF THESE MODERN
DATABASE WILL SUPPLY SQL AND THE BEAUTY IS
LATER ON WHEN WE TALK ABOUT INTERNET
DATABASE PROGRAMMING, WE CAN EMBED SQL
STATEMENTS INTO HTML FORMS?
     SO THAT WE CAN PASS THIS SQL
STATEMENT THROUGH SOME KIND OF INTERFACE
MECHANISM TO THE DATABASE FROM OUR FORM.
THEN FROM THE FORM WE CAN ACCESS THE
DATABASE.  THAT'S THE BEAUTY OF IT.
THAT'S WHAT MAKES ALL OF THESE APPLICATION
LIKE E COMMERCE POSSIBLE BECAUSE THE END
USER DOESN'T HAVE TO LEARN ANYTHING NOW.
PREVIOUSLY YOU HAD TO REQUIRE END USER TO
BE FAMILIAR WITH THE USER INTERFACE,
RIGHT?  THESE DAYS, IT'S NO LONGER
NECESSARY.  THERE IS UNIVERSAL INTERFACE
THAT MOST USERS ARE FAMILIAR WITH THIS AND
THEY ALREADY KNOW THAT INTERFACE.  LET ME
ASK YOU, WHAT IS THIS INTERFACE THAT
EVERYBODY ALREADY KNOWS?
     STUDENT:   WEB?
     PROFESSOR:   THE WEB, THE BROWSER,
RIGHT.  EVERYBODY KNOWS THE BROWSER NOW.
IT DOESN'T REQUIRE ADDITIONAL TRAINING.
THAT'S REALLY THE NICE THING ABOUT IT.
AND WE HAVE TO UNDERSTAND THAT IT IS NOT
JUST A TOOL IT IS ALMOST LIKE A UNIVERSAL
LANGUAGE BECAUSE ONCE THEY KNOW THAT, THEY
DON'T NEED ANY OTHER TOOL IN ORDER TO DEAL
WITH THE INFORMATION SYSTEM.  SO FROM THIS
BROWSER THE USER HAS THIS NATURAL
UNIVERSAL INTERFACE AT THIS LEVEL, AT
EXTERNAL LEVEL.  THEN THROUGH EMBEDDED SQL
STATEMENTS AND THE DATABASE INTERFACE LIKE
ODBC PROVIDED BY MICROSOFT WE CAN ACCESS
THE DATABASE.  THAT WILL COME LATER.
     NOW LET'S GO BACK TO THIS LEVEL.  SO
EXTERNAL LEVEL, THE USER CAN EITHER ACCESS
DATABASE DIRECTLY, ALSO WITH SOME HOST
LANGUAGE.  AND THIS LANGUAGE USUALLY
CONSISTS OF TWO PARTS.  ONE WE CALL DDL.
THIS STANDS FOR DATA DEFINITION.  AND TALK
ABOUT THAT IN THE MODEL A MOMENT AGO SO WE
NEED TO STRUCTURE THE DATA INTO FOR
EXAMPLE THE ENTITY RELATIONSHIP DIAGRAM
AND WE CAN EXPRESS THAT IN THE DATABASE
SCHEMA.  THEN WE HAVE TO COMMUNICATE THE
DATABASE SCHEMA TO THE DATABASE MANAGEMENT
SYSTEM SO THIS KNOWS THIS IS MODEL WE WILL
USE AND THIS COMMUNICATION IS THROUGH THIS
LANGUAGE, DDL.  SO THIS CORRESPONDS TO THE
DECLARATION STATEMENTS IN THE PROGRAMMING
LANGUAGE LIKE WE DECLARED A CERTAIN ARRAY
STRUCTURE, ET CETERA, SO THIS IS HOW WE
CAN TELL THE SYSTEM HOW THIS STRUCTURED.
THIS IS DEFINITION LANGUAGE PART.
     AND THE PRIMARY USE OF IT IS TO
DEFINE THE SCHEMA AND GIVE THE SCHEMA TO
THE SYSTEM AND THE OTHER USE OF IT IS TO
BE ABLE TO TELL THE SYSTEM WHAT KIND OF
INDEX YOU WANT, HOW YOU ARE GOING TO
ORGANIZE THE DATA, OKAY, SO YOU CAN
ACTUALLY IMPOSE CERTAIN STRUCTURE.  BUT
THAT'S THE SECONDARY PART.  THE OTHER PART
IS THE DML, CALLED THE DATA MANIPULATION
LANGUAGE.  THESE NORMALLY REFERS TO BOTH
QUERY AND UPDATING.  IF I HAVE A TABLE
LIKE THIS, FIRST THING I WANT TO DO IS BE
ABLE TO PUT DATA INTO THIS TABLE, RIGHT?
SO I NEED SOME KIND OF CERTAIN A, ENTER
THE RECORD ONE AT A TIME.  INSERT IS PUT
SOMETHING IN, I NEED TO HAVE A APPEND,
INSERT.  I NEED TO BE ABLE TO DELETE
SOMETHING.  APPEND, INSERT, DELETE, THESE
ARE THE USUAL TYPE OF UPDATING COMMANDS.
AND OF COURSE WE NEED A POWERFUL QUERY
LANGUAGE.  SO THAT'S PART OF DML.  MOST
DML ARE USUALLY SUPPORTED BY THE DATABASE
MANAGEMENT SYSTEM IN THE DATABASE LESSON.
SO SEQUEL IS A VERY GOOD EXAMPLE.  IT
PROVIDES BOTH DDL AND DML PART.  SO THE
FIRST TWO EXERCISES IS FOR YOU TO DEFINE
THE DATABASE SCHEMA, USE THE DDL PART OF
ORACLE TO DEFINE THE DATABASE AND USE THE
DML PART TO POPULATE THE DATABASE.
     OKAY.  AND THEN IN THE NOTES I GO A
LITTLE BIT DEEPER INTO EACH LEVEL.  FOR
EXAMPLE, THE CONCEPTUAL LEVEL WHERE WE
HAVE THE SCHEMA DEFINITION FOR NOT JUST A
SINGLE VIEW BUT MULTIPLE VIEWS AND BE ABLE
TO COMBINE THEM.  YOU MAY WONDER HOW BUT
THIS WE WILL SHOW LATER.  AND AS I
MENTIONED THIS IS A WAY FOR US TO
INTRODUCE SOME DEGREE OF SECURITY.  OKAY.
WE MUST UNDERSTAND THAT NO SYSTEM IS
TOTALLY SECURE, OKAY?  SO WE CANNOT CLAIM
THAT JUST BE USING VIEWS THE SYSTEM IS
SECURE OR ANY SINGLE MECHANISM IS SECURE.
SO THE VIEWS IS JUST A WAY FOR US TO HIDE
SOME INFORMATION FROM THE USER BUT IF YOU
FACE A MALICIOUS USER AND THEY WILL HAVE
WAYS TO ACCESS DATA, SO THERE MUST BE
OTHER WAYS TO INCREASE THE SECURITY.
     NEXT WE TALK ABOUT INTERNAL LEVEL,
THE STORAGE.  LUCKILY THE DATABASE SYSTEM
WILL HIDE THIS FROM US SO YOU DON'T HAVE
TO WORRY ABOUT THAT.  IF YOUR THE
APPLICATION PROGRAMMER, VERY SELDOM DO YOU
HAVE TO WORRY ABOUT THAT, THE REPORTED.
HOWEVER, WE WILL STILL SPEND MAYBE TWO
WEEKS ON TECHNIQUES SUCH AS HASH AND B
TREE, READING THAT AS COMPUTER SCIENTISTS
WE NEED TO KNOW WHAT IS GOING ON THERE.
CHANCES ARE YOU WILL BE FORCED TO DO
SOMETHING YOURSELF TO CREATE SOME DATA
STRUCTURE, EVEN CREATE A SMALL DATABASE
SYSTEM BY HAND.  THIS KNOWLEDGE WILL BE
HANDY FOR YOU.  NOW IN FACT IN TWO MINI
PROJECTS, ONE IS TO WRITE A COMPILER AND
INTERPRETER, A MINIATURE DATABASE SYSTEM.
USUALLY ABOUT 30 PERCENT, 40 PERCENT OF
THE STUDENTS WILL TAKE ULE CHALLENGE AND
DO THAT.  IT'S A LOT OF FUN, BUT OF COURSE
A LOT OF WORK, TOO.  SKI SO I ALREADY TALK
ABOUT DATABASE ADMINISTRATOR WHO IS THE
PERSON WHO WILL UNDERSTAND WHAT -- WILL
COLLECT AND UNDERSTAND THE USER'S
REQUIREMENTS, DEFINE THE CONCEPTUAL MODEL
FROM THE CONCEPTUAL MODEL DEFINE THE
VARIOUS SCHEMA, DEFINE THE SECURITY AND
INTEGRITY CHECK AND MOST IMPORTANTLY, BACK
UP AND RECOVERY.
     NEVER, NEVER IN THE -- UNDER ESTIMATE
OF IMPORTANCE OF BACK UP AND RECOVERY.  IN
MY PROFESSIONAL CAREER I GOT HURT MANY,
MANY TIMES BECAUSE OF INSUFFICIENT
EMPHASIS ON BACK UP AND RECOVERY.  BECAUSE
YOU HAVE TO UNDERSTAND ONCE HAVE YOU LOST
DATA, SOMETIMES IT IS CATASTROPHIC OR VERY
TIME CONSUMING TO RECONSTRUCT THAT.  AND
IT IS SO EASY TO HAVE THIS HAPPEN TO YOU.
     THIS SEEMS LIKE JUST -- ONE VERY
IMPORTANT THING IT IS NOT SUFFICIENT TO
BACK UP DATA ON THE SAME MACHINE.  IF YOU
CAN, ALWAYS KEEP A COPY ON ANOTHER
MACHINE.  THIS IS COMMON SENSE, BUT YOU
KNOW, OFTEN THIS HAPPEN TO US.  IT HAPPEN
TO ME MANY TIMES.  I SAY I BACK UP
TOMORROW, TOMORROW NEVER COME, AND THEN
SYSTEM CRASH AND LOST EVERYTHING.  HAS
THIS HAPPENED TO YOU?  MANY TIMES.  SO IF
YOU CAN, TRY TO BACK UP ON TO ANOTHER
MACHINE.  EVEN IF YOU DON'T HAVE A CURRENT
VERSION AVAILABLE, THE FACT THAT YOU HAVE
ANOTHER VERSION WHICH IS ONE WEEK OLD
SOMETIMES WILL HELP TREMENDOUSLY SO BACK
UP RECOVERY IS VERY IMPORTANT OF THE SO
LATER ON IF YOU GO TO WORK, IT IS NOT
ENOUGH THAT ONLY CONSIDER-MAYBE A GOOD
DESIGNER AND DESIGN ALL THAT, BUT IF YOU
FORGET ABOUT BACK UP RECOVERY, ALL THESE
THINGS, YOU ARE INVITING TROUBLE LATER ON.
     OKAY.  ALSO TALK ABOUT WHAT DOES
DATABASE MANAGEMENT SYSTEM ACTUALLY DO?
SO THE USER, THE END USER APPLICATION
PROGRAMMER HAS SENT IN SOME REQUEST.  THE
DBMS INTERPRETS THE REQUEST.  THE REQUEST
CAN BE EITHER IN THE FORM OF HIGH LEVEL
LANGUAGE LIKE SQL OR SOME KIND OF COMMAND
LANGUAGE FORM.  AND DBMS WILL PERFORM THE
MAPPINGS.  IN OTHER WORDS, THE USER'S
REQUEST IS IN THE EXTERNAL LEVEL, SO THE
USER IS THINKING ABOUT EXTERNAL VIEWS.  SO
THE SYSTEM PERFORMS AUTOMATICALLY THE
MAPPING FROM EXTERNAL TO CONCEPTUAL AND
THEN FROM CONCEPTUAL TO INTERNAL, MEANING
THAT IT GOES INTO ACCESS THE DATA AND
EXECUTE NECESSARY OPERATIONS ON THE STORED
DATABASE, RETRIEVE THE INFORMATION.  THIS
IS IN A NUTSHELL, WHAT THE DBMS DOES.
NOW, THESE DAYS, -- OKAY -- I CAN
INTERPRET EVERYTHING AS ONE SINGLE
MACHINE, OKAY, IN THAT TRADITIONAL WAY.
BUT THESE DAYS MORE AND MORE THE USERS ARE
NOT -- THEY COULD BE COMING ANYWHERE FROM
THE INTERNET.  THEY'RE NOT LOCAL.  THROUGH
SOME KIND OF FORM, SO OUR DBMSI EXTENDED.
WE ARE NOT SERVING THE LOCAL USER BUT
THROUGH THE WEB INTERFACE THE GLOBAL USER.
     SO, THE DBMS MUST SUPPORT DEFINITION,
MANIPULATION OF DATA, ROUTINE AND
UNPLANNED REQUESTS, ROUTINE REQUESTS ARE
LIKE PAYROLL WHICH YOU DO EVERY SO OFTEN.
AND UNPLANNED ARE LIKE MANAGEMENT REQUESTS
TO OBTAIN SOME INFORMATION THAT THE
MANAGEMENT WANTS.  SECURITY INTEGRITY WE
MENTIONED ABOUT THAT.  RECOVERY AND
CONCURRENCY ISSUES AND DATA DICTIONARY.
OH, THAT'S VERY-THAT'S VERY IMPORTANT
THING.  NOT IMPORTANT TO YOU NOW, BUT
AGAIN LATER ON YOU MAY FIND THIS TO BE
VERY, VERY USEFUL.  NOW CONCEPT OF DATA
DICTIONARY IS THAT YOU TRY TO COLLECT
INFORMATION AND BE ABLE TO BUILD A TABLE
THAT TELLS YOU WHERE EVERYTHING IS AND
WHAT IT IS ABOUT.
     FOR YOUR CLASS PROJECTS, NOT
NECESSARY.  YOU ARE NOT BEGINNING THE REAL
WORK.  BUT WHEN YOU'RE DEALING WITH A
LARGER APPLICATION, ESPECIALLY ONE THAT IS
EVOLVING IN TIME, IS CHANGING, YOU MUST
HAVE GOOD WAY OF DOCUMENTING EVERYTHING.
     OKAY.  REALIZE THAT AS COMPUTER
SCIENTISTS, OF COURSE PART OF OUR JOB IS
TECHNICAL.  WE MUST KNOW THE LANGUAGES, WE
MUST KNOW HOW TO BE ABLE TO WRITE PROGRAMS
AND HOW TO DEBUG, STUFF LIKE THAT. ANOTHER
PART IS NOT TECHNICAL BUT MANAGERIAL.  IF
YOU VIEW -- BUILD THOSE SKILLS IT HELPS
YOU A LOT IN TERMS OF YOUR CAREER.  I
DON'T MEAN MANAGEMENT IN TERMS OF
POLITICS, OKAY, THAT'S ANOTHER SUBJECT
MATTER.  BUT WHAT I MEAN BY MANAGEMENT IS
SYSTEMATIC AND LOGICAL WAY OF ORGANIZING
THINGS, OF ORGANIZING INFORMATION,
ORGANIZING DATA SO THAT YOU WILL MAKE JOB
BETTER, YOU WILL MAKE THE SYSTEM MORE
STABLE.
     SO THE DATA DICTIONARY IS A VERY
IMPORTANT PART.  WITHOUT THAT OUR SYSTEM
CANNOT FUNCTION CORRECTLY FOR THE LONG
RUN.
       A COUPLE OF BUZZ CORDS, YOU MAY SAY.
LIKE MANAGEMENT WE ARE MORE AND MORE DEALING
WITH DISTRIBUTED SYSTEM.  DISTRIBUTED IN THE
SENSE THAT OUR CLIENTS CAN BE LOW KATE
ANYWHERE.
     BUT NOT ONLY ARE CLIENTS ARE DISTRIBUTED,
OUR RESOURCES ARE ALSO DISTRIBUTED SO
CURRENTLY WE ARE MORE AND MORE INTO A
SITUATION WHERE WE HAVE NETWORK COLLECTION OF
PERSONAL COMPUTER, WORK STATIONS AND THE
DISTINCTION BETWEEN THE TWO, THE PC AND WORK
STATION REALLY GET BLURRY, SO THE POINT IS
THAT NOW WE HAVE A DATABASE NOT NECESSARILY
LOCATED ONLY IN ONE NOTE BUT DISTRIBUTED.
THAT IS THE CONCEPT OF DISTRIBUTED DATABASE.
NOW, WE WILL NOT STUDY DISTRIBUTED DATABASE
SYSTEM IN THIS COURSE, BECAUSE THIS IS REALLY
THE SCOPE IS AT GRADUATE LEVEL BUT YOU SHOULD
BE AWARE THAT DATA MAY NOT BE CONCENTRATED.
CLIENT SERVER, WE ARE ALL FAMILIAR WITH NOW.
WE ARE DEALING WITH THE NEW ARCHITECTURAL
ENVIRONMENT WHERE WE HAVE MULTIPLE CLIENTS,
MULTIPLE SERVER AND THE SYSTEM MAY NOT BE
HOMOGENEOUS IT MEANS WE HAVE SAME OPERATING
SYSTEM, SAME PLATFORM EVERYWHERE.
HOMOGENEOUS.  SO IF YOU ARE DEALING WITH A
PURE MICROSOFT ENVIRONMENT, THAT CAN BE
HOMOGENEOUS ENVIRONMENT.  SO YOU ARE GOING TO
DEAL WITH A DIFFERENT PROGRAM IF THIS IS NOT
TRUE, YOU COULD RUN INTO DIFFERENT DATABASE
MANAGEMENT SYSTEM.  THEN IS THAT
HETEROGENEOUS.  BUT LIKE I SAID, THESE DAYS
FROM THE END USER POINT OF VIEW, HE DOESN'T
KNOW, HE DOESN'T CARE.  HE REGARD THE WORK AS
MORE OR LESS HOMOGENEOUS.  ALL HE NEEDS TO
KNOW IS THE BROWSER AND HE USES IT TO ASK THIS
INFORMATION.  FROM A USER POINT OF VIEW, IT
SEEMS THE WHOLE WORLD IS HOMOGENEOUS BUT
ACTUALLY NOT.  BUT IT IS UP TO US TO PROVIDE
THIS GLUE AND MAKE THE DISTRIBUTED SYSTEM
AVAILABLE.
     SO, FOR THE DISTRIBUTED SYSTEM IT COULD
START FROM A HOMOGENEOUS SYSTEM WHERE WE HAVE
THE SAME PLATFORM, SAME OPERATING SYSTEM, SAME
DBMS.  BUT IT COULD BE MORE COMPLICATED,
HETEROGENEOUS SYSTEM WHERE WE HAVE MULTIPLE
DATABASES.  AND LAST BUT NOT LEAST, WE COULD
HAVE FED RATED SYSTEM.  WHERE YOU HAVE ALL
KINDS OF PLATFORM AND SOMEHOW GLUE TOGETHER
ESPECIALLY THESE DAYS, BECAUSE NOW WE ARE
INTO-PRETTY SOON YOUR CELL PHONE WILL BE
POWERFUL ENOUGH TO HAVE A BROWSER THERE,
YOU'LL HAVE YOUR MINIATURE DATABASE THERE AND
YOU USE THAT AS END POINT TO ACCESS THE
DATABASE.  JUST THINK ABOUT THAT. THEN IT WILL
TRULY BECOME DISTRIBUTED AND IT'S A FED RATED
SYSTEM.  FED RATED MEANS HAVE YOU DIFFERENT
SYSTEMS NEGOTIATING DIFFERENT PROTOCOLS.  AND
SO INTEROPERABILITY.  THIS USED TO BE A
MILITARY TERM, IF YOU CHANGED PLATFORM, CHANGE
HARDWARE AND SOFTWARE YOU STILL CAN OPERATE.
IT'S NATURAL FOR THE MILITARY TO BE CONCERNED
ABOUT THAT, RIGHT?  BECAUSE IF THEY CHANGE
DIFFERENT KIND OF OPERATING ENVIRONMENT, YOU
DON'T WANT ANY GLITCH ON THE SYSTEM.  BUT MORE
AND MORE EVEN THE COMMERCIAL APPLICATION WE
HAVE TO BE WORRIED ABOUT INTEROPERABILITY.  SO
THAT YOU ARE USING THE PC OR MOBILE ACCESS YOU
CAN STILL OPERATE THE SAME WAY.
     OKAY.  SO THIS SORT OF GIVES YOU OVERVIEW
OF THE ARCHITECTURE OF DATABASE. 

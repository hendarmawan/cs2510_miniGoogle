<html>

<head>
<title>CS2310 XML Based Servers</title>
<!--mstheme--><link rel="stylesheet" href="ice1011.css">
<meta name="Microsoft Theme" content="ice 1011">
</head>
<a href="pg6.htm"> <img src="previous.gif" align=left></a><a href="index.html" > </a>
<a href="pg8.htm"> <img src="next.gif" align=right ></a><a href="pg1.html" > </a>
 
<center> 
<h1>Message </h1>
</center> 
<p align="left">A Message DOM Object is created from the XML String.</p>
<p align="left"><span class="summary">
<span lang="EN" style="font-family: Arial; color: black;">Document Object Model 
is a platform- and language-neutral interface that will allow programs and 
scripts to dynamically access and update the content, structure and style of 
documents. The document can be further processed and the results of that 
processing can be incorporated back into the presented page. </span></span>
<span lang="EN" style="font-family: Arial; color: black;">&nbsp;</span></p>
<body>

<div style="border-style: double; border-width: 3px">
	<p align="justify"><code>public Message() {<br>
&nbsp;&nbsp; doc = new DocumentImpl(); <br>
&nbsp;&nbsp; elementMessage&nbsp;&nbsp; = doc.createElement(&quot;message&quot;); <br>
&nbsp;&nbsp; elementHeader&nbsp;&nbsp;&nbsp; = doc.createElement(&quot;header&quot;); <br>
&nbsp;&nbsp; elementStatus&nbsp;&nbsp;&nbsp; = doc.createElement(&quot;status&quot;); <br>
&nbsp;&nbsp; elementHeader.appendChild(elementStatus); <br>
&nbsp;&nbsp; <br>
&nbsp;&nbsp; elementCommand&nbsp;&nbsp; = doc.createElement(&quot;command&quot;); <br>
&nbsp;&nbsp; elementHeader.appendChild(elementCommand); <br>
&nbsp;&nbsp; <br>
&nbsp;&nbsp; elementQueueName = doc.createElement(&quot;queueName&quot;); <br>
&nbsp;&nbsp; elementHeader.appendChild(elementQueueName);<br>
&nbsp;&nbsp; <br>
&nbsp;&nbsp; elementMessageId = doc.createElement(&quot;messageId&quot;); <br>
&nbsp;&nbsp; elementHeader.appendChild(elementMessageId);<br>
&nbsp;&nbsp; <br>
&nbsp;&nbsp; elementProcessingRule = doc.createElement(&quot;processingRule&quot;); <br>
&nbsp;&nbsp; elementHeader.appendChild(elementProcessingRule); <br>
&nbsp;&nbsp; <br>
&nbsp;&nbsp; elementMessage.appendChild(elementHeader); <br>
&nbsp;&nbsp; elementPayload = doc.createElement(&quot;payload&quot;);<br>
&nbsp;&nbsp; elementMessage.appendChild(elementPayload);<br>
&nbsp;&nbsp; doc.appendChild(elementMessage);<br>
	}<br>
	<br>
	public Message(String msg) {<br>
&nbsp;&nbsp; InputSource in = new InputSource(new StringReader(msg));<br>
&nbsp;&nbsp; DOMParser parser = new DOMParser();<br>
&nbsp;&nbsp; try {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; parser.parse(in);<br>
&nbsp;&nbsp; } catch (Exception e) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(&quot;Message:Message:1:Unable to 
	create DOM object&quot;);<br>
&nbsp;&nbsp; }<br>
&nbsp;&nbsp; doc = parser.getDocument();<br>
	}<br>
&nbsp;</code></p>
	<p align="justify"><code>public String getStatus() {<br>
&nbsp;&nbsp; NodeList nl = doc.getElementsByTagName(&quot;status&quot;);<br>
&nbsp;&nbsp; Node n = nl.item(0).getFirstChild();<br>
&nbsp;&nbsp; if (n == null) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return &quot;&quot;;<br>
&nbsp;&nbsp; } else {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return n.getNodeValue();<br>
&nbsp;&nbsp; }<br>
	}<br>
	<br>
	public void setStatus(String s) {<br>
&nbsp;&nbsp; setHeaderElement(&quot;status&quot;, s);<br>
	}<br>
	<br>
	public void setHeaderElement(String elementName, String elementValue) {<br>
&nbsp;&nbsp; Node elementHeader = getXMLElement(&quot;header&quot;);<br>
&nbsp;&nbsp; Element oldElement = getXMLChildElement(&quot;header&quot;, elementName);<br>
&nbsp;&nbsp; elementHeader.removeChild(oldElement);<br>
&nbsp;&nbsp; Element newElement = doc.createElement(elementName);<br>
&nbsp;&nbsp; elementHeader.appendChild(newElement);<br>
&nbsp;&nbsp; newElement.appendChild(doc.createTextNode(elementValue));<br>
	}</code></div>

</body>

</html>

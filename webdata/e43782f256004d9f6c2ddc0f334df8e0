<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html xmlns:v="urn:schemas-microsoft-com:vml"
xmlns:o="urn:schemas-microsoft-com:office:office"
xmlns:w="urn:schemas-microsoft-com:office:word"
xmlns="http://www.w3.org/TR/REC-html40">

<head>
<meta http-equiv=Content-Type content="text/html; charset=iso-8859-1">
<meta name=ProgId content=Word.Document>
<meta name=Generator content="Microsoft Word 9">
<meta name=Originator content="Microsoft Word 9">
<link rel=File-List href="./unit6-pipeline_files/filelist.xml">
<link rel=Edit-Time-Data href="./unit6-pipeline_files/editdata.mso">
<!--[if !mso]>
<style>
v\:* {behavior:url(#default#VML);}
o\:* {behavior:url(#default#VML);}
w\:* {behavior:url(#default#VML);}
.shape {behavior:url(#default#VML);}
</style>
<![endif]-->
<title>Implementing the PIpelined CPU</title>
<!--[if gte mso 9]><xml>
 <o:DocumentProperties>
  <o:Author>Optical Computing Labratory</o:Author>
  <o:LastAuthor>Optical Computing Labratory</o:LastAuthor>
  <o:Revision>2</o:Revision>
  <o:TotalTime>1</o:TotalTime>
  <o:Created>2006-12-04T18:13:00Z</o:Created>
  <o:LastSaved>2006-12-04T18:14:00Z</o:LastSaved>
  <o:Pages>2</o:Pages>
  <o:Words>374</o:Words>
  <o:Characters>2134</o:Characters>
  <o:Company>University of Pittsburgh</o:Company>
  <o:Lines>17</o:Lines>
  <o:Paragraphs>4</o:Paragraphs>
  <o:CharactersWithSpaces>2620</o:CharactersWithSpaces>
  <o:Version>9.2720</o:Version>
 </o:DocumentProperties>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:Zoom>BestFit</w:Zoom>
 </w:WordDocument>
</xml><![endif]-->
<style>
<!--
 /* Font Definitions */
@font-face
	{font-family:Wingdings;
	panose-1:5 0 0 0 0 0 0 0 0 0;
	mso-font-charset:2;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:0 268435456 0 0 -2147483648 0;}
 /* Style Definitions */
p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-parent:"";
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
p
	{font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
@page Section1
	{size:8.5in 11.0in;
	margin:1.0in 1.25in 1.0in 1.25in;
	mso-header-margin:.5in;
	mso-footer-margin:.5in;
	mso-paper-source:0;}
div.Section1
	{page:Section1;}
 /* List Definitions */
@list l0
	{mso-list-id:1159923750;
	mso-list-type:hybrid;
	mso-list-template-ids:1965163208 804580036 636917764 1653501446 1467937452 809384874 989527022 1558760464 524075138 -1371900278;}
@list l0:level1
	{mso-level-number-format:bullet;
	mso-level-text:\F0B7;
	mso-level-tab-stop:.5in;
	mso-level-number-position:left;
	text-indent:-.25in;
	mso-ansi-font-size:10.0pt;
	font-family:Symbol;}
@list l1
	{mso-list-id:1796410986;
	mso-list-type:hybrid;
	mso-list-template-ids:978495626 1414680454 1218717404 164288932 739527776 2132454454 89827390 -849943856 -754662176 -2121654102;}
@list l1:level1
	{mso-level-number-format:bullet;
	mso-level-text:\F0B7;
	mso-level-tab-stop:.5in;
	mso-level-number-position:left;
	text-indent:-.25in;
	mso-ansi-font-size:10.0pt;
	font-family:Symbol;}
ol
	{margin-bottom:0in;}
ul
	{margin-bottom:0in;}
-->
</style>
<meta name=Author content="Donald M. Chiarulli">
</head>

<body lang=EN-US style='tab-interval:.5in'>

<div class=Section1>

<h3>Pipelining the CPU</h3>

<p class=MsoNormal>You should all be familiar with the fundamental performance
equation for CPU (ignoring I/O). </p>

<p>&nbsp;&nbsp;&nbsp; <i>Program execution time = (number of instructions
executed) * (average clock cycles per instruction) * (clock period time)</i> </p>

<p>In your multi-cycle CPU, clocks_per_instruction varied from 3 to 6 (plus
memory wait states) depending on the length of the instruction. In this part of
your design will attempt to improve the performance by minimizing the avaerage
number of clock cycles per instruction. We would like to make the average close
to 1. To do this, the system will be designed to to each of the individual
clock cycles that make up the instruction in parallel. Thus, a single clock
cycle (phase) from several instructions will be done at the same time. Ideally,
one new instruction will start and one will finish in each clock cycle. <br>
This way the average clock cycles per instruction will tend to be one. In
reality, we won't always achieve this but at least we have a goal. </p>

<p>The figure below is take from the Hennessy and Patterson text. If you do not
understand pipelining, you should review this chapter. </p>

<p><img width=752 height=493 id="_x0000_i1025" src=f630.jpg></p>

<p>To implement your pipeline you will need to modify your state controller and
add some pipeline registers between pipeline stages. This is one of the
possible ways: </p>

<ul type=disc>
 <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l1 level1 lfo1;tab-stops:list .5in'>A new instruction word is
     loaded to the instruction register. It is decoded by the control unit.</li>
 <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l1 level1 lfo1;tab-stops:list .5in'>The control unit generates
     control signals that are routed to the first pipeline stage</li>
 <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l1 level1 lfo1;tab-stops:list .5in'>At each cycle the control
     signals are copied from the current stage to the next stage.</li>
 <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l1 level1 lfo1;tab-stops:list .5in'>At each stage certain control
     signals drive certain units, such as MUX-es, thus directing the data flow
     and computation.</li>
</ul>

<p class=MsoNormal>There will be situations that have to be taken care of, such
as data and control hazards. For instance an attempt to read a register right
after its value is changed by the previous instruction, which is not finished
yet (RAW hazard). </p>

<p>You will have to solve the following hazards by the following methods: </p>

<ul type=disc>
 <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l0 level1 lfo2;tab-stops:list .5in'><u>RAW data hazard</u> by
     data feedback (decide whether a register value should be taken from the
     register file or as a result from a pipeline stage ahead).</li>
 <li class=MsoNormal style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l0 level1 lfo2;tab-stops:list .5in'><u>Control hazard</u> by
     stalling CPU (do not process new instructions until the hazard is
     resolved)</li>
</ul>

<p class=MsoNormal>You do NOT have to implement exception instructions,
including syscall and move from/to coprocessors.</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>You are encouraged to read the text book about the pipelined
processors and hazards, and apply this knowledge to your design. </p>

<p>Good Luck! <br>
&nbsp; </p>

</div>

</body>

</html>

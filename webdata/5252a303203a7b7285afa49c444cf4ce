<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" 
	"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>Open Source Project Management Tools</title>
<!-- metadata -->
<meta name="generator" content="S5" />
<meta name="version" content="S5 1.1" />
<meta name="presdate" content="20070327" />
<meta name="author" content="Perry Rajnovic" />
<meta name="company" content="University of Pittsburgh" />
<!-- configuration parameters -->
<meta name="defaultView" content="slideshow" />
<meta name="controlVis" content="hidden" />
<!-- style sheet links -->
<link rel="stylesheet" href="s5ui/i18n/slides.css" type="text/css" media="projection" id="slideProj" />
<link rel="stylesheet" href="s5ui/default/outline.css" type="text/css" media="screen" id="outlineStyle" />
<link rel="stylesheet" href="s5ui/default/print.css" type="text/css" media="print" id="slidePrint" />
<link rel="stylesheet" href="s5ui/default/opera.css" type="text/css" media="projection" id="operaFix" />
<!-- S5 JS -->
<script src="s5ui/default/slides.js" type="text/javascript"></script>
</head>
<body>

<div class="layout">
<div id="controls"><!-- DO NOT EDIT --></div>
<div id="currentSlide"><!-- DO NOT EDIT --></div>
<div id="header"></div>
<div id="footer">
<h1>Open Source Project Management Tools</h1>
<h2>University of Pittsburgh - 03.27.2007</h2>
</div>
</div>

<div class="presentation">

<div class="slide">
<h1>Open Source Project Management Tools</h1>
<h3>Perry Rajnovic</h3>
<h4>University of Pittsburgh</h4>
</div>

<div class="slide">
<h1>Presentation Outline</h1>
<ul>
<li>Project Management Overview</li>
<li>Source Code Tools</li>
<li>Defect Tracking Tools</li>
<li>Open Source Standards</li>
<li>Case Study: Subversion/Trac</li>
</ul>
</div>

<div class="slide">
<h1>Project Management Overview</h1>
<ul>
<p>Development of Software has become increasingly important with the growing
reliance of other industries upon the products of the tech industry. With this,
the standards have risen for software; inducing the need for more planning and
management of software throughout its lifecycle. This presentation will
describe some of the software management components which are used commonly
in the open source sector.
</ul>
</div>

<div class="slide">
<h1>Source Code</h1>
<p>Source code is the heart and soul of a software project once it has been
envisioned. Out of requirements and specification documents, along with other
planning papers, the actual software product is constructed of source code,
documentation and user manuals, support capabilities, etc.</p>
</div>

<div class="slide">
<h1>Source Code Tools</h1>
The complexity of the code which powers programs grows each year, necessitating
a way to maintain control over the changes introduced. A writer once quipped
<em>&quot;If debugging is the act of removing software bugs, programming must
then be the act of adding them.&quot;</em> This may be an amusing quote, but
it also belies the fact that every change made to a program may fix a bug,
only to introduce new ones. The most common method of reducing this from
occuring is good system design, along with a record of each change made to
the source base</p>
</div>

<div class="slide">
<h1>Source Code Control Systems</h1>
<p>The tools used to track a programs Source Code are usually referred to as
Revision control tools. (they also known as version control, source control or
(source) code management (SCM) tools). One of the first systems in place for
such revision managment was RCS (aptly named Revision Control System). As
software grew to be more complex with more needs and more people involved, the
tools had to evolve and adapt as well.</p>
</div>

<div class="slide">
<h1>CVS</h1>
<p>CVS was one of the first major open source versioning systems that gained
popularity in Open Source Software. It evolved from RCS, when Dick Grune was
working with students on a C compiler and needed a way to commit new versions
independently in the mid-80s. The code which makes up the modern versions of
CVS were begun in 1989 and Brian Berliner. Though CVS is one of the most
widely used systems, it is showing age and its development has slowed.</p>
</div>

<div class="slide">
<h1>CVS Usage (1)</h1>
<p>CVS uses a client/server paradigm for source control, with a usage pattern
that generally runs as follows:</p>
<ul>
<li>Create a <strong>Repository</strong>, which will hold all the source code
of the project in a centralized location.</li>
<li>A developer will <strong>Check Out</strong> a local copy of the code, which
can then be worked on independently of other users.</li>
<li>When the developer is done with a chunk of work (bug fixing, feature enhancement), they will <strong>update</strong> to ensure they have any changes other
developers made since the code was originally checked out.</li>
</ul>
</div>

<div class="slide">
<h1>CVS Usage (2)</h1>
<ul>
<li>Changes are merged after an update, occasionally the developer will have to
resolve merges by hand if the software cannot.</li>
<li>Once all issues have been resolved, the developer can <strong>check
in</strong> or <strong>commit</strong> the updated code to the repository,
which will then be propagated to other developers when they update.</li>
<li>To aid in dealing with multiple releases, a snapshot of the repository can
be <strong>tagged</strong> with a name which can be used to reproduce
a specific version.</li>
<li>To aid in developing new features or major changes, the repository may
be <strong>branched</strong>, allowing multiple repository development
lines.</li>
</ul>
</div>

<div class="slide">
<h1>Subversion</h1>
<p>Over time, the open source community wanted a new way to maintain their
source code, along with new features that would improve productivity and the
flexibility for development. Subversion was designed as a new revision control
tool that could supercede CVS. It was also open-source, and its development
began around 2000. It features nearly all of the capabilities of CVS, unless
there was a compelling reason not to adopt it.</p>
</div>

<div class="slide">
<h1>Subversion Features</h1>
<ul>
<li>Commits are truly atomic.</li>
<li>Directories, renames, and file meta-data are versioned.</li>
<li>Client/Server, layered library design.</li>
<li>Improved efficiency over CVS for many standard features.</li>
<li>Choice of database or plain-file repository implementations.</li>
<li>Symlinks, Binary Files, and program scriptability provided.</li>
</ul>
</div>

<div class="slide">
<h1>Defect Tracking Tools</h1>
<p>Fixing bugs in different versions of code is only one step in effectively
developing software. Keeping track of defects, maintaining information about
them and where they are exhibited is an important part of the software
development lifecycle. To this end several tools are available for tracking
this information. Bugzilla and Trac are two examples.</p>
</div>

<div class="slide">
<h1>Bugzilla</h1>
<p>The Mozilla Group, makers of Firefox and several other open source software
packages developed Bugzilla in 1998 to track defects in the Netscape
Communicator Suite. It is designed to track any bugs, however its conception of
a bug is very general, allowing for generic user-submitted tracking tickets.
</div>

<div class="slide">
<h1>Bugzilla Issue Lifecycle</h1>
<p align="center">
<img src="BzLifecycle.png"></p>
</div>

<div class="slide">
<h1>Trac</h1>
<p>Trac is another defect tracking system, however it is meant to provide a more
wholisitic approach to project management by integrating support for source
code management as well as providing additional capabilities than tickets. In
addition to Defect Tracking, Trac provides:</p>
<ul>
<li>Wiki - used for collaborative documentation and communication.</li>
<li>Fully integrated with Subversion - web interface to svn.</li>
<li>Roadmap - see project planning over time.</li>
<li>Timeline - See activity within a project as it occurs.</li>
</ul>
</div>

<div class="slide">
<h1>Open Source Standards</h1>
<p>Just as open source promotes the ability to view the code you're using, it
also promotes the reuse and modification of it. Along these lines, as more
standards are developed to provide interoperability between system, open
source standards allow anyone to provide this capability not only for free,
but often by using another systems implementation.
</div>

<div class="slide">
<h1>Genshi</h1>
<p>Genshi is a toolkit written in python which provides several useful
functions that are often needed when writing web-applications. This means
that when porting a service to the web, you will not need to worry as much
about ensuring that your output to the client's browser will be buggy or
non-compliant when it comes to standards. Additionally, since it also
provides parsing, it can be used to adapt or modify raw content coming from
applications which provide output in open standards (such as HTML or XML).</p>
</div>

<div class="slide">
<h1>Case Study: Subversion/Trac</h1>
<p>Trac is interesting that it is integrated with Subversion. Bugzilla has
traditionally been used in conjunction with CVS, and many projects that have
added Subversion support did so by modifying an existent CVS interface to
be more generic and compliant with both SCMs. A major feature of Trac that
allows it to be used in many systems is the fact that it is intended to
impose as little as possible on a team's established development process
and policies. Essentially, whether a group uses Waterfall, Iterative,
Multimedia, or Agile Software Development Practices, Trac is likely to be
easy to integrate and use with the project.</p>
</div>

<div class="slide">
<h1>More Information</h1>
<p>Below are links to the homepages or guides to many of the tools discussed
in this presentation.</p>
<ul>
<li><a href="http://subversion.tigris.org/">Subversion</a></li>
<li><a href="http://www.nongnu.org/cvs/">CVS</a></li>
<li><a href="http://bugzilla.mozilla.org/">Bugzilla</a></li>
<li><a href="http://trac.edgewall.org/">Trac</a></li>
<li><a href="http://genshi.edgewall.org/">Genshi</a></li>
</ul>
</div>

<div class="slide">
<h1>Questions?</h1>
<p>Thank You.</p>
</div>

</div>
</body>
</html>

